{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<ul> <li> <p>Consistent testing \u2013 for all technologies</p> <p>You can write Galasa tests as a JUnit-style Java class and run them locally from your IDE or in automation without having to change a single line of code. Deep z/OS integration means you can verify data by interrogating the CICS application directly and gives you the ability to check other z/OS resources, such as messages on queues, without using stubs or mocking.</p> <p></p> </li> <li> <p>Focus on the test \u2013 not the integration problems</p> <p>Galasa\u2019s framework enables deep integration tests to be run across multiple technologies. One test case can interact with 3270, Selenium, JMeter, batch jobs and more. When you\u2019re ready, Galasa integrates easily into your DevOps strategy, and can be used alongside other test tools.</p> <p></p> </li> <li> <p>Get the test data you need \u2013 fast</p> <p>Galasa can integrate with your test data strategy by helping you to provision new or existing test data records. Galasa can also lock test data so that many tests can run in parallel against the same test data pool, making it easy to repeat tests under identical conditions for swift debugging. Provisioned environments are automatically deprovisioned at test completion, leaving a clean test system state ready for the next tests.</p> <p></p> </li> <li> <p>See the big picture \u2013 from one location</p> <p>Test results and artifacts are stored in a single location in a uniform style, enabling easy extraction of big picture information. A single place to search all test output makes it easy to quickly identify the cause of a failure and run tests locally to assist with debugging.</p> <p></p> </li> <li> <p>Test planning and recording \u2013 made easy</p> <p>The ability to create a test catalog within Galasa means that you can easily define areas under test, enabling automation of even the most arduous manual tests and making it easy to record and plan what tests have run and what is left to do.</p> <p></p> </li> <li> <p>Keep on growing \u2013 Galasa grows with you</p> <p>Galasa is open source, so can be extended to support additional tooling with no vendor lock-in and no initial cost. The framework supports enterprise level throughput, as the test workload can be scaled horizontally in its own cloud environment.</p> <p></p> </li> </ul>"},{"location":"#deep-integration-testing-for-zos-powered-hybrid-cloud-applications","title":"Deep integration testing for z/OS powered hybrid cloud applications","text":"<p>Allowing you to test applications at scale regardless of platform \u2014 including z/OS.</p> <p>Get started Learn more 0.42.0 highlights</p>"},{"location":"about/","title":"About Galasa","text":"<p>Galasa, an Open Mainframe Project, is different from other test tools; enabling deep integration testing across platforms and technologies within a DevOps pipeline, Galasa supports repeatable, reliable, agile testing at scale across your enterprise.</p>"},{"location":"about/#platform-integration","title":"Platform integration","text":"<p>The Galasa framework is built with a knowledge of z/OS and cloud native platforms, enabling end-to-end testing of applications that run on different platforms without stubbing or mocking. </p>"},{"location":"about/#technology-integration","title":"Technology integration","text":"<p>Galasa is fully extensible. Galasa Managers enable Galasa to interact with any test technology, such as JMeter, Selenium, JCL, and 3270 screens and more. </p>"},{"location":"about/#pipeline-integration","title":"Pipeline integration","text":"<p>Galasa provides a REST endpoint that can be called from any CI/CD pipeline, for example, a Jenkins pipeline. Running Galasa as part of your pipeline enables fast, reliable testing at scale - Galasa can run thousands of tests in parallel. </p>"},{"location":"about/#enterprise-integration","title":"Enterprise integration","text":"<p>Galasa is not simply about providing the ability to write a test and run it in automation.  Galasa's test catalog enables you to understand and manage your tests, making it easy to schedule the right tests to run at the right time. Test results and artifacts are stored in a single repository, making reporting and problem determination simple when combined with native Kibana and Grafana dashboards. </p> <p>Galasa is open-source, so there\u2019s no vendor lock-in; it can be integrated into an existing pipeline and work with third-party tooling. </p>"},{"location":"about/#using-galasa-in-a-hybrid-cloud-environment","title":"Using Galasa in a hybrid cloud environment","text":"<p>Using hybrid cloud, enterprises can host applications and data on the platforms that deliver the best combination of efficiency, security, and performance. However, a mix of platforms and technologies makes end-to-end integration testing complicated.</p> <p>Galasa simplifies testing in such an environment. The following diagram shows an example of how you can use Galasa to test a hybrid cloud application:  </p> <p></p> <p>This sophisticated solution requires end-to-end integration testing of an application that runs on different platforms (z/OS and Cloud) and uses different technologies (a 3270 emulator, JCL batch job and Selenium Web Driver). </p> <p>When run inside a Galasa Ecosystem, a Galasa test can be invoked from an IDE or as part of a CI/CD pipeline. The Galasa framework initializes the test environment, creates valid test data, runs the test and validates the test output. As all test results and artifacts are stored in one location, it's easy to generate reports and diagnose the cause of any failures.</p>"},{"location":"about/#use-galasa-to-help-you-to","title":"Use Galasa to help you to:","text":"<ul> <li>simplify the construction of new integration tests and incorporate them easily into future regression test suites</li> <li>quickly validate your applications against new releases of middleware or operating system updates</li> <li>deliver new functions to applications fast and with confidence to delight your users </li> <li>easily verify system functionality post maintenance</li> </ul>"},{"location":"about/automation/","title":"Benefits of Galasa","text":"<p>It is estimated that 80% of all enterprise testing is manual. Imagine how much faster you could deploy applications if you could automate a significant proportion of this. </p> <p>Automated testing and agile delivery are traditionally seen as being available only in greenfield projects, but with the introduction of Galasa, you can be agile in a mainframe environment as well. </p>"},{"location":"about/automation/#why-automate-with-galasa","title":"Why automate with Galasa?","text":"<ul> <li>A great fit for automating a wide set of test techniques including golden path, variation and load tests. However, its biggest benefit is that it can be used to create integration level tests.</li> <li>Enables you to run tests across a hybrid cloud application from a single test class.</li> <li>Provides the capability to test a range of interfaces from traditional 3270 terminals through to REST, mobile and browser-based tests.</li> <li>Enables unique, deep integration with z/OS and can be used with other test tools, enabling tests to aggregate information from a range of sources.</li> </ul>"},{"location":"about/automation/#testing-without-limitations","title":"Testing without limitations","text":"<p>Testing an endpoint, whether it be a 3270 terminal, a REST API or a web service is a simple operation and there are plenty of tools that enable you to accomplish this task.  However, there are  limitations to some of these tools:</p> <ul> <li>The tests cannot utilize a mix of technologies.  For example, let\u2019s say you need to examine an IBM CICS or a z/OS resource to validate that the response from the REST endpoint you are testing is correct.  How can the test get this information without the tester understanding how to access it?</li> <li>Most of the tools require some level of manual operation which limits their effectiveness in a continuous delivery pipeline</li> <li>The tools cannot contextually bind to either a provisioned, or pre-existing environment in an intelligent manner.</li> </ul> <p>Galasa makes it simple for a test to access, drive and interrogate a range of z/OS, distributed and open source tools and integrate them together within the same simple test class.</p> <p>Tests written for Galasa can be run locally on your computer for manual debugging or can be scheduled to run on a server in automation mode - great for overnight runs or when you need to run tests in parallel or at scale. </p>"},{"location":"about/automation/#key-benefits-of-using-the-galasa-test-framework","title":"Key benefits of using the Galasa test framework","text":""},{"location":"about/automation/#smooth-integration-with-the-rest-of-your-pipeline","title":"Smooth integration with the rest of your pipeline:","text":"<ul> <li>A single API runs any test regardless of underlying technology.</li> <li>Tests can be dynamically selected from a catalog.</li> <li>Environment stability is assured before tests are run.</li> <li>Test results can be monitored automatically.</li> </ul>"},{"location":"about/automation/#a-single-point-of-control","title":"A single point of control:","text":"<ul> <li>Test artifacts are centrally stored and indexed.</li> <li>Test results are correlated, ensuring the quality of the release for all product components.</li> <li>This is a single control for allocation and management of resources and tests.</li> </ul>"},{"location":"about/automation/#scalable-testing","title":"Scalable testing:","text":"<ul> <li>Late binding of the test material to the system under test allows the same test to run against multiple environments without changing the test.</li> <li>Tests scale horizontally without changing the underlying test code.</li> <li>Management of test isolation means that multiple tests can run in parallel, logically isolated by the framework.</li> </ul>"},{"location":"about/automation/#environment-agnostic-capabilities","title":"Environment-agnostic capabilities:","text":"<ul> <li>Tests can be run against multiple environments as code progresses through release stages.</li> <li>The Galasa test engine allows tests to run locally for easier development and debugging, as well as in the Galasa Ecosystem for production testing at scale.</li> </ul>"},{"location":"about/devops/","title":"Galasa and DevOps","text":""},{"location":"about/devops/#what-is-devops","title":"What is DevOps?","text":"<p>DevOps is a set of processes that enable development and operations teams to continuously deliver high quality software in a fast, reliable, repeatable way.  </p>"},{"location":"about/devops/#benefits-of-galasa-as-part-of-a-devops-strategy","title":"Benefits of Galasa as part of a DevOps strategy","text":"<p>Galasa as part of a DevOps strategy can provide significant benefit in three key areas:</p> <ol> <li> <p>Faster time to value</p> <p>Galasa provides the ability to automate integration tests in a repeatable and reliable way, enabling fast and efficient software delivery and reducing manual effort.</p> </li> <li> <p>Increased capacity to innovate</p> <p>Running your integration tests by using Galasa automation instead of running them manually saves time, freeing up people to work on higher-value activities, such as Site Reliability Engineering (SRE) or exploratory testing.</p> </li> <li> <p>Enhanced customer experience</p> <p>Galasa enables continuous testing, leading to faster, better quality builds. In agile projects, this means you can get early feedback from stakeholders about the software that\u2019s being delivered.</p> </li> </ol>"},{"location":"about/devops/#devops-principles-and-galasa","title":"DevOps principles and Galasa","text":"<p>Galasa supports the following three key principles of DevOps:</p> <ul> <li> <p>Develop and test against production-like systems</p> <p>Galasa supports the DevOps concept \"shift left\", in which operational concerns move earlier in the delivery life cycle, toward development. Galasa tests can bind to a stubbed environment, a virtual machine, or a replica production environment without changing a single line of test code. Teams can test against systems that behave like production to see how the application behaves and performs well before it\u2019s ready for deployment.    </p> </li> <li> <p>Deploy with repeatable, reliable processes</p> <p>Galasa enables development to support an agile software development process all the way through from development to production by using automation to run tests that are iterative, frequent, repeatable, and reliable.</p> </li> <li> <p>Monitor and validate quality</p> <p>When software is tested, Galasa stores the test artifacts in a single repository, making it quicker and easier to analyse and identify the cause of a failure. Test results are captured in a consistent format, making it simpler to compare results.</p> </li> </ul>"},{"location":"about/different/","title":"Why Galasa is different","text":"<p>What makes Galasa different from other testing tools?</p> <p>If you've ever struggled to implement automated testing across a complex technology stack, you might recognize some of the issues that we identified during our design process. Expand the following headings to see how Galasa solves these challenges.</p>"},{"location":"about/different/#running-consistent-repeatable-reliable-tests-across-the-application-stack","title":"Running consistent, repeatable, reliable tests across the application stack:","text":""},{"location":"about/different/#ensuring-consistent-testing-across-technologies","title":"Ensuring consistent testing across technologies","text":"<p>Automating tests effectively and consistently across multiple environments and multiple tools requires a framework that can support and integrate across the whole application stack. The same test must also be capable of running against multiple z/OS environments without code changes.</p> <p>Galasa is designed to work in hybrid cloud applications, operating with the entire application stack, so you can provision in a cloud environment, but bind to a z/OS test environment. The Galasa framework integrates and wrappers multiple techonolgies and test tooling in a consistent way, providing a platform to test different aspects of the application stack in the same language and in the same fashion. One test case can interact with 3270 emulators, Selenium, JMeter, batch jobs and other applications. </p>"},{"location":"about/different/#verification-and-validation-without-mocking-or-stubbing","title":"Verification and validation without mocking or stubbing","text":"<p>Verifying and validating data at every boundary without stubbing or mocking is hard.  Galasa enables real data verification by interrogating a CICS (or other) application directly or by enabling the checking of other z/OS resources, for example, messages on queues or the updating of log streams.</p>"},{"location":"about/different/#reliability-and-availability-of-test-data","title":"Reliability and availability of test data","text":"<p>Test data is often in a state of flux, resulting in the breaking of existing tests and difficulty in snapshotting and data integrity.</p> <p>Galasa provides the mechanisms through the use of Application Managers to either generate test data on the fly, or to locate valid test data from a data lake. Data can then be locked whilst in use, preventing cross contamination with other running tests.</p> <p>You can integrate Galasa tests with your existing tooling, allowing you to share data between tools within the same test.</p>"},{"location":"about/different/#running-the-same-test-locally-and-in-automation","title":"Running the same test locally and in automation","text":"<p>Tests need to be run on demand and in automation. Running and re-running manual tests is laborious, time consuming and not exactly the best use of a tester's skills or time.  Galasa tests can be run locally from your own IDE, or in automation without changing a single line of test code. </p> <p>With Galasa you can automate and automatically schedule these repetitive regression tests and use the time saved to free up testers to spend their time designing test cases that are more likely to find important defects.</p> <p>Once written, a Galasa test is available 24x7 for reuse.</p>"},{"location":"about/different/#centralizing-maintaining-and-storing-results-consistently","title":"Centralizing, maintaining and storing results consistently:","text":""},{"location":"about/different/#maintaining-recording-and-planning-with-a-large-suite-of-tests","title":"Maintaining, recording and planning with a large suite of tests","text":"<p>Maintaining a set of test materials (which could be written in several different languages), recording which tests have been run, and scheduling any outstanding tests is difficult and time consuming. Manual tests are often split across teams and reported separately, with no single, consistent view of the testing.</p> <p>The Galasa test catalog provides the ability to generate a clear description of the areas covered by any given test. Related tests can be stored within a shared test catalog, from which tests can be automatically selected to run for any given change set. Automated regression test suites can be created for new software versions, so you can run a specified set of tests for automated baselining of a new environment installation, such as a hardware migration. </p>"},{"location":"about/different/#diagnosing-failures","title":"Diagnosing failures","text":"<p>Investigating test failures takes up time and can be particularly tedious with larger scripts. Test artifacts are often stored in lots of different repositories, making it time-consuming and difficult to locate the right information to help you root out the cause of a failure.</p> <p>Galasa automatically stores all test artifacts in a single, central repository, making diagnostics quicker and easier and allowing big picture information to be extracted easily. You can also debug tests using a local instance of Galasa, so you can examine every line of code.</p>"},{"location":"about/different/#big-picture-communication","title":"Big picture communication","text":"<p>Test results are often stored in spreadsheets and manually approved by product owners before changes are promoted. This makes it difficult to understand the tests that have been run, and the manual intervention required as part of the sign-off process can delay delivery.</p> <p>Galasa's dashboard integrates all your test results in one place, making reporting and reviewing between test phases easy and consistent.</p>"},{"location":"about/different/#extensibility-and-scalability-future-proofing-your-testing","title":"Extensibility and scalability - future-proofing your testing:","text":""},{"location":"about/different/#maintaining-performance-levels","title":"Maintaining performance levels","text":"<p>Running scripts and tooling on tools such as Jenkins can lead to performance issues \u2013 ideally the tests and the Jenkins nodes should not share workload. Whilst you don\u2019t want to miss defects by limiting the number of tests run, the more tests that are running the longer the testing phase takes, and the increased amount of computer resources that are required from the Jenkins node will limit the throughput. Locking resources within the framework prevents tests from colliding; instead tests are queued until those resources become available.</p> <p>Galasa\u2019s tests as a service allows the test workload to be moved off a Jenkins node, with the added benefit of being capable to scale horizontally in its own cloud environment. </p>"},{"location":"about/different/#expanding-pipelines","title":"Expanding pipelines","text":"<p>The addition of new 3<sup>rd</sup> party tooling can lead to problems with managing test artifacts. Maintaining, updating and ensuring compliance on Jenkins servers with increasing numbers of plugins is time-consuming. </p> <p>Galasa is open source so can be extended to support additional specific tooling. In addition, Galasa manages its own plugins, so less manual intervention is required for installation and updates.  </p>"},{"location":"about/different/#deep-integration-testing-at-scale","title":"Deep integration testing at scale","text":"<p>It can be difficult to ensure that testing across cloud and z/OS platforms is kept aligned.  If z/OS is the best place for the application to run, but developing a solution there is slower than elsewhere, it can cause problems. Manual testing can be tedious and error prone, making it time consuming to get an entire application thoroughly tested, both in terms of depth of testing and in breadth of coverage.</p> <p>Galasa tests can scale horizontally without changing the underlying test code and the framework enables test isolation, so that multiple tests can run in parallel, logically isolated by the framework.</p>"},{"location":"about/different/#minimizing-manual-intervention","title":"Minimizing manual intervention","text":"<p>Manual testing involves a significant amount of human intervention, which means tests can take too long to write and are hard to understand and maintain. This process is particularly laborious and expensive when problems are found and re-builds required.</p> <p>Galasa makes tests quicker to write and easier to maintain by extracting the boilerplate code out of the tests. Just import the components you need from within your test code to access the abstracted functionality, gaining the benefit of the expertise of the person who wrote them, and the productivity introduced by their simple use.</p>"},{"location":"about/different/#summary","title":"Summary","text":"<p>Galasa is an open source deep integration test framework for teams looking to give more power to their testers. What makes Galasa a deep integration test framework is its ability to support tests that cross system boundaries and reach into remote layers inaccessible to other test tools. </p> <p>Galasa has been architected to ensure that the routine tasks of writing and executing tests are straightforward. The more complex parts of tests (such as provisioning) are abstracted into other components that can be written by experts and easily distributed to the team.</p> <p>Galasa is open source, so can be extended to support additional tooling. The framework is scalable, capable of supporting enterprise level throughput, whilst ensuring that resources are managed reliably.</p>"},{"location":"about/history/","title":"A brief history of Galasa","text":""},{"location":"about/history/#the-problem","title":"The Problem","text":"<p>Galasa started life as JAT (JUnit Automated Testing) - an internal IBM tool extensively used for integration testing within IBM z/OS teams. It was created to help eliminate repetitive manual and semi-automated testing. These manual tests could be complex and take a long time to set up and run, increasing the risk of introducing human-error into the process. It was also time-consuming to identify the cause of failures, as diagnostics were stored in different repositories, including logs and program compilation output on z/OS, and test script log output on laptops. Changes to IBM CICS could take many weeks to reach Beta as tests took too long to execute, increasing the time required to deliver. </p>"},{"location":"about/history/#the-solution","title":"The Solution","text":"<p>JAT was created to solve these problems. The framework was inspired by JUnit but with a focus on functional and integration testing. JAT is written in Java - in part because of Java's run-anywhere capability, huge number of utility libraries and its extensive ecosystem. However, the team found that Java expertise is not essential to use it. </p> <p>Executing a test was made much easier and quicker as test code could be run at the push of a single button. Automated scheduling of test runs enabled the continuous testing of new code in a timely and cost-effective manner.</p> <p>In JAT, all aspects of a test run are automatically recorded and stored in a single repository. If a test fails in an automated pipeline, simplified access to logs, screenshots and data makes it quick and easy to diagnose the problem. The system is highly scalable, allowing a large number of tests to be run in parallel against many releases of CICS, enabling IBM to deliver a consistent, reliable product.</p>"},{"location":"about/history/#the-result","title":"The Result","text":"<p>After JAT was rolled out across CICS, the team fully automated their tests, including tasks such as creating test data, running batch jobs, invoking RESTful interfaces, interacting with 3270 terminals, and provisioning and de-provisioning test environments. Manual regression was virtually eliminated, giving the team more time to focus on exploratory testing to root out hard-to-find defects. Repeatable, scalable and reliable integration tests running as part of the DevOps pipeline helped to reduce the delivery of a new CICS feature from 18 to 3 months without any loss of confidence in quality. In fact, JAT was so successful, that it was adopted by other teams across IBM. </p>"},{"location":"about/history/#the-future","title":"The Future","text":"<p>The success of JAT inspired us to perfect the architecture and release our exciting new framework as Galasa. </p> <p>Galasa is a type of Snout Moth and a moth was attached to the first \"bug\" report by Grace Hopper where she reported the \"first actual case of a bug being found\" as a moth had flown into a relay. While we do not know if it was a Galasa moth in the relay, we quite like the name.</p> <p>We\u2019d love you to get involved with the project and help us establish a collaborative community where we can share great ideas and build new, cool Galasa features together.</p>"},{"location":"community/","title":"Get involved","text":"<p>Galasa thrives on users\u2019 collaboration, contributions and creativity and we invite you to share your skills and ideas at all levels.</p> <p>Check out the Contributing to Galasa guidelines to propose fixes, add new features or improve the software and documentation.</p> <p>Join us on the Open Mainframe Project Slack workspace where we discuss new features and provide support for each other. Register to join first if you're not yet a member.</p> <p>We have the following available Slack channels:</p> <ul> <li><code>#galasa-dev</code> - for developers of Galasa code or Galasa extensions </li> <li><code>#galasa-users</code> - for users comments, and for making announcements </li> <li><code>#galasa-tsc</code> - for technical steering committee discussions on longer term over-arching issues relating to Galasa </li> </ul>"},{"location":"docs/","title":"Galasa Documentation","text":"<p>To get going with Galasa as quickly as possible, explore the Getting started using the Galasa CLI section. Read on to learn a little about Galasa's architecture and key components.</p>"},{"location":"docs/#galasas-architecture","title":"Galasa's architecture","text":"<p>At its top level, Galasa decomposes into three major components:</p> <ul> <li>The underlying core Galasa framework</li> <li>A collection of Managers </li> <li>A test runner</li> </ul> <p>Galasa's key components (not all Managers are currently implemented) </p>"},{"location":"docs/#the-core-framework","title":"The core framework","text":"<p>Galasa's core framework orchestrates all component activities, and co-ordinates with the test runner to actually execute your tests. You never have to write code to invoke your tests - you just write the code that defines them, as a set of one or more test classes and the methods within. </p> <p>The Galasa framework automatically recognizes your test definitions, and launches the required Managers and the test runner to provision and execute them. All without you having to explicitly invoke them.</p> <p>It is unlikely that you will need to change the framework or test runner code during the normal range of testing activities. </p> <p>For more information about the benefits of using a framework for your automated testing, see the Benefits of Galasa section.</p>"},{"location":"docs/#managers","title":"Managers","text":"<p>The two main purposes of a Manager are to reduce the amount of boilerplate code within a test and provide proven tool interaction code. This makes the test code simpler and easier to write, understand and maintain, as the focus of a test's development shifts to validating application changes, rather than marshalling environmental resources.</p> <p>Sometimes, Managers perform a range of general-purpose services, and at other times, they are much more focused. For example, the HTTPClientManager contains a wide range of facilities you might expect from a programmable HTTP client, while the DB2Manager confines its scope to a range of DB2 interactions.</p> <p>Different Managers can collaborate with each other to perform a joint task, including sharing information and getting other Managers to complete tasks for them. This work is coordinated by the Galasa framework.</p> <p>Three types of Manager are delivered with Galasa:</p> <ul> <li>Core Managers: a set of central, fundamental Managers with wide-ranging use. Examples include zosFileManager, zosBatchManager and zosCommandManager. These are part of the core Galasa distribution.</li> <li>Product Managers: a set of Managers responsible for test interactions with specific products, for example CICSManager, WMQManager and DB2Manager. Again, some product Managers will be part of the core Galasa distribution but it is also possible that your team may write its own Manager for a specialty product used in your organization.</li> <li>Other, or ancillary Managers: a set of Managers to orchestrate the integration of a range of useful software tools and components, such as SeleniumManager, JMeterManager and DockerManager. It is likely that you will write your own Managers to expose the services of similar tools and components used within your team.</li> </ul>"},{"location":"docs/#application-specific-managers","title":"Application-specific Managers","text":"<p>As well as consuming the services of Managers either delivered with Galasa or written by others, you may need to write a Manager specific to your application under test - an application-specific Manager. This is to abstract application-specific boilerplate functionality into a single place, removed from the tests themselves. </p> <p>A summary table describing Managers that are currently available or planned for future releases is available in the Managers topic.</p>"},{"location":"docs/#the-test-runner","title":"The test runner","text":"<p>Under the direction of the core framework, the Galasa test runner is responsible for actually executing your tests.</p>"},{"location":"docs/cli-command-reference/","title":"Getting started using the Galasa CLI","text":"<p>There are two options available when downloading Galasa. You can download Galasa from the Galasa repository in GitHub, or you can download the Galasa zipped distribution for sharing with your department. If you do not have access to Maven Central or Docker Hub from your company network, use the Galasa zipped distribution. Otherwise, download the binary file for the Galasa CLI from GitHub. Once you have downloaded and installed Galasa, you can import the configuration into an IDE of your choice.</p> <p>Prerequisites vary, depending on the option that is chosen. For the purposes of the Galasa documentation, the term <code>online</code> refers to the Galasa binary that is downloaded from the Galasa CLI repository in GitHub, and the term <code>offline</code> refers to Galasa zipped distribution. </p> <p>The following topics in this section take you through the software requirements for each install option, and explain how to get started with the galasactl tool. You can then find out how to initialise your local environment so that you can start creating, building and running Galasa tests, and viewing the test run output. </p>"},{"location":"docs/cli-command-reference/#next-steps","title":"Next steps","text":"<p>To learn about the software that you need to install to start using Galasa, see the CLI prerequisites online documentation, or the CLI prerequisites offline documentation, depending on which option you have chosen.</p> <p>To find out about the architecture of Galasa and some of its key components, take a look at the Galasa architecture documentation. </p> <p>If you have access to YouTube, you can also watch a video about the The Galasa command line tool, which guides you through the process of setting up and using the tool from start to finish. </p>"},{"location":"docs/cli-command-reference/cli-command-reference-about/","title":"Galasa CLI commands","text":"<p>Galasa CLI commands start with <code>galasactl</code>. Example commands are provided for running on Mac or Unix, and Windows Powershell. The Windows Powershell uses the backtick (`) for line continuation characters. If you are using Windows command-shell, the line continuation character is the caret (^). </p> <p>You can view the Galasa CLI command syntax, including parameter descriptions, in the CLI reference.</p>"},{"location":"docs/cli-command-reference/cli-command-reference-about/#getting-help","title":"Getting help","text":"<p>Once you have installed the Galasa CLI, you can use the following command to get more information about the command and command options, including default values.</p> <pre><code>galasactl --help\n</code></pre> <p>Use the <code>--log</code> option to send logging information to a file. Any folder that is referenced must exist. Existing files are overwritten. Specify <code>-</code> to log to <code>stderr</code>. The default is no logging.</p> <pre><code>galasactl --log &lt;logFilePath&gt;  \n</code></pre>"},{"location":"docs/cli-command-reference/cli-command-reference-about/#errors","title":"Errors","text":"<p>You can view a list of error messages that can be generated by the galasactl tool in the CLI reference.</p>"},{"location":"docs/cli-command-reference/cli-command-reference-about/#known-limitations","title":"Known limitations","text":"<p>Go programs can sometimes struggle to resolve DNS names, especially when a working over a virtual private network (VPN). In such situations, you might notice that a bootstrap file cannot be found with galasactl, but can be found by a desktop browser, or curl command. In such situations you can manually add the host detail to the <code>/etc/hosts</code> file, to avoid DNS being involved in the resolution mechanism.</p>"},{"location":"docs/cli-command-reference/cli-prereqs/","title":"CLI prerequisites online","text":"<p>The following section explains more about the software prerequisites that you need so that you are ready to install Galasa from the Galasa CLI repository in GitHub.</p>"},{"location":"docs/cli-command-reference/cli-prereqs/#java-jdk","title":"Java JDK","text":"<p>Required. Galasa tests and Managers are written in Java - you need to install a Java version 11 JDK or later to use it. Note: We do not currently support Java 21 or later. After installing, you must set the <code>JAVA_HOME</code> environment variable to your Java JDK installation path and check it set successfully by running the command <code>echo $JAVA_HOME</code> on Mac or Unix, or <code>echo %JAVA_HOME%</code> on Windows (PowerShell). The returned result shows the path to your JDK installation.</p>"},{"location":"docs/cli-command-reference/cli-prereqs/#maven","title":"Maven","text":"<p>You must install either Maven or Gradle in order to build Galasa projects, which are hierarchical file structures that provide the ability to store and run Galasa tests.  </p>"},{"location":"docs/cli-command-reference/cli-prereqs/#gradle","title":"Gradle","text":"<p>You must install either Maven or Gradle in order to build Galasa projects, which are hierarchical file structures that provide the ability to store and run Galasa tests. </p> <p>The following table shows the current compatibility between Gradle and Galasa versions: </p> Gradle release Compatible Galasa version 6.8.x All 6.9.x All 7.x.x All 8.x.x 0.36.0 or later <p>If you are upgrading to Gradle version 8 from an earlier version, see the <code>Upgrading tests to compile using Gradle version 8</code> section in the Upgrading documentation to understand the changes you need to make to create Galasa projects and build and compile Galasa test code. </p> <p>Remember to add Gradle to your PATH. You can check by running <code>echo $PATH</code> on Mac or Unix, or <code>echo %PATH%</code> on Windows (PowerShell).</p>"},{"location":"docs/cli-command-reference/cli-prereqs/#3270-emulator","title":"3270 emulator","text":"<p>Optional. Although you do not need a 3270 emulator to run a Galasa test (even if it tests a 3270 application) you can use one to run Galasa Simbank online, a simulated version of an application that helps you get acquainted with Galasa before connecting to a real mainframe to run your own tests. There are many such emulators available but IBM's Personal Communications (PCOMM) is frequently used, as is IBM's Host on Demand software, which includes support for Windows, Linux and MacOS.</p>"},{"location":"docs/cli-command-reference/cli-prereqs/#next-steps","title":"Next steps","text":"<p>To install Galasa for using in the command line, follow the instructions in the Installing the Galasa CLI online documentation.</p>"},{"location":"docs/cli-command-reference/initialising-home-folder/","title":"Initialising your local environment","text":"<p>To start using Galasa tools, or running Galasa tests, you need to set up some basic file structures and files in your home directory. You can set up this structure easily by using the galasactl tool to initialise your local environment. Once your local environment is initialised, you can start running Galasa tests on your local JVM. </p>"},{"location":"docs/cli-command-reference/initialising-home-folder/#setting-the-galasa-home-folder-optional","title":"Setting the Galasa home folder (optional)","text":"<p>Galasa has a home folder that is set to <code>~/.galasa</code> by default. The home folder is a writable folder that is used by default to store test results and artifacts which are created when tests are run using local JVMs.</p> <p>You do not need to change the default setting, but if you want to, the default value can be overridden by using the <code>GALASA_HOME</code> environment variable. Setting this variable means that you can control where files are created, where Galasa retrieves settings from, and where local test run results and artifacts are stored. This is useful if you need isolation between multiple Galasa local test environments, if you want to share your configuration and test run results with others, or if your <code>~/.galasa</code> folder is low on disk space.</p> <p>For example, to set the <code>GALASA_HOME</code> environment variable to a folder called mygalasatests in a directory called temp, use the following command:</p> <p>On Mac or Unix:</p> <pre><code>export GALASA_HOME=/temp/mygalasatests\n</code></pre> <p>On Windows: </p> <pre><code>set GALASA_HOME=C:\\temp\\mygalasatests\n</code></pre> <p>You can override the value of the <code>GALASA_HOME</code> environment variable on a call-by-call basis by using the <code>--galasahome</code> command-line option.</p> <p>If you change the <code>GALASA_HOME</code> variable to a non-existent or non-initialised folder path, you can create the folder and re-initialise the folder path by running the <code>galasactl local init</code> command.</p>"},{"location":"docs/cli-command-reference/initialising-home-folder/#setting-up-the-galasa-file-structure","title":"Setting up the Galasa file structure","text":"<p>You can initialise your local environment, and set up the files and file structure you need, by running the following command on a command line:</p> <pre><code>galasactl local init\n</code></pre> <p>This one-time command is run once per Galasa home directory and helps you to quickly create the folder and files that you need. If you already have a Galasa home folder set up, the folder and files are not created. </p> <p>The command creates the following file structure, with default contents in each of the properties files:</p> <pre><code>${HOME}/.galasa\n\u251c\u2500\u2500 bootstrap.properties\n\u251c\u2500\u2500 cps.properties\n\u251c\u2500\u2500 credentials.properties\n\u251c\u2500\u2500 dss.properties\n\u251c\u2500\u2500 overrides.properties\n</code></pre> <p>For more information about these files and what they are used for, see the About the properties files section. </p> <p>Running the <code>galasactl local init</code> command also creates an <code>/.m2</code> directory, containing a <code>settings.xml</code> file. The <code>settings.xml</code> file enables you to set configurations for Maven to use during test runs. For example, you can set local and remote repository locations, credentials for private repositories, and Maven profile settings. </p> <p>You can validate the set up by locating your user home directory and confirming that it contains a <code>.galasa</code> and a <code>.m2</code> folder. On Windows, the user home directory resembles: <code>C:\\Users\\&lt;username&gt;</code>, on MacOS it will be <code>/Users/&lt;username&gt;</code> and on Linux <code>/home/&lt;username&gt;</code>. Note that any file or folder beginning with a <code>.</code> is a hidden folder, so you might need to change the settings on your file browser user interface to show hidden files.</p> <p>Note - online installation only</p> <p>If an <code>.~/.m2/settings.xml</code> file already exists, the <code>galasactl local init</code> command does not update it. View the file contents and check that it has the required <code>maven.central</code> and <code>plugin</code> repositories configured. The file should contain the following content:</p> <pre><code>&lt;settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\"&gt;\n    &lt;pluginGroups&gt;\n        &lt;pluginGroup&gt;dev.galasa&lt;/pluginGroup&gt;\n    &lt;/pluginGroups&gt;\n\n    &lt;profiles&gt;\n        &lt;profile&gt;\n            &lt;id&gt;galasa&lt;/id&gt;\n            &lt;activation&gt;\n                &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;\n            &lt;/activation&gt;\n            &lt;repositories&gt;\n                &lt;repository&gt;\n                    &lt;id&gt;maven.central&lt;/id&gt;\n                    &lt;url&gt;https://repo.maven.apache.org/maven2/&lt;/url&gt;\n                &lt;/repository&gt;\n                &lt;!-- To use the bleeding edge version of galasa, use the development obr\n                &lt;repository&gt;\n                    &lt;id&gt;galasa.repo&lt;/id&gt;\n                    &lt;url&gt;https://development.galasa.dev/main/maven-repo/obr&lt;/url&gt; \n                &lt;/repository&gt;\n                --&gt;\n            &lt;/repositories&gt;\n            &lt;pluginRepositories&gt;\n                &lt;pluginRepository&gt;\n                    &lt;id&gt;maven.central&lt;/id&gt;\n                    &lt;url&gt;https://repo.maven.apache.org/maven2/&lt;/url&gt;\n                &lt;/pluginRepository&gt;\n                &lt;!-- To use the bleeding edge version of galasa, use the development obr\n                &lt;pluginRepository&gt;\n                    &lt;id&gt;galasa.repo&lt;/id&gt;    \n                    &lt;url&gt;https://development.galasa.dev/main/maven-repo/obr&lt;/url&gt; \n                &lt;/pluginRepository&gt;\n                --&gt;\n             &lt;/pluginRepositories&gt;\n         &lt;/profile&gt;\n     &lt;/profiles&gt;\n&lt;/settings&gt;\n</code></pre> <p>To view the full list of options (flags) that are available, see the galasactl local init command reference.</p>"},{"location":"docs/cli-command-reference/initialising-home-folder/#about-the-properties-files","title":"About the properties files","text":"<p>The following table explains a bit more about the purpose of the properties files that are created in the <code>.galasa</code> folder after running the <code>galasactl local init</code> command: </p> Name Description bootstrap.properties The bootstrap contains the information that Galasa needs to bring up a framework in the environment to connect to the Galasa Ecosystem. If you are running a test on your local machine, the bootstrap file is blank as it does not need to refer to the Ecosystem. cps.properties The configuration property store (CPS) defines object properties, topologies, system configurations, and definitions which instruct the way in which a Galasa test runs. For example, properties for endpoints, ports and timeouts. When running in an Ecosystem, all Galasa tests will use the same CPS configuration, unless any overrides are passed at submission. It is the CPS and the configurational properties that enable tests to run against multiple environments, without changing the code inside the test. You can extract a test property value from the CPS file for use in a test by using the <code>@TestProperty</code> annotation that is provided by the Core Manager. credentials.properties It is likely that a test will need to pass credentials to the application being tested. For example, as HTTP credentials or as username and password values entered onto a 3270 screen. Rather than hard code the credentials inside a test class, you can store the values in the credentials.properties file when the test is run locally. The ability to get credentials from a credentials store means that you do not need to hard code these values inside a test, enabling the test to be run in different environments without changing a single line of code. You can extract credentials to use in your test by using the <code>getCredentials</code> method that is provided by the Core Manager. dss.properties In a local environment, or when running tests locally within a pipeline, the Dynamic Status Store (DSS) is stored in a file. In an Ecosystem, the DSS is hosted on the <code>etcd</code> server. The DSS contains a number of settings, and counters that Managers put there, to indicate what resources are currently in-use so far. If a z/OS machine only has 10 ports configured for example, the counter reaches 10, which will prevent any more tests trying to allocate a port for them to use. There is a danger if tests are stopped, that the proper clean-up is skipped, and the port number doesn't decrease when a test owning that port stops abnormally. Normal operation of an Ecosystem includes a resource monitor which looks for this situation and releases resources that a failed test owns. In a local run that isn't present, so the DSS might not accurately reflect the number of resources that are available. To resolve, if no tests are running, you can clear out the <code>dss.properties</code> files in your pipeline, which steps all the counters down to 0.  Note that if you always clear out the dss file, the <code>run name</code> of tests will always start from the same number, as the <code>latest test number allocated</code> counter is also stored in the DSS. overrides.properties Specifying overrides is useful if you want to run a set of tests against a particular configuration without changing the test code. For example, you might have multiple versions of software that you need to test. How can you do that without changing the test code? The answer is to use override properties. If you are running tests locally, you can set overrides properties by editing your overrides properties file."},{"location":"docs/cli-command-reference/initialising-home-folder/#setting-the-galasa-bootstrap","title":"Setting the Galasa bootstrap","text":"<p>The bootstrap is a simple properties file that contains the information that Galasa needs to bring up a framework to connect to an Ecosystem. If you are running a test remotely in a Galasa Ecosystem, or if you are running a test locally but using a shared configuration that is hosted by the Galasa Ecosystem, the Galasa bootstrap is set to the URL of the Galasa Ecosystem in which you want to run your test or in which the shared configuration is stored. The bootstrap is blank only when a test is run locally, without using shared configuration. For more information about the modes in which you can run a Galasa test, see the Running a Galasa test documentation. </p> <p>If you are planning to only run tests locally, with everything running on the local machine, you do not need to set the Galasa bootstrap. Otherwise, you can set the bootstrap either by using the <code>--bootstrap</code> option on the CLI command or by setting the <code>GALASA_BOOTSTRAP</code> environment variable. If both are provided, the <code>--bootstrap</code> option takes precedence.</p> <p>You can set environment variables on a terminal by using the <code>export</code> (if you are on Mac or Linux) or <code>set</code> (if you are on Windows) command. For example, to set <code>GALASA_BOOTSTRAP</code> to <code>http://galasa-bootstrap.url.com</code>, use the following command:</p> <p>On Mac or Unix:</p> <pre><code>export GALASA_BOOTSTRAP=http://galasa-bootstrap.url.com/bootstrap\n</code></pre> <p>On Windows: </p> <pre><code>set GALASA_BOOTSTRAP=http://galasa-bootstrap.url.com/bootstrap\n</code></pre> <p>where: <code>http://galasa-bootstrap.url.com</code> is the URL of the Galasa Ecosystem in which you want to run your test or in which the shared configuration is stored.</p>"},{"location":"docs/cli-command-reference/initialising-home-folder/#next-steps","title":"Next steps","text":"<p>You can now start creating a project using the CLI to accommodate your Galasa tests in your local storage.</p>"},{"location":"docs/cli-command-reference/installing-cli-tool/","title":"Installing the Galasa CLI online","text":"<p>This section provides details about how to download and install the binary file for the Galasa CLI from the Galasa CLI respository in GitHub to your local machine, and tells you a little bit about getting started with the Galasa CLI commands. </p>"},{"location":"docs/cli-command-reference/installing-cli-tool/#downloading-the-galasa-cli","title":"Downloading the Galasa CLI","text":"<p>The following versions of the Galasa CLI are available to download for different operating systems and machine architectures:</p> Operating system Architecture Download MacOSX x86_64 galasactl-darwin-x86_64 MacOSX arm64 galasactl-darwin-arm64 Linux x86_64 galasactl-linux-x86_64 Linux arm64 arm64 galasactl-linux-arm64 zLinux s390x galasactl-linux-s390x Windows x86_64 galasactl-windows-x86_64.exe"},{"location":"docs/cli-command-reference/installing-cli-tool/#installing-the-galasa-cli","title":"Installing the Galasa CLI","text":"<p>Complete the following steps to install Galasa for using the command line:</p> <p>On Mac:</p> <ol> <li>On a Mac, the <code>homebrew</code> tool can be used to install the <code>galasactl</code> tool. Or you can follow the Unix instructions</li> <li>Connect <code>homebrew</code> to the 'tap' it can use: <code>brew tap galasa-dev/tap</code></li> <li>Then you have a choice. Either install the latest version fo the <code>galasactl</code> tool, or install a specific version.<ol> <li>To install the latest version of <code>galasactl</code>:  <code>brew install --no-quarantine galasactl</code></li> <li>To install a specific version of <code>galasactl</code> (version 0.42.0 for example):  <code>brew install --no-quarantine galasactl@0.42.0</code> Note: You can check to see what versions are available using this: <code>brew tap-info galasa-dev/tap --json</code> and look in the <code>\"cask_tokens\"</code> part of the json file.</li> </ol> </li> </ol> <p>On Mac or Unix:</p> <ol> <li>Find out the architecture of your machine by typing the command <code>uname -m</code> into your terminal.</li> <li>Download the appropriate binary of the Galasa CLI for your machine architecture from the Galasa CLI repository in GitHub and re-name it to <code>galasactl</code>.</li> <li>Add the Galasa CLI to your PATH to enable you to run CLI commands from anywhere on your file system without having to specify the absolute path. To set the path permanently, you need add the Galasa CLI path to your shell's initialization file. For example, if you downloaded the galasactl executable to a folder called <code>~/tools</code> in your home directory, you need to add <code>~/tools</code> to the list of directories that your shell searches through when you enter a command. You can do this by adding the line <code>export PATH=$PATH:$HOME/tools</code> to your shell\u2019s initialization file (for example <code>~/.bashrc</code> or <code>~/.zshrc</code>). </li> <li>Set execute permission on the binary by running the <code>chmod +x galasactl</code> command in the directory containing <code>galasactl</code>.If you are using a Mac, you can set permission to open the Galasa CLI tool by running the <code>xattr -dr com.apple.quarantine galasactl</code> command in the directory containing <code>galasactl</code>. </li> </ol> <p>You can now run the Galasa CLI tool from any directory in your file system without having to specify the absolute path.</p> <p>On Windows (Powershell):</p> <ol> <li>Download the binary and re-name it to <code>galasactl</code>.</li> <li>Add the <code>galasactl</code> executable to your PATH to enable the tool to be called from the command line without having to specify the path to the directory in which it is stored. You can edit the PATH variable in your System environment variables to add the path to the directory in which you downloaded the <code>galasactl</code> executable.</li> <li>Open a command prompt and type <code>start galasactl.exe</code>.</li> </ol> <p>You can now run the Galasa CLI tool from any directory in your file system without having to specify the absolute path.</p>"},{"location":"docs/cli-command-reference/installing-cli-tool/#upgrading-the-galasa-cli-on-mac","title":"Upgrading the Galasa CLI (on Mac)","text":"<p>To update your CLI to the latest version, run the following commands:</p> <pre><code>brew update \nbrew upgrade galasactl\n</code></pre> <p>The <code>brew update</code> command refreshes Homebrew's internal catalog to the latest versions, and <code>brew upgrade galasactl</code> updates the CLI itself.</p>"},{"location":"docs/cli-command-reference/installing-cli-tool/#next-steps","title":"Next steps","text":"<p>Find out more about the Galasa CLI commands by reading the Galasa CLI commands documentation.</p> <p>Move on to the Initialising your local environment documentation to help you to set up some basic file structures and files in your home folder so that you can start using Galasa.</p>"},{"location":"docs/cli-command-reference/installing-offline/","title":"Installing the Galasa CLI offline","text":"<p>The Galasa isolated.zip file is available from the https://resources.galasa.dev/ site and can be downloaded and extracted to a directory of your choice. The zip file contains three directories (galasactl, maven, and javadoc), an <code>isolated.tar</code> file and a <code>docs.jar</code> file. </p> <p>The <code>galasactl</code> directory contains the binaries that are required to run the Galasa command line interface tool (Galasa CLI). The <code>maven</code> directory contains dependencies that are required for building Galasa tests. The <code>javadoc</code> directory contains the Javadoc API documentation for the Galasa Managers.</p> <p>The <code>isolated.tar</code> file is an optional Docker image that hosts all the artifacts. You might want to use the Docker image if you want to host Galasa on an internal server that can be accessed by other users. If you want to host Galasa on your local machine only, you do not need to use the Docker image. </p> <p>The <code>docs.jar</code> file enables you to run the Galasa website locally on your machine or on an internal server. Instructions on how to do this are available in the <code>README.txt</code> that is provided in the Galasa zip file. </p>"},{"location":"docs/cli-command-reference/installing-offline/#getting-started","title":"Getting started","text":"<p>The Galasa plug-in is accompanied by Galasa SimBank - a demonstration application - which sits on top of a very small middleware layer called SimPlatform (you may see its name in some console messages, but you will otherwise not need to interact with SimPlatform).</p> <p>This section describes using the Galasa command line tool (galasactl) to install the Galasa plug-in - together with SimPlatform/SimBank - on your local machine and preparing it to run an initial set of provided tests against a simulated mainframe application.</p>"},{"location":"docs/cli-command-reference/installing-offline/#unpacking-the-zip-file","title":"Unpacking the zip file","text":"<p>Extract the contents of the zip file into a directory of your choice.</p> <p>If you are using the zipped distribution hosted in Docker, ensure that you have the appropriate privileges to run Docker commands on the server on which you are hosting the Galasa artifacts and complete the following steps to load and run the Docker image: </p> <p>Note: The example uses port <code>8080</code> but you can use a different port.</p> <ol> <li> <p>Within the directory that contains the Docker image (<code>isolated.tar</code>), run the following command:</p> <pre><code>docker load -i isolated.tar\n</code></pre> <p>The following confirmation message is received: Loaded image: ghcr.io/galasa-dev/galasa-isolated:main.</p> </li> <li> <p>Run the container by using the following command: </p> <pre><code>docker run -d -p 8080:80 --name galasa ghcr.io/galasa-dev/galasa-isolated:main\n</code></pre> </li> <li> <p>Go to <code>http:\\\\localhost:8080</code> to view the running container. </p> </li> </ol>"},{"location":"docs/cli-command-reference/installing-offline/#configuring-the-galasa-cli-for-offline-use","title":"Configuring the Galasa CLI for offline use","text":"<p>To install Galasa for using in the command-line you first need to select the appropriate binary file for the Galasa CLI from the <code>galasactl</code> directory that is provided in the zip file you downloaded.</p> <p>The following versions of the Galasa CLI are available to download for different operating systems and machine architectures:</p> Operating system Architecture Download MacOSX x86_64 galasactl-darwin-x86_64 MacOSX arm64 galasactl-darwin-arm64 Linux x86_64 galasactl-linux-x86_64 Linux arm64 arm64 galasactl-linux-arm64 zLinux s390x galasactl-linux-s390x Windows x86_64 galasactl-windows-x86_64.exe <p>Complete the following steps to install Galasa for using the command line:</p> <p>On Mac or Unix:</p> <ol> <li> <p>Find out the architecture of your machine by typing the command <code>uname -m</code> into your terminal. You can use the information that is returned to understand which binary of the Galasa CLI you need to use for your particular machine architecture.</p> </li> <li> <p>Open the <code>galasactl</code> directory that is provided in the zip file and re-name the appropriate binary to <code>galasactl</code>. </p> </li> <li> <p>Add the Galasa CLI to your PATH to enable you to run CLI commands from anywhere on your file system without having to specify the absolute path. To set the path permanently, you need add the Galasa CLI path to your shell's initialization file. For example, if you downloaded the <code>galasactl</code> executable to a folder called <code>~/tools</code> in your home directory, you need to add <code>~/tools</code> to the list of directories that your shell searches through when you enter a command. You can do this by adding the line <code>export PATH=$PATH:$HOME/tools</code> to your shell\u2019s initialization file (for example <code>~/.bashrc</code> or <code>~/.zshrc</code>).</p> </li> <li> <p>Set execute permission on the binary by running the <code>chmod +x galasactl</code> command in the directory containing <code>galasactl</code>. If you are using a Mac, you can set permission to open the Galasa CLI tool by running the <code>xattr -dr com.apple.quarantine galasactl</code> command in the directory containing <code>galasactl</code>.</p> </li> </ol> <p>On Windows (Powershell):</p> <ol> <li>Open the <code>galasactl</code> directory that is provided in the zip file and re-name the appropriate to <code>galasactl</code>.</li> <li>Add the <code>galasactl</code> executable to your PATH to enable the tool to be called from the command line without having to specify the path to the directory in which it is stored. You can edit the PATH variable in your System environment variables to add the path to the directory in which you downloaded the <code>galasactl</code> executable.</li> <li>Open a command prompt and type <code>start galasactl.exe</code>.</li> </ol> <p>You can now run the Galasa CLI tool from any directory in your file system without having to specify the absolute path.</p>"},{"location":"docs/cli-command-reference/installing-offline/#next-steps","title":"Next steps","text":"<p>Find out more about the Galasa CLI commands by reading the Galasa CLI commands documentation.</p> <p>Move on to the Initialising your local environment documentation to help you to set up some basic file structures and files in your home folder so that you can start using Galasa.</p>"},{"location":"docs/cli-command-reference/runs-local-debug/","title":"Debugging a test locally","text":"<p>The following section describes how to connect your Galasa test with a Java debugger on a specified port, and then configure your IDE (IDE options covered in this topic are Microsoft VSCode, IntelliJ, and Eclipse) to connect to that same port so that you can run your test locally in debug mode.</p>"},{"location":"docs/cli-command-reference/runs-local-debug/#using-the-debug-option","title":"Using the debug option","text":"<p>You can run a test locally in debug mode by using the galasactl <code>galasactl runs submit local</code> command with the <code>--debug</code> option specified. To run in debug mode, the Galasa test connects with a Java debugger on a specified port and the IDE being used is configured to connect to the same port. The test can then be launched in the Java debugger. </p> <p>The default value of the port is <code>2970</code>, but you can override this value adding an optional property, <code>galasactl.jvm.local.launch.debug.port</code>, into the <code>bootstrap.properties</code> file. For example, <code>galasactl.jvm.local.launch.debug.port=2971</code>. This property is ignored if the <code>--debug</code> option is not supplied to the <code>galasactl runs submit local</code> command.</p> <p>If you need to override the value of the port that is set in the bootstrap, you can do so by using the <code>--debugPort</code> option on the <code>runs submit local</code> command. The port value itself must be an unsigned integer.</p> <p>To launch multiple testcases in debug mode, add an explicit <code>--debugPort</code> option on the <code>galasactl runs submit local</code> command, so that each port is only used by one test/debugger pair at a time.</p> <p>To view the full list of options that are available, see the galasactl runs submit local command reference.</p>"},{"location":"docs/cli-command-reference/runs-local-debug/#connection-modes","title":"Connection modes","text":"<p>The mode that is used to control the connection from the local JVM to the Java debugger can be set to <code>listen</code> or <code>attach</code>. The default value is <code>listen</code>. </p> <p>In <code>listen</code> mode, the JVM that launches the testcase opens a debug port and pauses to listen for traffic on that port, waiting for a Java debugger to connect. In <code>attach</code> mode, the JVM that launches the testcase attaches to the debug port that has already been opened by the Java debugger.</p> <p>You can override the default value of <code>listen</code> by adding the optional property <code>galasactl.jvm.local.launch.debug.mode</code> into the <code>bootstrap.properties</code> file. For example, <code>galasactl.jvm.local.launch.debug.mode=attach</code>.</p> <p>If you need to override the mode that is set in the bootstrap, you can do so by using the <code>--debugMode</code> option on the <code>galasactl runs submit local</code> command. </p>"},{"location":"docs/cli-command-reference/runs-local-debug/#configuring-the-ide","title":"Configuring the IDE","text":"<p>Your IDE typically needs configuring to connect to the same port that the testcase is using. The configuration used depends on the mode that is used to control the connection from the local JVM to the Java debugger. </p> <p>The IDE needs to be configured with the opposite type of connection mode in order to attach the Java debugger to the running Galasa test. For example, if your galasactl is configured to <code>listen</code> mode, then start the test first, and configure your IDE to attach to the same port. If your galasactl is configured to <code>attach</code> mode, then start your Java debugger first, so that it is there waiting for the testcase to attach to the debug port when the testcase is launched.</p> <p>Information on how to configure different IDEs to connect to a local testcase in debug mode, can be found in the following sections. The examples that are used in the sections assume that the connection mode for the IDE is <code>attach</code> and the connection mode for galasactl is <code>listen</code>. If your settings are the other way around, launch the IDE first, and then launch the Galasa test.</p> <ul> <li>Microsoft VSCode</li> <li>IntelliJ</li> <li>Eclipse</li> </ul>"},{"location":"docs/cli-command-reference/runs-local-debug/#debugging-a-local-galasa-test-within-microsoft-vscode","title":"Debugging a local Galasa test within Microsoft VSCode","text":"<p>Complete the following steps to run a local test in debug mode using VSCode:</p>"},{"location":"docs/cli-command-reference/runs-local-debug/#prepare-to-launch-the-java-debugger","title":"Prepare to launch the Java debugger","text":"<ol> <li>Install the Microsoft Debugger for Java plugin. </li> <li>Add the following text to your ${workspace}/.vscode/. You can add the text manually, or by selecting Run and Debug from the side menu in Visual Studio Code and choosing create a launch.json file. <pre><code>{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"type\": \"java\",\n            \"name\": \"Debug (Attach to Galasa test on 2970)\",\n            \"projectName\": \"banking\",\n            \"request\": \"attach\",\n            \"hostName\": \"localhost\",\n            \"port\": 2970\n        }\n    ]\n}\n</code></pre></li> <li>Check that the port number specified, so that when you configure the IDE the port used by the IDE matches the port number that is used by the testcase. In this example, <code>port</code> is set to <code>2970</code>, which is the default value.</li> <li>Check the value of the <code>request</code> field. The request field with a value of <code>attach</code> can be paired with the default of <code>listen</code> that is used by the <code>galasactl runs submit local --debug</code> command. Each tool must be configured with the opposite value, so one listens to the port, and the other attaches to it.</li> <li>Make a note of the <code>name</code> that is specified so that you select this configuration to launch the test in the Java debugger. </li> </ol>"},{"location":"docs/cli-command-reference/runs-local-debug/#launch-a-galasa-test-in-the-java-debugger","title":"Launch a Galasa test in the Java debugger","text":"<ol> <li>Load the test code source into the VSCode workspace and set a breakpoint within the test code that you want to debug.</li> <li>Launch the Galasa test by running the following command. The Galasa test waits for the debugger to connect to the port that it is listening on. <pre><code>galasactl runs submit local --debug\n</code></pre></li> <li>Launch the debugger within the IDE by selectin Run and Debug from the side menu provided by the Java Debugging plugin.</li> <li>From the drop down menu, select the launch configuration that matches the launch configuration of the <code>galasactl</code> tool. In this example, the configuration is called <code>Debug (Attach to Galasa test on 2970)</code>.</li> <li>Click the <code>Run</code> symbol. The JVM resumes execution, and runs up to the point where your breakpoint is set, and then stops.</li> <li>Check the IDE to see the variables in use, and the line of code where execution has reached. You can then control the execution of the testcase by using the IDE-provided debugger controls. </li> </ol>"},{"location":"docs/cli-command-reference/runs-local-debug/#debugging-a-local-galasa-test-within-intellij","title":"Debugging a local Galasa test within IntelliJ","text":"<p>Complete the following steps to run a local test in debug mode using IntelliJ:</p> <ol> <li>Load the testcase code into your IntelliJ workspace and set a breakpoint within the test code that you want to debug.</li> <li>Launch the Galasa test by running the following command. The Galasa test waits for the debugger to connect to the port that it is listening on. <pre><code>galasactl runs submit local --debug\n</code></pre></li> <li>Launch the debugger. </li> <li>From the top menu, select Run and use the attach to process item. A dialog appears, asking you to select from the Java processes which are currently waiting. </li> <li>Select your process based on the name of the testcase that you are trying to debug. In this example, the name is <code>Debug (Attach to Galasa test on 2970)</code>. Once selected, the dialog disappears and IntelliJ launches your debugger at the breakpoint that you set.</li> </ol> <p>To use the configuration where the IntelliJ debugger listens on the debug port, and the testcase connects to it, use the <code>--debugPort</code> and <code>--debugMode</code> options to pair up with an IntelliJ debug configuration. Remember that the <code>--debugMode</code> must be the opposite to the <code>Debugger Mode</code> within IntelliJ. For example, if the galasactl tool is using a <code>listen</code> mode, then the debugger has to <code>attach</code> to the port, and vice versa.</p>"},{"location":"docs/cli-command-reference/runs-local-debug/#debugging-a-local-galasa-test-within-eclipse","title":"Debugging a local Galasa test within Eclipse","text":"<p>Complete the following steps to run a local test in debug mode using Eclipse:</p> <ol> <li>Import the testcase projects into your workspace and set a breakpoint within your test code that you want to debug.</li> <li>Launch the Galasa test by using the following command. The JVM running the Galasa test launches, and pauses, listening on a port.  <pre><code>galasactl runs submit local --debug\n</code></pre></li> <li>Create a debug configuration of the type Remote Java Application.</li> <li>Set the port number field to correspond to the port that your testcase is configured to use. In this example, the port is <code>2970</code>.</li> <li>Set the connection type field to be the opposite of what your testcase JVM is configured to use. By default, galasactl assumes a <code>listen</code> mode, so in that case the connection type field should be set to <code>attach</code>.</li> <li>Save the debug configuration.</li> <li>Launch the debug configuration. The debugger connects to the JVM running your Galasa testcase and starts a debugging session from the initial start point of the breakpoint that you set.</li> </ol>"},{"location":"docs/cli-command-reference/runs-local-debug/#next-steps","title":"Next steps","text":"<p>Read the Viewing test results locally documentation to learn how to view the output of your test runs in your local environment. </p> <p>Take a look at the Exploring Galasa SimBank documentation. Galasa SimBank is a component that is distributed with Galasa. SimBank simulates a mainframe application and is designed to help you to learn Galasa's basic principles of operation before you start connecting Galasa to your own mainframe application-under-test.</p>"},{"location":"docs/cli-command-reference/runs-submit-local/","title":"Running tests locally using the command line","text":"<p>The <code>galasactl runs submit local</code> command submits tests to run within the local JVM, rather than dynamically deploying the tests to a remotely deployed Galasa Ecosystem. </p> <p>You can submit a Java test and a Gherkin test by using the command but must to specify different flags on the command line for each test type. Read on to find out more about how to submit each type of test on your local machine.</p> <p>Running tests locally should only be used during test development to verify that the test is behaving as expected.  Local runs do not benefit from the features that are provided when running tests within a Galasa Ecosystem. For example, resources are not cleaned-up in the event of a failure and scaling capabilities are limited by workstation resources. </p>"},{"location":"docs/cli-command-reference/runs-submit-local/#working-with-the-runs-submit-local-command","title":"Working with the <code>runs submit local</code> command","text":"<p>To use the <code>galasactl runs submit local</code> command, the <code>JAVA_HOME</code> environment variable must be set to reference the JVM in which you want the test to run, as described in the CLI prerequisites online and CLI prerequisites offline documentation. This is because the local java run-time environment is used to launch the test locally. To check that <code>JAVA_HOME</code> is set correctly, the tool checks that <code>$JAVA_HOME/bin/java</code> exists in Unix or Mac, and <code>%JAVA_HOME%\\bin\\java.exe</code> exists on Windows.</p> <p>The level of Java must match the supported level of the Galasa version that is being launched. Use the <code>galasactl --version</code> command to find the galasactl tool version. We currently support Java version 11 to version 17 JDK. Note: We do not currently support Java 21 or later.</p> <p>To view the full list of options that are available, see the galasactl runs submit local command reference.</p>"},{"location":"docs/cli-command-reference/runs-submit-local/#running-a-java-test-with-the-runs-submit-local-command","title":"Running a Java test with the <code>runs submit local</code> command","text":"<p>Use the following command to run a Java test in the local JVM.</p> <p>On Mac or Unix:</p> <pre><code>galasactl runs submit local --log - \\\n--obr mvn:dev.galasa.example.banking/dev.galasa.example.banking.obr/0.0.1-SNAPSHOT/obr \\\n--class dev.galasa.example.banking.account/dev.galasa.example.banking.account.TestAccount\n</code></pre> <p>On Windows (Powershell):</p> <pre><code>galasactl runs submit local --log - `\n--obr mvn:dev.galasa.example.banking/dev.galasa.example.banking.obr/0.0.1-SNAPSHOT/obr `\n--class dev.galasa.example.banking.account/dev.galasa.example.banking.account.TestAccount\n</code></pre> <p>where:</p> <ul> <li><code>--log</code> specifies that debugging information is directed somewhere, and the <code>-</code> means that it is sent to the console (stderr).</li> <li><code>--obr</code> specifies where the  CLI tool can find an OBR which refers to the bundle where the tests are stored. When running locally, all tests must exist in the OBR (or OBRs) that are passed to the tool. The <code>--obr</code> parameter specifies the Maven co-ordinates of the obr jar file, in the format <code>mvn:groupId/artifactId/version/classifier</code>.</li> <li><code>--class</code> specifies which test class to run. The string is in the format of <code>&lt;osgi-bundle-id&gt;/&lt;fully-qualified-java-class&gt;</code>. All test methods within the class are run. Use multiple flags to test multiple classes.</li> </ul>"},{"location":"docs/cli-command-reference/runs-submit-local/#running-a-gherkin-test-with-the-runs-submit-local-command","title":"Running a Gherkin test with the <code>runs submit local</code> command","text":"<p>Use the following command to run a Gherkin test in the local JVM. Note that the <code>--gherkin</code> flag is specified and that the <code>--obr</code> or <code>--class</code> flags are not required. </p> <p>On Mac or Unix:</p> <pre><code>galasactl runs submit local --log - \\\n--gherkin file:///path/to/gherkin/file.feature\n</code></pre> <p>On Windows (Powershell):</p> <pre><code>galasactl runs submit local --log - `   \n--gherkin file:///path/to/gherkin/file.feature\n</code></pre> <p>where:</p> <ul> <li><code>--log</code> specifies that debugging information is directed somewhere, and the <code>-</code> means that it is sent to the console (stderr).</li> <li><code>--gherkin</code> specifies the path where the  CLI tool can find the Gherkin file containing the Gherkin tests. The path must be specified in a URL form, ending in a <code>.feature</code> extension. For example,<code>file:///Users/myuserid/gherkin/MyGherkinFile.feature</code> or <code>file:///C:/Users/myuserid/gherkin/MyGherkinFile.feature</code>.</li> </ul> <p>For more information about the Gherkin support currently available, see the Galasa CLI Gherkin documentation.</p>"},{"location":"docs/cli-command-reference/runs-submit-local/#overriding-the-path-to-the-default-local-maven-repository","title":"Overriding the path to the default local Maven repository","text":"<p>In order to run, tests require compiled artifacts to be hosted in a Maven repository. The artifacts must be bundled as an OSGI bundle. When you build a Galasa project locally, the built artifacts are placed by default in the <code>~/.m2/</code> repository in your home directory; the default location of the local Maven repository.  </p> <p>If you want to use a non-standard location for your local Maven repository when running a test locally, rather than the default <code>~/.m2/</code> repository, you can specify the path to your non-standard local Maven repository folder when launching a test by setting the  <code>--localMaven</code> flag on the <code>galasactl runs submit local</code> command. The <code>--localMaven</code> parameter tells the CLI tool where Galasa bundles can be loaded from on your local file system. The parameter value must be given in a URL form, for example, <code>file:///Users/myuserid/mylocalrepository</code> or <code>file:///C:/Users/myuserid/mylocalrepository</code>.</p> <p>Note: the repository that is referenced by the <code>--localMaven</code> flag must contain the test, Manager, and Galasa framework OBRs (OSGi Bundle Repositories) that the test needs in order to run. Galasa uses OBRs to locate tests in the specified Maven repository, along with all of the Managers that the test requires.</p>"},{"location":"docs/cli-command-reference/runs-submit-local/#stopping-a-running-test","title":"Stopping a running test","text":"<p>Use <code>Ctrl-C</code> to stop the Galasa CLI, ending all test activity. Note that this might leave the system under test with resources that are not cleaned-up.</p>"},{"location":"docs/cli-command-reference/runs-submit-local/#troubleshooting","title":"Troubleshooting","text":"<p>If you have problems running the command, check that you have installed the correct version of Java installed and that you have set your JAVA_HOME environment variable, as described in the CLI prerequisites and CLI prerequisites offline documentation. Make sure you have added the Galasa CLI to your PATH and that you have initialised your local environment by running the <code>galasactl local init</code> command. Ensure that you have created and built the example project, as described in the Creating a Galasa project documentation. </p>"},{"location":"docs/cli-command-reference/runs-submit-local/#next-steps","title":"Next steps","text":"<p>Once you have run a test, read the Debugging a test locally documentation to find out how to connect your Galasa test with a Java debugger on a specified port, and configure your IDE to connect to that same port so that you can run your test locally in debug mode. </p>"},{"location":"docs/cli-command-reference/setting-up-galasa-project/","title":"Creating a Galasa project using the command line","text":"<p>You can quickly and easily create a project structure to accommodate your own independent Galasa tests in your local storage by using the Galasa command line interface (Galasa CLI) that is provided with Galasa. </p> <p>Use the following information to discover more about the structure of a Galasa project, learn how to create and build your own example project, and understand the purpose of the artifacts that are generated. </p> <p>Once you have created and built your Galasa tests, you can run the tests in your local environment. You can run Galasa tests that are written in Java and Galasa tests that are written in Gherkin in your local environment. Find out more in the Running a test locally topic. </p>"},{"location":"docs/cli-command-reference/setting-up-galasa-project/#getting-started","title":"Getting started","text":"<p>An easy way to get started with creating and building Galasa tests is by using the <code>galasactl project create</code> command. Passing parameters to the command, enable you to build your project using either Maven or Gradle, and allow you to choose your own artifact names and naming conventions for your tests. </p> <p>Maven and Gradle are both build tools, which read metadata from files which guide how the code within a module should be built. Maven and Gradle use different formats for these build files. Artifacts are created on disk and can later be built, tested and deployed to a Maven repository and used in the Galasa Ecosystem. Generated artifacts can be embellished and refactored to form the basis of future Galasa tests.</p> <p>The <code>galasactl project create</code> command uses the <code>--maven</code> and <code>--gradle</code> parameters to allow you to decide which type of build system to use when you create a project. You must specify either the <code>--maven</code> flag or the <code>--gradle</code> flag when you run the <code>galasactl project create</code> command. You can specify both flags to tell the tool to generate Maven build artifacts (pom.xml files) and Gradle files.</p> <p>The example provided in this topic creates a project containing both Maven and Gradle build infrastructure files by specifying the <code>--maven</code> and <code>--gradle</code> parameters in the command.  </p>"},{"location":"docs/cli-command-reference/setting-up-galasa-project/#a-bit-about-maven","title":"A bit about Maven","text":"<p>Maven is opinionated, which means that you need to comply with its expectations about how a project and its directories should be organised. When you create a Maven project, you should use the generated structure.</p> <p>The most visible practical evidence that a project is a Maven project is its pervasive use of <code>pom.xml</code> (Project Object Model) files. These XML files contain the magic that allows Maven to manage your project dependencies and build orchestration. </p>"},{"location":"docs/cli-command-reference/setting-up-galasa-project/#a-bit-about-gradle","title":"A bit about Gradle","text":"<p>The Gradle project structure looks somewhat different to the Maven structure because Gradle projects use <code>build.gradle</code>, <code>bnd.bnd</code> and <code>settings.gradle</code> files rather than <code>pom.xml</code> files. </p> <p>The <code>build.gradle</code> files declare any dependencies that the test code has, and specify the Maven co-ordinates to use when publishing to a Maven repository.  The <code>bnd.bnd</code> files define the OSGi Bundles for the test projects and any Managers in the project and the <code>settings.gradle</code> file tells Gradle where to look for the dependencies and plug-ins that are required to build the project. </p>"},{"location":"docs/cli-command-reference/setting-up-galasa-project/#project-structure","title":"Project Structure","text":"<p>A full (parent) Galasa project includes several sub-projects, which can also be known as modules, some of which are mandatory and some optional. A parent project can contain the following sub-projects:</p> <ul> <li> <p>A Managers sub-project, allowing you to extend the provided range of Managers. In practice, if you have no intention of writing a Manager, you can omit this.</p> </li> <li> <p>An OBR (OSGi Bundle Repository) sub-project, which is mandatory. Galasa uses the OBR to locate your test project(s) and reason about their interdependencies.</p> </li> <li> <p>One or more test sub-projects, that as the name implies, contain the tests themselves. </p> </li> </ul> <p>The parent project establishes all the dependencies for the sub-projects or modules. It builds all the modules in the order of the dependencies \u2013 it builds the Manager module before the test projects that use it.</p> <p>For simplicity, it is assumed that you will only have one version of a test in production at any one time. However, by establishing different versions of your tests, you can have test streams with different versions of the same test project. For the purposes of the forthcoming example, the version of all projects is set to <code>0.1.0-SNAPSHOT</code>. </p>"},{"location":"docs/cli-command-reference/setting-up-galasa-project/#creating-an-example-project","title":"Creating an example project","text":"<p>In the following example we are going to use the Galasa CLI to build a hierarchy of projects, where the parent project dev.galasa.example.banking contains the following modules:</p> <ul> <li> <p>Two test sub-projects or modules called dev.galasa.example.banking.payee and dev.galasa.example.banking.account</p> </li> <li> <p>A mandatory OBR sub-project called dev.galasa.example.banking.obr.</p> </li> </ul> <p>This setup is designed as an example of how to create a project structure that might ultimately be deployed to a Maven repository, so that your Galasa automation system can find everything it needs to run.</p> <p>The following syntax examples assume a banking application is being tested. The banking application contains functionality that deals with <code>payee</code> and <code>account</code> object types, both of which can be manipulated.</p> <p>On Mac or Unix:</p> <pre><code>galasactl project create \\\n        --package dev.galasa.example.banking \\\n        --features payee,account \\\n        --force \\\n        --obr \\\n        --log - \\\n        --maven \\\n        --gradle\n</code></pre> <p>On Windows (Powershell):</p> <pre><code>galasactl project create `\n        --package dev.galasa.example.banking `\n        --features payee,account `\n        --force `\n        --obr `\n        --log - `\n        --maven `\n        --gradle\n</code></pre> <p>where:</p> <ul> <li> <p><code>--package</code> is the name of a Java package. This parameter is mandatory. Use the provided example to help you to understand how you might create unique names for your Java test packages. Sections can reflect your company, organisation, the application under test, or any other name-spacing of your choice. The value chosen influences the names of the folders, OSGi bundles, Maven coordinates, and the eventual Java package name in which example tests are created. The name must be all lower-case letters and numbers (<code>a-z</code>, <code>0-9</code>), with <code>.</code> (period) character separators. No part of the name can clash with a Java language reserved word.</p> </li> <li> <p><code>--features</code> is a comma-separated list of one or more features of the application that you want to test. This parameter is optional, defaulting to <code>test</code>. The entries in this list influence the names of some folders, OSGi bundles, Maven coordinates and Java class names of the generated example tests. In the example provided, the banking application under test has a <code>payee</code> section and an <code>account</code> section which need testing. Creating subcomponents of your test suite to test these features or components of the application creates a naming structure in which your tests can be organised. These names must be lower-case letters and numbers (<code>a-z</code>, <code>0-9</code>), with no <code>.</code> (period) or special characters. No part of the name can clash with a Java language reserved word.</p> </li> <li> <p><code>--force</code> is an optional flag. If the flag is missing, then any file that the Galasa CLI tool tries to create which already exists causes a failure, and the original file is preserved. If this flag is used, then such files are silently over-written. Use this option carefully to avoid some of your files being over-written, resulting in the loss of some of your data.</p> </li> <li> <p><code>--obr</code> Creates an OBR project. An OBR (OSGi Bundle Repository) is an index of OSGi bundles. Galasa testcases are built into OSGi bundles which are then connected into an OBR. When you specify the location of the OBR to Galasa, the OBR tells Galasa where the tests are stored. You can create an OBR from scratch, or you can create projects and add them into an existing OBR. For more information about OBRs, see the Apache Felix website.</p> </li> <li> <p><code>--log -</code> sends the trace and logging output that is generated by the tool to the console.</p> </li> <li> <p><code>--maven</code> creates a project with a Maven project structure.</p> </li> <li> <p><code>--gradle</code> creates a project with a Gradle project structure.</p> </li> </ul>"},{"location":"docs/cli-command-reference/setting-up-galasa-project/#building-the-example-project","title":"Building the example project","text":"<p>Run the following command to navigate to the parent folder (in this example the dev.galasa.example.banking directory):</p> <pre><code>cd dev.galasa.example.banking\n</code></pre> <p>If you are building the project using Maven, use the following command:</p> <pre><code>mvn clean install\n</code></pre> <p>To build the project with Gradle, use the following command:</p> <pre><code>gradle clean build publishToMavenLocal\n</code></pre> <p>The built artifacts are typically placed in the <code>~/.m2/repository</code> in your home directory.</p>"},{"location":"docs/cli-command-reference/setting-up-galasa-project/#understanding-the-generated-artifacts","title":"Understanding the generated artifacts","text":"<p>Running the example Galasa CLI <code>project create</code> command with the <code>--maven</code> flag specified creates a number of files in the following standard folder structure:</p> <pre><code>.\n\u2514\u2500\u2500 dev.galasa.example.banking\n    \u251c\u2500\u2500 dev.galasa.example.banking.account\n    \u2502   \u251c\u2500\u2500 bnd.bnd\n    \u2502   \u251c\u2500\u2500 build.gradle\n    \u2502   \u251c\u2500\u2500 pom.xml\n    \u2502   \u2514\u2500\u2500 src\n    \u2502       \u2514\u2500\u2500 main\n    \u2502           \u251c\u2500\u2500 java\n    \u2502           \u2502   \u2514\u2500\u2500 dev\n    \u2502           \u2502       \u2514\u2500\u2500 galasa\n    \u2502           \u2502           \u2514\u2500\u2500 example\n    \u2502           \u2502               \u2514\u2500\u2500 banking\n    \u2502           \u2502                   \u2514\u2500\u2500 account\n    \u2502           \u2502                       \u251c\u2500\u2500 TestAccount.java\n    \u2502           \u2502                       \u2514\u2500\u2500 TestAccountExtended.java\n    \u2502           \u2514\u2500\u2500 resources\n    \u2502               \u2514\u2500\u2500 textfiles\n    \u2502                   \u2514\u2500\u2500 sampleText.txt\n    \u251c\u2500\u2500 dev.galasa.example.banking.obr\n    \u2502   \u251c\u2500\u2500 build.gradle\n    \u2502   \u2514\u2500\u2500 pom.xml\n    \u251c\u2500\u2500 dev.galasa.example.banking.payee\n    \u2502   \u251c\u2500\u2500 bnd.bnd\n    \u2502   \u251c\u2500\u2500 build.gradle\n    \u2502   \u251c\u2500\u2500 pom.xml\n    \u2502   \u2514\u2500\u2500 src\n    \u2502       \u2514\u2500\u2500 main\n    \u2502           \u251c\u2500\u2500 java\n    \u2502           \u2502   \u2514\u2500\u2500 dev\n    \u2502           \u2502       \u2514\u2500\u2500 galasa\n    \u2502           \u2502           \u2514\u2500\u2500 example\n    \u2502           \u2502               \u2514\u2500\u2500 banking\n    \u2502           \u2502                   \u2514\u2500\u2500 payee\n    \u2502           \u2502                       \u251c\u2500\u2500 TestPayee.java\n    \u2502           \u2502                       \u2514\u2500\u2500 TestPayeeExtended.java\n    \u2502           \u2514\u2500\u2500 resources\n    \u2502               \u2514\u2500\u2500 textfiles\n    \u2502                   \u2514\u2500\u2500 sampleText.txt\n    \u251c\u2500\u2500 pom.xml\n    \u2514\u2500\u2500 settings.gradle\n</code></pre>"},{"location":"docs/cli-command-reference/setting-up-galasa-project/#more-about-the-parent-project","title":"More about the parent project","text":"<p>The top level folder, which is called <code>dev.galasa.example.banking</code> in this example, is the parent project. The parent project is a convenient container in which to hold all of the generated files. In Maven the <code>pom.xml</code> in the parent project is used to build all the other generated files. In Gradle, the <code>settings.gradle</code> file is used.</p> <p>Within the example parent project structure there are three generated OSGi bundle sub-projects:</p> <ul> <li> <p>The payee bundle project, dev.galasa.example.banking.payee, which contains two Galasa tests - TestPayee.java and TestPayeeExtended.java</p> </li> <li> <p>both of which relate to testing the <code>payee</code> feature.</p> </li> <li> <p>The account test bundle project, dev.galasa.example.banking.account, which contains two Galasa tests - TestAccount.java and TestAccountExtended.java - both of which relate to testing the <code>account</code> feature.</p> </li> <li> <p>An OSGi Bundle Repository (OBR) which holds metadata listing the tests that are available in the Galasa test projects.</p> </li> </ul>"},{"location":"docs/cli-command-reference/setting-up-galasa-project/#more-about-the-test-projects","title":"More about the test projects","text":"<p>Within each of the Galasa test projects  - <code>payee</code> and <code>account</code> - you can see the following files and folders:</p> <ul> <li> <p>A pom.xml file (for use by the Maven build tool)</p> </li> <li> <p>A build.gradle file (for use by the Gradle build tool)</p> </li> <li> <p>A bnd.bnd file (for use by the Gradle build tool)</p> </li> <li> <p>A <code>src</code> tree holding source code</p> </li> <li> <p>Two java files in each <code>feature</code> test project</p> </li> <li> <p>A text resource file in each <code>feature</code> test project, which is read and used by the tests at run-time.</p> </li> </ul>"},{"location":"docs/cli-command-reference/setting-up-galasa-project/#about-the-tests","title":"About the tests","text":"<p>The TestAccount.java and the TestPayee.java source files show how a Core Manager can be injected into your test class before any test methods being used. </p> <p>The TestAccountExtended.java and the TestPayeeExtended.java source files show:</p> <ul> <li> <p>How to obtain the <code>run-id</code> identifier by which an instance of running the test can be known. This can be useful for naming artifacts, logging or otherwise.</p> </li> <li> <p>How to read a text file resource which is embedded within the test OSGi bundle. This can be useful for getting data files for use in the testing of the application.</p> </li> <li> <p>How logging can be performed to help debug issues in the test code itself.</p> </li> <li> <p>How a file that is created by the test run can be captured together with other test results for later viewing.</p> </li> </ul>"},{"location":"docs/cli-command-reference/setting-up-galasa-project/#additional-notes-on-the-key-elements-of-pomxml-files","title":"Additional notes on the key elements of pom.xml files","text":"<p>The following sections provide a little more information about some of the elements that are found within the various pom.xml files.</p>"},{"location":"docs/cli-command-reference/setting-up-galasa-project/#the-parent-pomxml-file-elements","title":"The parent pom.xml file elements","text":"<ul> <li>The <code>&lt;project&gt;</code> and <code>&lt;modelVersion&gt;</code> elements are standard prologues to a <code>pom.xml</code> file.</li> </ul> <p>The following extract from the generated parent pom.xml shows some of the key elements that are described:</p> <pre><code>&lt;groupId&gt;dev.galasa.example.banking&lt;/groupId&gt;\n&lt;artifactId&gt;dev.galasa.example.banking&lt;/artifactId&gt;\n&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;   \n&lt;packaging&gt;pom&lt;/packaging&gt;\n</code></pre> <ul> <li> <p>The <code>&lt;groupId&gt;</code> is used to group related Maven projects in a Maven repository. It is recommended (but not enforced) that all projects in a test stream share the same <code>groupId</code>.</p> </li> <li> <p>The <code>&lt;artifactId&gt;</code> must be unique for each Maven project under a <code>groupId</code>. To prevent confusion, you could make it unique across <code>groupId</code>s. The <code>groupId</code> and <code>artifactId</code> can nominally be anything you choose, but if you were to ever consider publishing the project on Maven Central, you would have to ensure that they were unique across Maven Central. Because of this, and to avoid future name collisions, it is conventional to use (reversed) company domain names, which leads to patterns like <code>dev.galasa.example.banking</code>.</p> </li> <li> <p>The <code>&lt;version&gt;</code> in this project is set to <code>0.1.0-SNAPSHOT</code>.</p> </li> <li> <p><code>&lt;packaging&gt;</code> indicates what type of Maven project this is - in this case, a <code>pom</code> project.</p> </li> </ul> <p>The following extract from the parent pom.xml shows the module elements that are contained within the generated parent pom.xml:</p> <pre><code>&lt;modules&gt;\n    &lt;module&gt;dev.galasa.example.banking.payee&lt;/module&gt;\n    &lt;module&gt;dev.galasa.example.banking.account&lt;/module&gt;\n    &lt;module&gt;dev.galasa.example.banking.obr&lt;/module&gt;\n&lt;/modules&gt;\n</code></pre> <ul> <li><code>&lt;modules&gt;</code> details what sub-modules (sub-projects) are contained within this parent project. Usually, when the parent project is built, so are the sub-modules.</li> </ul> <p>Other elements that are contained within the generated parent pom.xml are listed in the following section: </p> <ul> <li> <p><code>&lt;distributionManagement&gt;</code> controls where Maven deploys the project when built. A variable is used so that the same project can be built and deployed to different test stream repositories.</p> </li> <li> <p>The <code>&lt;properties&gt;</code> element specifies properties such as file encoding and Java version numbers.</p> </li> <li> <p><code>&lt;dependencyManagement&gt;</code> establishes the versions of dependencies in all of the sub-modules. A BOM project is provided by the Galasa team that includes the versions of all of the released Managers. Set the version of Galasa you wish to run against, for example 0.20.0, and all the Manager versions are imported.</p> </li> <li> <p><code>&lt;dependencies&gt;</code> list all the Managers you wish to make available for your tests and custom Manager if present. You could include <code>&lt;dependencies&gt;</code> in each of the sub-modules, but it is easier to maintain the list here.</p> </li> <li> <p><code>&lt;plugins&gt;</code> identify the Maven plugins to be used during the build process. The <code>maven-bundle-plugin</code> builds OSGi bundles (the Manager and test projects), indicated by <code>&lt;packaging&gt;bundle&lt;/packaging&gt;</code>. The <code>galasa-maven-plugin</code> is used in two ways - to build a test catalog for each bundle project and to build the <code>&lt;packaging&gt;galasa-obr&lt;/packaging&gt;</code> project.</p> </li> </ul>"},{"location":"docs/cli-command-reference/setting-up-galasa-project/#the-test-project-pomxml-file-elements","title":"The test project pom.xml file elements","text":"<ul> <li> <p>The <code>&lt;parent&gt;</code> element signifies that all the properties and dependencies found in the parent pom.xml file are to be used for this project - avoiding duplication and allowing changes to ripple through all sub-projects.</p> </li> <li> <p>The <code>&lt;packaging&gt;</code> element is set to <code>bundle</code> so an OSGi bundle is built instead of a simple JAR.</p> </li> </ul>"},{"location":"docs/cli-command-reference/setting-up-galasa-project/#the-test-pomxml-file-elements","title":"The test pom.xml file elements","text":"<ul> <li>The <code>&lt;packaging&gt;</code> element is set to <code>galasa-obr</code> which causes the Galasa Maven plugin to build this project.</li> </ul>"},{"location":"docs/cli-command-reference/setting-up-galasa-project/#importing-the-example-test-project-into-eclipse","title":"Importing the example test project into Eclipse","text":"<p>If you want to edit source code using an IDE, you might want to import the projects into your IDE workspace. </p> <p>The following steps show you how to import an example test project built using Maven into Eclipse:</p> <ol> <li>Launch Eclipse and choose File &gt; Import...</li> <li>In the Select dialog, expand Maven, choose Existing Maven Projects and click Next.</li> <li>Navigate to your root project directory - dev.galasa.example.banking in this case - and follow the remaining prompts to complete the import. If you see a warning or error dialog, opt to resolve the error later.</li> <li>View your set of projects in Package Explorer.</li> </ol> <p>Complete the following steps to import an example test project built using Gradle into Eclipse:</p> <ol> <li>Launch Eclipse and choose File &gt; Import...</li> <li>In the Select dialog, expand Gradle, choose Existing Gradle Projects and click Next.</li> <li>Navigate to your root project directory - dev.galasa.example.banking in this case - and follow the remaining prompts to complete the import. If you see a warning or error dialog, opt to resolve the error later.</li> <li>View your set of projects in Package Explorer.</li> </ol>"},{"location":"docs/cli-command-reference/viewing-test-results-cli/","title":"Viewing test results locally","text":"<p>Test results from local test runs are stored in the result archive store (RAS) on the machine where the tests were run. The RAS directory contains all elements of a test, including the test results, run logs, and test artifacts. Inside the RAS directory you can find the <code>run.log</code> which stores event records from a test run on your local machine. You can also view the <code>images</code> folder in the <code>zos3270</code> directory to see the terminal interactions from a test run. </p>"},{"location":"docs/cli-command-reference/viewing-test-results-cli/#viewing-results-in-the-run-log","title":"Viewing results in the run log","text":"<p>You can view the results of your test runs in the <code>run.log</code> file by completing the following steps:</p> <ol> <li>Navigate to your <code>.galasa</code> directory </li> <li>Open the run.log file by selecting ras &gt; results &gt; run.log</li> <li>Expand the run.log file to view a record of the events from the test run.</li> </ol>"},{"location":"docs/cli-command-reference/viewing-test-results-cli/#viewing-3270-terminal-interactions","title":"Viewing 3270 terminal interactions","text":"<p>To view 3270 terminal screens and recorded web requests and responses that are generated from running tests you need to first update the <code>3270.terminal.output</code> property in the <code>cps.properties</code> file on your local machine. To do this, complete the following steps: </p> <ol> <li>Navigate to your <code>.galasa</code> directory </li> <li>Open the cps.properties file, for example in VS Code.</li> <li>Edit the zos3270.terminal.output property to include <code>.png</code> files as well as <code>json</code> by adding the value <code>png</code> to the property. For example, <code>zos3270.terminal.output=json,png</code>.</li> </ol> <p>3270 terminal screens, and recorded web requests and responses for test runs are now stored as .png files in the ras &gt; results &gt; artifacts &gt; zos3270 &gt; images folder.</p> <p>You can then view the terminal interactions from your test runs in the <code>images</code> folder in the <code>zos3270</code> directory by completing the following steps:</p> <ol> <li>Navigate to your <code>.galasa</code> directory </li> <li>Open the images folder by selecting ras &gt; results &gt; artifacts &gt; zos3270 &gt; images</li> <li>Expand the images folder to view test artifacts stored from the run, for example, terminal screens, and recorded web requests and responses.</li> </ol>"},{"location":"docs/cli-command-reference/viewing-test-results-cli/#next-steps","title":"Next steps","text":"<p>Take a look at the Exploring Galasa SimBank documentation. Galasa SimBank is a component that is distributed with Galasa. SimBank simulates a mainframe application and is designed to help you to learn Galasa's basic principles of operation before you start connecting Galasa to your own mainframe application-under-test.</p>"},{"location":"docs/cli-command-reference/zipped-prerequisites/","title":"CLI prerequisites offline","text":"<p>The following section explains more about the software prerequisites that you need to install so that you are ready to install the zipped distribution for Galasa for running offline.</p>"},{"location":"docs/cli-command-reference/zipped-prerequisites/#java-jdk","title":"Java JDK","text":"<p>Required. Galasa tests and Managers are written in Java - you need to install a Java version 11 JDK or later to use it. Note: We do not currently support Java 21 or later. After installing, you must set the <code>JAVA_HOME</code> environment variable to your Java JDK installation path and check it set successfully by running the command <code>echo $JAVA_HOME</code> on Mac or Unix, or <code>echo %JAVA_HOME%</code> on Windows (PowerShell). The returned result shows the path to your JDK installation.</p>"},{"location":"docs/cli-command-reference/zipped-prerequisites/#gradle","title":"Gradle","text":"<p>Required to install the offline zipped distribution. You can also build Galasa projects using Gradle. (You can build projects using Maven if you prefer). Galasa projects are hierarchical file structures that provide the ability to store and run Galasa tests.</p> <p>The following table shows the current compatibility between Gradle and Galasa versions: </p> Gradle release Compatible Galasa version 6.8.x All 6.9.x All 7.x.x All 8.x.x 0.36.0 or later <p>If you are upgrading to Gradle version 8 from an earlier version, see the <code>Upgrading tests to compile using Gradle version 8</code> section in the Upgrading documentation to understand the changes you need to make to create Galasa projects and build and compile Galasa test code. </p> <p>Remember to add Gradle to your PATH. You can check by running <code>echo $PATH</code> on Mac or Unix, or <code>echo %PATH%</code> on Windows (PowerShell).</p>"},{"location":"docs/cli-command-reference/zipped-prerequisites/#maven","title":"Maven","text":"<p>You must install either Maven or Gradle in order to build Galasa projects, which are hierarchical file structures that provide the ability to store and run Galasa tests.  </p>"},{"location":"docs/cli-command-reference/zipped-prerequisites/#docker","title":"Docker","text":"<p>Required if using the Docker image. If you want to deploy the Docker image that is provided in the zip file, you will need to have Docker installed.</p>"},{"location":"docs/cli-command-reference/zipped-prerequisites/#3270-emulator","title":"3270 emulator","text":"<p>Optional. Although you do not need a 3270 emulator to run a Galasa test (even if it tests a 3270 application) you can use one to run Galasa Simbank online, a simulated version of an application that helps you get acquainted with Galasa before connecting to a real mainframe to run your own tests. There are many such emulators available but IBM's Personal Communications (PCOMM) is frequently used, as is IBM's Host on Demand software, which includes support for Windows, Linux and MacOS.</p>"},{"location":"docs/cli-command-reference/zipped-prerequisites/#next-steps","title":"Next steps","text":"<p>Install the Galasa plug-in using the zipped distribution by following the instructions in Installing the Galasa CLI offline. </p>"},{"location":"docs/ecosystem/","title":"The Galasa Ecosystem","text":"<p>To realise the full power of Galasa, you need to run your tests inside a Galasa Ecosystem. The ecosystem enables you to run automated testing away from your workstation, outside of a local JVM. </p> <p>The SimBank tests showcase how the Galasa framework can run inside a locally hosted JVM. Local runs use their own Galasa property files to act as configurational services, making it easy to instantiate and run tests.</p> <p>However, there are limitations to taking a local-only approach:</p> <ul> <li>Configuration settings, test results and test artifacts are stored locally, so cannot be easily shared across teams using Galasa tools</li> <li>Tests cannot be run headlessly, so the workstation must be kept active</li> <li>Scaling capabilities are limited by workstation resources</li> <li>Monitoring and Management features are not available, for example, test streams and the test catalog and dashboarding capabilities</li> </ul>"},{"location":"docs/ecosystem/#running-tests-in-the-galasa-ecosystem","title":"Running tests in the Galasa Ecosystem","text":"<p>The Galasa Ecosystem is a cloud native application which exposes a sequence of microservices that are used to manage the set of running tests. Running tests inside the ecosystem provides a number of benefits:</p> <ul> <li> <p>Sharing tests across an enterprise When tests run inside the ecosystem, the Galasa framework provides the ability to scale horizontally to run large numbers of tests in parallel - enabling more testing to complete in a shorter timeframe. The ability to run tests at scale is one of the key features that differentiates Galasa from other test frameworks. Data is locked whilst in use, preventing cross contamination with other running tests. </p> </li> <li> <p>Re-usability  With Galasa, one person can complete the configurations for use across all test runs. Galasa configurations are maintained in a single location - the Configuration Property Store (CPS) and so can be shared across an organization for use by other tests.  Setting these properties centrally establishes a single source of truth and means that testers do not need to know about or configure these properties each time they write a new test. Test run results, run logs and artifacts are also stored in one central location, again enabling sharing across teams.</p> </li> <li> <p>Testing as a service  With an established Galasa Ecosystem you can run your testing as a service; regression tests, application tests, system verification tests and time-consuming adhoc tests can be run on demand by using Galasa as part of your DevOps pipeline and in a cloud environment. Workload is directed away from the CI pipeline and is run in its own dedicated environment, preventing computational resources from being diverted away from other jobs that are running within the pipeline. </p> </li> <li> <p>Automated test runs The Galasa test catalog can be used as part of the ecosystem to run automated testing away from a workstation without the need for local test material. The catalog can be configured to store related tests within a shared test catalog, enabling tests to be automatically selected to run for any given change set. The test catalog uses the latest version of test cases, so you know the tests that you're running are up-to-date.</p> </li> </ul>"},{"location":"docs/ecosystem/ecosystem-architecture/","title":"Ecosystem Architecture","text":"<p>The following diagram provides a high-level representation of the Galasa Ecosystem architecture:</p> <p></p> <p>The Ecosystem is made up of a collection of microservices for orchestrating runtimes, monitoring tests and resources, and providing clean-up of those resources if required. The Ecosystem provides a centralized store for run configurations, a single location for storing all test results and test artifacts, and utilizes a REST endpoint that can be called from any IDE or pipeline. </p>"},{"location":"docs/ecosystem/ecosystem-architecture/#key-components","title":"Key components","text":"<p>The following diagram highlights some of the key components that make up the Galasa Ecosystem and examples of external resources with which Galasa can interact:</p> <p></p>"},{"location":"docs/ecosystem/ecosystem-architecture/#galasa-stores","title":"Galasa Stores","text":"Configuration Property Store <p>The configuration property store (CPS) defines object properties, topologies, system configurations, and definitions which instruct the way in which a Galasa test runs. For example, properties for endpoints, ports and timeouts. When running in an ecosystem, all Galasa tests will use the same CPS configuration, unless any overrides are passed at submission. It is the CPS and the configurational properties that enable tests to run against multiple environments, without changing the code inside the test.</p> <p>Note: As IP addresses and ports of test machines are stored within the CPS on a users system, we recommend that hard drive encryption is turned on in the operating system where possible.</p> Dynamic Status Store <p>The dynamic status store (DSS) provides status information about the ecosystem and the tests that are running. The DSS is used by the resource manager and engine controller to ensure the limits that are set in the CPS configuration are not exceeded. DSS property values change dynamically as tests are run, showing the resources that are currently being used, shared or locked by a test, so that workloads can be limited to avoid throttling. When running in automation, the DSS is shared by every instance of the framework.</p> Result Archive Store <p>The result archive store (RAS) is a single database which stores all elements of a test, including the test results, run logs, and test artifacts. These elements can be used to help diagnose the cause of any failures encountered as a result of running a test, or to gather information about a test.  Storing all of this information in one place makes it simple for entire teams to view results.</p> Credentials Store <p>The credentials store (CREDs) securely provides the credentials, for example, password, username and personal access token that are required for a test to run in automation. The CREDs is hosted in the etcd server.</p> etcd <p>The etcd server is a highly available key-value pair store which hosts the Configuration Property Store (CPS), the Dynamic Status Store (DSS) and the Credentials Store (CREDs). The etcd server stores and maintains a single, consistent source of the truth about the status of the ecosystem at any given point in time.</p> CouchDB <p>This database runs inside Docker container or Kubernetes pod and contains the Result Archive Store (RAS).</p>"},{"location":"docs/ecosystem/ecosystem-architecture/#galasa-servers","title":"Galasa Servers","text":"Engine controller <p>The engine controller enables tests to run at scale within the ecosystem. This service is responsible for instantiating individual test engines by creating Docker containers or Kubernetes pods to manage and execute individual Galasa automation test runs. The engine controller allocates a test engine to a test submission if the required resources for the test are available. Otherwise, the test is put into a waiting state to be run at an appropriate time.</p> Resource Management <p>The resource management service monitors running tests and resources that have been marked as in use. If a test case becomes stale or is ended manually, this service performs clean up actions to ensure that the resources are entered back into the pool for another test to use. This service can perform large pieces of work, including the de-provisioning of an environment.</p> Metrics Server <p>The metrics server indicates the health of the ecosystem, for example, providing metrics on the number of successful test runs.</p> API Server <p>The API server acts as a central point from which to control the Galasa Ecosystem and is used by Galasa as an endpoint with which IDEs and pipelines interact for submitting tests and retrieving results. The API server hosts the bootstrap server.</p> Bootstrap Server <p>The bootstrap server is part of the API server. The bootstrap is an endpoint that is provided by the API server to store the initial configuration required to instantiate a Galasa framework. When setting up the Galasa Ecosystem, the IDE must be updated to point to the bootstrap that is configured to use the ecosystem.</p> Galasa Web UI <p>The Galasa Web UI is currently under construction and planned for a future release. Use the WebUI to see a dashboard overview of the current and historical health of the Galasa framework. The UI can also run, schedule or reschedule tests, be used to analyse output from failed test runs, and manage the configuration needed to customise the framework and  tests for maximum throughput, resilience and flexibility.</p> Dex <p>The Galasa Ecosystem Helm chart's use of Dex is under development and is subject to change. In a future release, Dex will be used to authenticate users interacting with a Galasa Ecosystem.</p>"},{"location":"docs/ecosystem/ecosystem-architecture/#code-deployment","title":"Code Deployment","text":"Maven Repositories and OBRs <p>For tests to run in the ecosystem they require compiled artifacts to be hosted in a Maven repository. The artifacts must be bundled as an OSGI bundle -  Galasa provides a Maven plug-in to create these bundles.</p> Nexus <p>A Nexus server enables deployment of Maven artifacts to the ecosystem and can be used to host Docker images. If you have an alternative internal artifact repository, you can use that instead of Nexus.</p>"},{"location":"docs/ecosystem/ecosystem-architecture/#optional-reporting-servers","title":"Optional reporting servers","text":"Prometheus <p>The Prometheus server scrapes and stores metrics from defined endpoints from the metrics server. These metrics provide information on the rate of  throughput of tests in the ecosystem.</p> Grafana <p>A dashboard for visualizing Prometheus metrics. Data can be explored through queries and drilldown.</p> Elasticsearch <p>Provides an Elastic search instance to record the results of automated test runs.</p> Kabana <p>A dashboard for visualizing Elasticsearch metrics. Data can be explored through queries and drilldown.       |</p>"},{"location":"docs/ecosystem/ecosystem-architecture/#key-concepts","title":"Key concepts","text":"<p>These concepts are relevant when running tests locally, or when submitting tests to a remote Galasa service:</p> <ul> <li> <p>A test case - A piece of test logic which can be compiled or translated into something which is runnable by the Galasa framework. This may be a piece of Java code for example, or a Gherkin test feature.</p> </li> <li> <p>A test run - Also known as a 'run' - An execution of the testcase which was started at a certain point in time, executed logic steps, and is still running, or has finished with a test status and result. For example: Passed or Failed.</p> </li> </ul> <p>Some concepts are only relevant on a Galasa service:</p> <ul> <li> <p>A user - The authorised person manipulating the Galasa system in some way.</p> </li> <li> <p>Role based access control (RBAC) - The mechanism where the Galasa service will allow some users to perform any available task, but limit what other users can do. This is to help isolate some system capabilities for safety or for security. Read more about the RBAC in the role-based access section.</p> </li> </ul>"},{"location":"docs/ecosystem/ecosystem-authentication/","title":"Configuring authentication","text":"<p>Before interacting with a Galasa Ecosystem using the Galasa command line tool (<code>galasactl</code>), you must be authenticated with it. Any <code>galasactl</code> command which connects to a remote Galasa service needs to know the address of that service. A URL can be configured in the  <code>GALASA_BOOTSTRAP</code> environment variable or it can be set on a per-command basis using the <code>--bootstrap</code> flag.</p> <p>Once the <code>galasactl</code> tool knows which Galasa service to contact, it needs to be configured to be able to authenticate to that service. To do that, the Galasa Web UI must be used to allocate a personal access token, which can be passed to the <code>galasactl</code> to be used.</p> <p>A personal access tokens is stored in the <code>GALASA_TOKEN</code> property in the <code>galasactl.properties</code> file in your Galasa home folder, or in the <code>GALASA_TOKEN</code> environment variable. The <code>galasactl.properties</code> file is created when you run the <code>galasa local init</code> command. Setting the <code>GALASA_TOKEN</code> property in this file with a valid token value allows the galasactl tool to access and communicate with an Ecosystem on behalf of the user.</p> <p>If you have installed your Galasa Ecosystem by using the Galasa Ecosystem Helm chart that is provided with Galasa, you will have access to the Galasa Web UI. To get a value for the <code>GALASA_TOKEN</code> property, log into the Galasa Web UI and request a personal access token (using the 'My Settings' page) which can be copied into the <code>GALASA_TOKEN</code> property. The instructions on how to do this are displayed in a dialog box in the Galasa Web UI. You can choose to set the token as an environmental variable but the value would not persist across terminals, so is only valid for that session.</p>"},{"location":"docs/ecosystem/ecosystem-authentication/#authentication-architecture","title":"Authentication architecture","text":"<p>The following diagram shows the architecture for the authentication process:</p> <p></p> <p>When a user logs into the Galasa Web UI via their browser, the Web UI contacts the Galasa API server which in turn talks to a Dex server, providing it with the user ID. The Dex server talks to an identity provider, for example GitHub or LDAP, to authenticate that user. If the user is successfully authenticated, Dex returns a bearer token to the Galasa API server, which in turn passes the token to the Galasa Web UI. The bearer token is then stored in a cookie by the web browser, to be used in further interactions with the Galasa Web UI until the user logs out of the web application, or the token expires.</p> <p>Once logged-in to the Web UI, the user can then create a new access token token (using the 'My Settings' page). This provides a secret access token which must be copied from the Web UI panel and made available to the <code>galasactl</code> command line tool. The access token can be placed in the <code>GALASA_TOKEN</code> property in the <code>galasactl.properties</code> file, or the <code>GALASA_TOKEN</code> environment variable.</p> <p>The <code>galasactl</code> tool will login implicitly when it needs to contact the remote Galasa service. Or the login state can be explicitly controlled using the <code>galasactl auth login</code> and <code>galasactl auth logout</code> commands.</p> <p>On a successful login using the <code>galasactl</code> tool, the <code>GALASA_TOKEN</code> will be used to create a new temporary bearer token, which is stored in the <code>bearer-tokens</code> folder in the Galasa home directory. This file contains a bearer token that galasactl uses to authenticate requests when communicating with a Galasa Ecosystem. If the bearer token expires, galasactl automatically attempts to re-authenticate with the Galasa Ecosystem using the configured <code>GALASA_TOKEN</code>.</p>"},{"location":"docs/ecosystem/ecosystem-authentication/#logging-in-to-a-galasa-ecosystem-using-the-auth-login-command","title":"Logging in to a Galasa Ecosystem using the auth login command","text":"<p>You can log in to a Galasa Ecosystem explicitly by using the <code>galasactl auth login</code> command. You might want to do an explicit log in if you are running galasactl as part of a build pipeline, or if you just want to make sure you can log in.</p>"},{"location":"docs/ecosystem/ecosystem-authentication/#logging-out-of-a-galasa-ecosystem-using-the-auth-logout-command","title":"Logging out of a Galasa Ecosystem using the auth logout command","text":"<p>To log out of a Galasa Ecosystem using galasactl, you can use the <code>galasactl auth logout</code> command. If you run a galasactl command that interacts with an Ecosystem while logged out, galasactl will attempt to automatically log again in using the configured <code>GALASA_TOKEN</code>.</p>"},{"location":"docs/ecosystem/ecosystem-authentication/#listing-personal-access-tokens","title":"Listing personal access tokens","text":"<p>You can retrieve a list of all active personal access tokens in the Ecosystem by using the <code>galasactl auth tokens get</code> command. This information is useful if you need to query active tokens with a view to revoking a particular token, for example, if a user moves to a new role, or loses a laptop with their access token on it.</p> <p>The token ID, creation date, username, and description information is returned, as shown in the following example:</p> <pre><code>&gt; galasactl auth tokens get \ntokenid         created(YYYY/MM/DD)  user                description\n09823128318238  2024-02-03           m.smith@gmail.com   Ecosystem1 access \n87a6s2y8hqwd27  2024-05-04           s_jones@gmail.com   CLI access from VSCode\n\nTotal:2\n</code></pre> <p>The returned token list is sorted in creation date order, with the earliest creation date first. The description information matches the description that is provided by the user when creating a new access token from the Galasa Web UI.</p> <p>You can also get tokens for a specific user</p> <pre><code>&gt; galasactl auth tokens get --user m.smith@gmail.com\ntokenid         created(YYYY/MM/DD)  user                description\n09823128318238  2024-02-03           m.smith@gmail.com   Ecosystem1 access \n\nTotal:1\n</code></pre> <p>If you are unsure which user id you are currently using, you can find out with this command:</p> <pre><code>&gt; galasactl users get --id me  \nid: m.smith@gmail.com\n</code></pre>"},{"location":"docs/ecosystem/ecosystem-authentication/#revoking-personal-access-tokens","title":"Revoking personal access tokens","text":"<p>If a user moves to a new role, or loses a laptop with their personal access token on it, you can log into the Galasa Ecosystem and revoke their access token by using the <code>galasactl auth tokens delete</code> command. This ensures that the Ecosystem and systems-under-test remain secure.</p> <p>You can retrieve a list of available personal access tokens that have been created, along with their token IDs, by running the <code>galasactl auth tokens get</code> command, as described in the previous section. </p> <p>Run the following command to revoke a personal access token with the token ID <code>myId</code> substituted for the numeric value visible from the <code>galasactl auth tokens get</code> command.</p> <pre><code>galasactl auth tokens delete --tokenid {myId}\n</code></pre> <p>For example:</p> <pre><code>&gt; galasactl auth tokens get --user m.smith@gmail.com\ntokenid         created(YYYY/MM/DD)  user                description\n09823128318238  2024-02-03           m.smith@gmail.com   Ecosystem1 access \n\nTotal: 1\n&gt; galasactl auth tokens delete --tokenid 09823128318238\n</code></pre> <p>Note: The <code>galasactl auth tokens delete</code> command revokes personal access tokens that a user creates through the Galasa Web UI. When a user runs a CLI command that talks to the Ecosystem, the CLI uses the personal access token to get a JSON Web Token (JWT). A JWT is a separate, temporary token that identifies a user and is used in galasactl commands to talk to the API server. JWTs cannot be revoked, but they do expire, so a user can continue to run CLI commands after revoking their personal access token until their JWT expires. You can remove the JWT that is stored on a user's machine instead of having to wait for the JWT to expire, by running the <code>galasactl auth logout</code> command on that machine.</p> <p>For more information about JWTs, see the <code>Configuring Dex</code> section in the Installing an Ecosystem using Helm documentation.</p>"},{"location":"docs/ecosystem/ecosystem-installing-k8s/","title":"Installing an Ecosystem using Helm","text":"<p>If you want to run scalable, highly available testing for enterprise level workloads, you need to install your Galasa Ecosystem in a Kubernetes cluster. Running Galasa in a Kubernetes cluster means that you can run many tests in parallel on a resilient and scalable platform, where the clean-up of test resources can be managed, and test results can be centralised and gathered easily. </p> <p>Galasa provides a Galasa Ecosystem Helm chart to install a Galasa Ecosystem. You can install the chart into a Kubernetes cluster or minikube. However, note that minikube is not suitable for production purposes because it provides a single Kubernetes node and therefore does not scale well. Use minikube only for development and testing purposes.</p> <p>The following sections explain how to install a Galasa Ecosystem on a Kubernetes cluster (and on minikube) by using Helm and validate that the Ecosystem is installed correctly. </p> <p>The Galasa Helm repository contains the Galasa Ecosystem Helm chart that is referenced in the following sections.</p> <p>Note: The Galasa Ecosystem Helm chart currently supports only x86-64 systems. It cannot be installed on ARM64-based systems.</p>"},{"location":"docs/ecosystem/ecosystem-installing-k8s/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Helm must be installed to use the chart. See the Helm documentation for installation instructions.</p> </li> <li> <p>The Kubernetes command-line tool kubectl must be installed on the machine that is used to run the commands and must be configured to point at your Kubernetes cluster. To find out more about Kubernetes, see the Kubernetes Documentation.</p> </li> <li> <p>You must have a Kubernetes cluster at version 1.16 or higher. You can check the version number by running the <code>kubectl version</code> command.</p> </li> <li> <p>If you want to install the chart into minikube, ensure you have minikube installed and that it is running with <code>minikube status</code>. If minikube is not running, start it by running <code>minikube start</code>. Once minikube is running, follow the instructions in the following sections to install the Galasa Ecosystem Helm chart.</p> </li> </ul>"},{"location":"docs/ecosystem/ecosystem-installing-k8s/#kubernetes-role-based-access-control","title":"Kubernetes role-based access control","text":"<p>If role-based access control (RBAC) is active on your Kubernetes cluster, a user with the <code>galasa-admin</code> role (or a role with equivalent permissions) is needed to run Helm commands on the cluster. The <code>galasa-admin</code> role allows assigned users to run the Helm install, upgrade, and delete commands to interact with the Helm chart. </p> <p>You can assign the <code>galasa-admin</code> role to a user by replacing the placeholder username in the rbac-admin.yaml file with a username that corresponds to a user with access to your cluster. If multiple users require admin privileges, you can assign the <code>galasa-admin</code> role to multiple groups, users, or service accounts by extending the <code>subjects</code> list. See the Using RBAC Authorization Kubernetes documentation for more information.</p> <p>You also need a Galasa service account. The Galasa service account allows the API, Engine Controller, Metrics, and Resource Monitor to co-ordinate between themselves, and allows the Engine Controller to create and manage engine pods. </p> <p>For chart versions later than <code>0.23.0</code>, the Galasa service account is automatically created, if one does not already exist, when installing the Galasa Ecosystem Helm chart.  The Galasa service account enables the API, Engine Controller, Metrics, and Resource Monitor to co-ordinate, while allowing the Engine Controller to create and manage engine pods.</p> <p>For chart versions <code>0.23.0</code> and earlier, you must create the Galasa service account manually by running the following command in the repository's ecosystem directory:</p> <pre><code>kubectl apply -f \\\nhttps://raw.githubusercontent.com/galasa-dev/helm/ecosystem-0.23.0/charts/ecosystem/rbac.yaml\n</code></pre>"},{"location":"docs/ecosystem/ecosystem-installing-k8s/#installing-a-galasa-ecosystem","title":"Installing a Galasa Ecosystem","text":"<p>Complete the following steps to install a Galasa Ecosystem by using Helm:</p>"},{"location":"docs/ecosystem/ecosystem-installing-k8s/#adding-the-galasa-repository","title":"Adding the Galasa repository","text":"<ol> <li> <p>Add or update the Galasa repository.</p> <ul> <li> <p>If the repository does not exist, add the repository by running the following command:</p> <pre><code>helm repo add galasa https://galasa-dev.github.io/helm\n</code></pre> </li> <li> <p>If the repository exists, run the <code>helm repo update</code> command to get the latest versions of the packages and then run <code>helm search repo galasa</code> to see the available charts.    </p> </li> </ul> <p>Note: The Galasa Ecosystem Helm chart deploys three persistent volumes (PVs). If you need to provide a Kubernetes storage class for these PVs, download the <code>values.yaml</code> file for your chosen Galasa Ecosystem version from the Galasa Helm repository's releases page and update the <code>storageClass</code> value in the file with the name of a valid storage class on your cluster. If you are deploying to minikube, you can optionally use the standard storage class that is created for you by minikube, but this is not required.</p> </li> <li> <p>Download the values.yaml file for your chosen Galasa Ecosystem version from the Galasa Helm repository's releases page if you have not done so already, and edit the values of the following properties:</p> <ul> <li> <p>Set <code>galasaVersion</code> to the version of Galasa that you want to run. (See the Releases documentation for released versions). To ensure that each pod in the Ecosystem is running at the same level, do not use <code>latest</code> as the Galasa version.</p> </li> <li> <p>Set <code>externalHostname</code> to the DNS hostname that you wish to use to access the Galasa Ecosystem services.</p> </li> </ul> </li> </ol> <p>After updating the <code>galasaVersion</code> and <code>externalHostname</code> values, complete the following instructions to set up Ingress for your Ecosystem. </p>"},{"location":"docs/ecosystem/ecosystem-installing-k8s/#configuring-ingress","title":"Configuring Ingress","text":"<p>The Galasa Ecosystem Helm chart uses Ingress to reach services that are running within a Kubernetes cluster. To learn more about Ingress, see the Kubernetes Documentation.</p> <p>Note: If you are deploying to minikube, ensure the NGINX Ingress controller is enabled by running the <code>minikube addons enable ingress</code> command.</p> <p>Assuming that your Ingress controller is set up on your Kubernetes cluster, configure the use of Ingress in your Ecosystem by completing the following updates to the values that are listed under the <code>ingress</code> section within your <code>values.yaml</code> file:</p> <ol> <li> <p>Replace the <code>ingressClassName</code> value with the name of the IngressClass that is configured in your cluster. By default, <code>nginx</code> is used.</p> </li> <li> <p>If you are using HTTPS, add a <code>tls</code> configuration within the <code>ingress</code> section, specifying the <code>hosts</code> list and a <code>secretName</code> value corresponding to the name of the Kubernetes Secret that contains your TLS private key and certificate. See the Kubernetes Documentation for information on how to set up TLS.</p> </li> </ol> <p>After updating the values under the <code>ingress</code> section of your <code>values.yaml</code> file, complete the following instructions to configure Dex in your Ecosystem.</p>"},{"location":"docs/ecosystem/ecosystem-installing-k8s/#configuring-dex","title":"Configuring Dex","text":"<p>For Galasa version 0.32.0 and later, Dex is used to authenticate users interacting with a Galasa Ecosystem.</p> <p>To configure Dex in your Ecosystem, complete the following steps to update your <code>values.yaml</code> file:</p> <ol> <li> <p>Replace the hostname in your <code>issuer</code> value with the same hostname given in <code>externalHostname</code> and set the URI scheme to either <code>http</code> or <code>https</code>. For example:</p> <pre><code>issuer: http://&lt;your-external-hostname&gt;/dex\n</code></pre> </li> <li> <p>Optional. Update the <code>expiry</code> section to configure the expiry of JSON Web Tokens (JWTs) and refresh tokens issued by Dex. By default, JWTs expire 24 hours after being issued and refresh tokens remain valid unless they have not been used for one year. See the Dex documentation on ID tokens for information and available expiry settings. </p> </li> </ol> <p>You can now configure Dex to authenticate via a connector to authenticate with an upstream identity provider, for example, GitHub, Microsoft, or an LDAP server. For a full list of supported connectors, refer to the Dex documentation. The following instructions explain how to configure Dex to authenticate through GitHub.</p>"},{"location":"docs/ecosystem/ecosystem-installing-k8s/#configuring-authentication","title":"Configuring authentication","text":"<p>Complete the following steps to configure Dex to authenticate through GitHub:</p> <ol> <li> <p>Register an OAuth application in GitHub, ensuring the callback URL of the application is set to your Dex <code>issuer</code> value, followed by <code>/callback</code>. For example, if your <code>issuer</code> value is <code>https://prod-ecosystem.galasa.dev/dex</code>, then your callback URL is <code>https://prod-ecosystem.galasa.dev/dex/callback</code>.</p> </li> <li> <p>Add a GitHub connector to your Dex configuration, providing the name of your GitHub organisation and any teams that you require users to be part of to be able to use your Ecosystem as follows:</p> <pre><code>dex:\n  config:\n    # Other Dex configuration values...\n\n    connectors:\n    - type: github\n      id: github\n      name: GitHub\n      config:\n        clientID: $GITHUB_CLIENT_ID\n        clientSecret: $GITHUB_CLIENT_SECRET\n        redirectURI: &lt;your-dex-issuer-url&gt;/callback\n        orgs:\n        - name: my-org\n          teams:\n          - my-team\n</code></pre> <p>where <code>$GITHUB_CLIENT_ID</code> and <code>$GITHUB_CLIENT_SECRET</code> correspond to the registered OAuth application's client ID and secret. Ensure that the <code>redirectURI</code> value is the same value that you provided when setting up your GitHub OAuth application in step 1.</p> <p>If you want to pull the client ID and secret values of your OAuth application from a Kubernetes Secret, create a Secret by running the following <code>kubectl</code> command, ensuring that the Secret's keys match those given in the GitHub connector's <code>clientID</code> and <code>clientSecret</code> values without the leading <code>$</code> (i.e. <code>GITHUB_CLIENT_ID</code> and <code>GITHUB_CLIENT_SECRET</code> as shown in the following example):</p> <pre><code>kubectl create secret generic my-github-oauth-app-credentials \\\n--from-literal=GITHUB_CLIENT_ID=\"myclientid\" \\\n--from-literal=GITHUB_CLIENT_SECRET=\"myclientsecret\"\n</code></pre> <p>When your Kubernetes Secret is created, supply the name of the Secret by using the <code>envFrom</code> value in your <code>values.yaml</code> file to mount the Secret as shown in the following example:</p> <pre><code>dex:\n  envFrom:\n    - secretRef:\n      name: my-github-oauth-app-credentials\n\n  config:\n    # Other Dex configuration values...\n\n    connectors:\n    - type: github\n      id: github\n      name: GitHub\n      config:\n        clientID: $GITHUB_CLIENT_ID\n        clientSecret: $GITHUB_CLIENT_SECRET\n        redirectURI: &lt;your-dex-issuer-url&gt;/callback\n        orgs:\n        - name: my-org\n          teams:\n          - my-team\n</code></pre> </li> </ol> <p>By default, the Galasa Ecosystem Helm chart creates a Kubernetes Secret containing configuration details for Dex.  If you want to apply your own Dex configuration as a Secret, your Dex configuration must be provided in a <code>config.yaml</code> key within the Secret,  and the value of the <code>config.yaml</code> key must be a valid Dex configuration.</p> <p>For more information on configuring Dex, see the Dex documentation.</p>"},{"location":"docs/ecosystem/ecosystem-installing-k8s/#configure-the-default-user-role-and-owner-of-the-galasa-service","title":"Configure the default user role, and 'owner' of the Galasa service","text":"<p>When the Galasa service is first installed, users logging in will be assigned a role as dictated by the <code>galasaDefaultUserRole</code> Helm chart property. For example 'tester'. This means nobody initially logging into the Galasa service will have administrator privileges. We would discourage ever setting this property to <code>admin</code> as doing so would provide a less secure Galasa service, with any action in the system available to anyone on the system.</p> <p>To obtain administration rights to the Galasa service, the kubernetes install must nominate one or more users as 'owners' of the service. When a service owner next logs into the Galasa service, they will be granted a role of <code>owner</code>. From this point on, that user can assign the 'admin' role to anyone else who needs it using the <code>galasactl</code> command line or by using the web user interface via a browser.</p> <p>Once the Galasa service has one or more users with the 'admin' role, kubernetes can be updated so that the system doesn't have any \"owner\" if desired.  The <code>owner</code> role exists solely to fix situations where there are no administrators on the Galasa service, such as when the Galasa service is initially installed, or when none of the members in the organisation have the <code>admin</code> role. If a user was a nominated \"owner\", performs some administration tasks, and is then removed from the list of \"owners\", their role on the Galasa service will revert to what it was initially.</p> <p>To configure a list of owners, use the <code>galasaOwnersLoginIds</code> property of the <code>values.yaml</code> file and use Helm to deploy it. You can set multiple owners by adding a comma-separated list of login-ids.</p> <p>Each login-id must match the login-id allocated to the user by the authentication service to which Galasa connects. If you are unsure what login-id to use, try setting up your system without an owner and logging into the Galasa service using a browser, then viewing the user profile page before returning to update the owner login-id in your <code>values.yaml</code> and deploying it to kubernetes using <code>helm upgrade</code>.</p>"},{"location":"docs/ecosystem/ecosystem-installing-k8s/#installing-the-chart","title":"Installing the chart","text":"<p>After configuring your <code>values.yaml</code> file, complete the following steps to install the Galasa Ecosystem Helm chart:</p> <ol> <li> <p>Install the Galasa Ecosystem chart by running the following command:</p> <pre><code>helm install -f /path/to/values.yaml &lt;release-name&gt; galasa/ecosystem --wait\n</code></pre> <p>where:</p> <ul> <li> <p><code>/path/to/values.yaml</code> is the path to where the <code>values.yaml</code> file is downloaded and</p> </li> <li> <p><code>&lt;release-name&gt;</code> is the name that you want to give the Ecosystem.</p> </li> </ul> <p>The <code>--wait</code> flag ensures that the chart installation completes before marking it as <code>Deployed</code>. During the installation, the API pod waits for the etcd and RAS pods to initialise while the Engine Controller, Metrics, and Resource Monitor pods wait for the API pod to initialise.</p> </li> <li> <p>View the status of the deployed pods by running <code>kubectl get pods</code> in another terminal. The returned results should look similar to the following example:</p> <pre><code>NAME                                      READY   STATUS     RESTARTS      AGE\ntest-api-7945f959dd-v8tbs                 1/1     Running    0             65s\ntest-engine-controller-56fb476f45-msj4x   1/1     Running    0             65s\ntest-etcd-0                               1/1     Running    0             65s\ntest-metrics-5fd9f687b6-rwcww             1/1     Running    0             65s\ntest-ras-0                                1/1     Running    0             65s\ntest-resource-monitor-778c647995-x75z9    1/1     Running    0             65s\n</code></pre> </li> </ol>"},{"location":"docs/ecosystem/ecosystem-installing-k8s/#verifying-the-installation","title":"Verifying the installation","text":"<p>After the <code>helm install</code> command completes with a successful deployment message, run the following command to check that the Ecosystem can be accessed externally to Kubernetes so that a simple test engine can be run:</p> <pre><code>helm test &lt;release-name&gt;\n</code></pre> <p>where:</p> <p><code>&lt;release-name&gt;</code> is the name that you gave the Ecosystem during installation.</p> <p>When the <code>helm test</code> command ends and displays a success message, the Ecosystem is set up correctly and is ready to be used.</p>"},{"location":"docs/ecosystem/ecosystem-installing-k8s/#accessing-services","title":"Accessing services","text":"<p>The URL of the Ecosystem bootstrap will be your external hostname, followed by <code>/api/bootstrap</code>.</p> <p>For example, if the external hostname that you provided was <code>example.com</code> and you provided values for using TLS, the bootstrap URL would be <code>https://example.com/api/bootstrap</code>. This is the URL that you would enter into a galasactl command's <code>--bootstrap</code> option to interact with your Ecosystem.</p> <p>If you are deploying to minikube, add an entry to your <code>/etc/hosts</code> file, ensuring the IP address matches the output of <code>minikube ip</code>. For example:</p> <pre><code>192.168.49.2 example.com\n</code></pre>"},{"location":"docs/ecosystem/ecosystem-installing-k8s/#running-galasa-tests","title":"Running Galasa tests","text":"<p>Once you have successfully installed the Ecosystem, you can then deploy your Galasa tests to a Maven repository and set up a test stream. For more information on managing tests, see the Managing tests in a Galasa Ecosystem documentation.</p>"},{"location":"docs/ecosystem/ecosystem-installing-k8s/#upgrading-the-galasa-ecosystem","title":"Upgrading the Galasa Ecosystem","text":"<p>Get the latest version of the Ecosystem chart and upgrade the Galasa Ecosystem to use the newer version of Galasa - for example version 0.42.0 - by running the following command:</p> <p>On Mac or Unix:</p> <pre><code>helm repo update \\\nhelm upgrade &lt;release-name&gt; galasa/ecosystem --reuse-values \\\n--set galasaVersion=0.42.0 --wait\n</code></pre> <p>On Windows (Powershell):</p> <pre><code>helm repo update `\nhelm upgrade &lt;release-name&gt; galasa/ecosystem --reuse-values `\n--set galasaVersion=0.42.0 --wait\n</code></pre> <p>where:</p> <ul> <li> <p><code>galasaVersion</code> is set to the version that you want to use and</p> </li> <li> <p><code>&lt;release-name&gt;</code> is the name that you gave to the Ecosystem during installation</p> </li> </ul>"},{"location":"docs/ecosystem/ecosystem-installing-k8s/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Check the logs by running the <code>kubectl logs</code> command. </li> <li>Check that the Galasa version number in the sample is correct by running the <code>kubectl describe pod &lt;podname&gt;</code> command.  If the version number is not the latest one, update the version number in the sample and apply the update.</li> <li>If an 'unknown fields' error message is displayed, you can turn off validation by using the  <code>--validate=false</code> command. </li> </ul>"},{"location":"docs/ecosystem/ecosystem-manage-cps/","title":"Managing configuration properties","text":"<p>Integration testing can be complicated. Tests often require configuration parameters to bind to a specific test environment. Galasa Managers require configuration so that systems under test can be contacted. Credentials for systems need to be supplied to tests and Managers to enable connections. The organisation of these parameters must be centralised if tests are to be run in automation. </p> <p>To address these challenges, Galasa uses a Configuration Property Store (CPS) as part of the core Galasa framework. The CPS holds all the configuration values, so that the Galasa framework, Ecosystem, Managers, and individual tests can use the CPS to retrieve configuration information.</p> <p>A video \u2013 The Galasa Configuration Property Store \u2013 is available on the Galasa YouTube channel. Watch the video to find out more about the features of the Galasa CPS, and to see a demonstration on how to manipulate CPS property values by using the Galasa command line tool.</p>"},{"location":"docs/ecosystem/ecosystem-manage-cps/#simplifying-test-configuration-with-the-cps","title":"Simplifying test configuration with the CPS","text":"<p>When running Galasa tests locally using the command line tool  the CPS is stored in the flat file <code>{GALASA_HOME}/cps.properties</code>. </p> <p>When running tests in the Galasa Ecosystem, where tests are run on a Kubernetes cluster, a REST service hosts the storage of the CPS properties in a central location. A centralised CPS means that configuration information can be supplied to all automated tests running in a Galasa Ecosystem, allowing multiple tests to run using the same shared configuration information. </p> <p>You can set, retrieve and delete properties that are held in the CPS by using the <code>galasasctl properties</code> commands. The ability to manage these properties directly makes it easier for testers to set parameters and credentials on the Ecosystem for tests to read and use at runtime. System administrators can use the CLI to set Ecosystem-wide configuration properties after Ecosystem installation.</p> <p>By default, properties are are always retrieved from the REST service individually during test class runs. If the amount of network requests to retrieve properties from the CPS causes any problems, you can enable a cache by setting the <code>framework.cps.rest.cache.is.enabled</code> property to <code>true</code>. When the cache is enabled, all CPS properties are loaded at the start of a test class run.</p>"},{"location":"docs/ecosystem/ecosystem-manage-cps/#about-the-configuration-properties-store","title":"About the Configuration Properties Store","text":"<p>The CPS is a key-value pair store. Properties in the CPS are dot-separated values with lower and upper-case segments that define, for example, endpoint, port, and repository properties. These properties control how a Galasa test runs.  It is the CPS and the configuration properties that enable tests to run against multiple environments, without changing the code inside the test. </p> <p>Naming conventions are used to maintain order in the properties which are stored in the CPS. If a property in the CPS consists of a prefix, suffix, and a variable infix, then the prefix and suffix are lower-case, and the infix part of the property name is upper-case, to indicate that it is variable in nature. This convention allows the CPS to group names together and for easy searching and lookup by tests, Managers and users alike. Properties can be searched by using the prefix, suffix and a list of possible infixes.</p> <p>Namespaces are used to group properties together within the CPS. Namespaces help to restrict the values that can be drawn from the CPS. For example, test cases draw values only from the <code>test</code> namespace. The Galasa framework draws values from the <code>framework</code> namespace, for example, the location of the Credentials Store and the Dynamic Status Store. Managers also provide their own configuration properties, for example, the configuration properties of the Docker Manager are held in the <code>docker</code> namespace. </p> <p>Namespaces are either defined as <code>normal</code> or <code>secure</code> types. Returned values that are associated with properties in a <code>secure</code> namespace type are redacted, so property values are not displayed in returned results. All other namespaces are classed as <code>normal</code> type and these types of namespaces do display property values. The <code>--namespace</code> flag is mandatory for all <code>galasasctl properties</code> commands. </p>"},{"location":"docs/ecosystem/ecosystem-manage-cps/#retrieving-namespaces-from-an-ecosystem","title":"Retrieving namespaces from an Ecosystem","text":"<p>Use the <code>galasactl properties namespaces get</code> command to retrieve a list of all namespaces that are in an Ecosystem.  You can use the appropriate namespace in the <code>galasasctl properties get</code>, <code>galasasctl properties set</code>, and <code>galasasctl properties delete</code> commands to view, create, update, or delete properties within that namespace. Namespaces are returned in either summary format, by setting the <code>--format summary</code> flag, or in raw format, by setting the <code>--format raw</code> flag on the <code>galasactl properties namespaces get</code> command. </p> <p>Table 1: The following table shows the options that you can set on the <code>galasactl properties namespaces get</code> command to retrieve namespaces in different formats:</p> Name Description <code>--format summary</code> The default format is summary. Summary format is useful if you need a quick, high-level view. If you omit the <code>--format</code> flag in the command, results are returned in summary format. You can set the summary format explicitly by setting the <code>--format summary</code> flag in the <code>galasactl properties namespaces get</code> command. <code>--format raw</code> The output from <code>galasactl properties namespaces get</code> is returned in a form that makes it easy for scripting to digest the individual pieces of data available. Returned values are separated by pipes, without formatting or header information. <p>Use the following command to retrieve all namespaces in an Ecosystem <code>summary</code> format:</p> <pre><code>galasactl properties namespaces get\n</code></pre> <p>The following example shows namespaces returned in summary format:</p> <pre><code>name       type\ndocker     NORMAL\nframework  NORMAL\nsecure     SECURE\nTotal: 3\n</code></pre> <p>Use the following command to retrieve all namespaces in an Ecosystem <code>raw</code> format:</p> <pre><code>galasactl properties namespaces get --format raw\n</code></pre> <p>The following example shows namespaces returned in the <code>raw</code> format of <code>namespace|type|</code>, with pipe delimiters:</p> <pre><code>docker|NORMAL\nframework|NORMAL\nsecure|SECURE\n</code></pre> <p>Returned properties are sorted in alphabetical order based on the name of the namespace. </p>"},{"location":"docs/ecosystem/ecosystem-manage-cps/#managing-cps-properties","title":"Managing CPS properties","text":"<p>Use the <code>galasasctl properties get</code>, <code>galasasctl properties set</code>, and <code>galasasctl properties delete</code> commands to dynamically manage CPS properties. These Galasa CLI commands make it easy to ensure that the appropriate properties and credentials are installed in the Ecosystem for automated tests to query and use. </p> <p>The example commands that are provided in the following sections assume that the <code>GALASA_BOOTSTRAP</code> environment variable is set, so the <code>--bootstrap</code> flag is not required in the command. </p>"},{"location":"docs/ecosystem/ecosystem-manage-cps/#retrieving-properties-from-a-namespace","title":"Retrieving properties from a namespace","text":"<p>Use the <code>galasactl properties get</code> command to read CPS properties and values from a specified namespace in the Galasa Ecosystem to verify that the properties exist and are set correctly. You can filter the properties that are returned by using the property name (to return a single property), or by using the prefix, suffix, and infix flags to return a subset of properties that match the provided criteria. </p> <p>Property values that are returned from secure namespace types are redacted, so property values are not displayed. Namespaces that are classed as normal type do display property values.</p> <p>Table 2: The following table shows the options that you can set on the <code>galasactl properties get</code> command to retrieve property results in different formats:</p> Name Description <code>--format summary</code> The default format is summary. Summary format is useful if you need a quick, high-level view. You can set the summary format explicitly by setting the <code>--format summary</code> flag in the <code>galasactl properties get</code> command. If you omit the <code>--format</code> flag in the command, results are returned in summary format. <code>--format yaml</code> If you want to use galasactl to extract a yaml file which describes a property's values, you can set the <code>--format yaml</code> flag in the command. This is useful if you want to update a number properties with different values by using a single command. <code>--format raw</code> The output from <code>galasactl properties get</code> is returned in a form that makes it easy for scripting to digest the individual pieces of data available. Returned values are separated by pipes, without formatting or header information."},{"location":"docs/ecosystem/ecosystem-manage-cps/#retrieve-properties-from-a-namespace","title":"Retrieve properties from a namespace","text":"<p>To retrieve properties that are stored in the <code>framework</code> namespace in summary format, use the following command:</p> <pre><code>galasactl properties get --namespace framework\n</code></pre>"},{"location":"docs/ecosystem/ecosystem-manage-cps/#retrieve-a-single-property-from-a-namespace","title":"Retrieve a single property from a namespace","text":"<p>To retrieve a specific property from the <code>framework</code> namespace, specify the property name in the command by using the <code>-\u2013name</code> flag. The following example retrives the <code>resultarchive.store</code> property from the framework <code>namespace</code> in raw format.</p> <p>On Mac or Unix:</p> <pre><code>galasactl properties get --namespace framework \\\n--name resultarchive.store \\\n--format raw\n</code></pre> <p>On Windows (Powershell):</p> <pre><code>galasactl properties get --namespace framework `\n--name resultarchive.store `\n--format raw\n</code></pre> <p>Note: The <code>-\u2013name</code> flag cannot be used in conjunction with the <code>-\u2013prefix</code>, <code>--suffix</code>, or <code>-\u2013infix</code> flags.</p>"},{"location":"docs/ecosystem/ecosystem-manage-cps/#retrieve-a-subset-of-properties-in-a-namespace","title":"Retrieve a subset of properties in a namespace","text":"<p>To filter the properties that are returned, without specifying the property name, use the <code>\u2013-prefix</code>, <code>\u2013-suffix</code>, and <code>--infix</code> flags. You can specify more than one <code>--infix</code> value by using a comma separated list. For example, to return properties in the <code>docker</code> namespace that start with <code>engine</code>, end with <code>hostname</code>, and contain <code>LOCAL</code> or <code>REMOTE</code> use the following command, which returns the results in a yaml file by specifying the <code>--format yaml</code> flag in the command: </p> <p>On Mac and Unix:</p> <pre><code>galasactl properties get \\\n--namespace docker --prefix engine --suffix hostname --infix LOCAL,REMOTE \\\n--format yaml\n</code></pre> <p>On Windows (Powershell):</p> <pre><code>galasactl properties get `\n--namespace docker --prefix engine --suffix hostname --infix LOCAL,REMOTE `\n--format yaml\n</code></pre> <p>The <code>--prefix</code>, <code>--suffix</code> and <code>-\u2013infix</code> flags can be used together or separately to retrieve all properties that match the provided criteria.</p> <p>For a complete list of supported parameters, see the galasactl properties get command reference.</p>"},{"location":"docs/ecosystem/ecosystem-manage-cps/#returned-properties","title":"Returned properties","text":"<p>Properties are returned in either <code>summary</code>, <code>yaml</code>, or <code>raw</code> format. </p> <p>The default format of returned properties is summary format. For example:</p> <pre><code>namespace name                    value\ndocker    engine.LOCAL.hostname   127.0.0.1\ndocker    engine.REMOTE.hostname  103.67.89.6\n\nTotal: 2\n</code></pre> <p>The following example shows the format of properties that are returned in a yaml file. As more than one property is returned, the properties are separated in the file by three dashes, <code>---</code>, as shown in the following example:</p> <pre><code>apiVersion: galasa-dev/v1alpha1\nkind: GalasaProperty\nmetadata:\n  name: engine.LOCAL.hostname\n  namespace: docker\ndata:\n  value: 127.0.0.1\n---\napiVersion: galasa-dev/v1alpha1\nkind: GalasaProperty\nmetadata:\n  name: engine.REMOTE.hostname\n  namespace: docker\ndata:\n  value: 103.67.89.6\n</code></pre> <p>The following example shows properties that are returned in <code>raw</code> format (<code>namespace | name | value</code>):</p> <pre><code>docker|engine.LOCAL.hostname|127.0.0.1|docker|engine.REMOTE.hostname|103.67.89.6|\n</code></pre> <p>The following example shows a property in a secure namespace type returned in summary format. The returned property value is masked:</p> <pre><code>namespace name               value\nsecure    property.example   ********\n\nTotal: 1\n</code></pre>"},{"location":"docs/ecosystem/ecosystem-manage-cps/#setting-properties-in-a-namespace","title":"Setting properties in a namespace","text":"<p>You can update a property and its value in a namespace by using the <code>galasactl properties set</code> command. If the property does not exist in that namespace, the command creates the property. You must provide the namespace, the name of the property, and the value of the property in the command in the following example format:</p> <p><code>galasactl properties set --namespace myNamespace --name myName --value myValue</code></p> <p>where: </p> <ul> <li><code>namespace</code> is the namespace in which the property is stored</li> <li><code>name</code> is the name of the property </li> <li><code>value</code> is the property value </li> </ul> <p>A success message is displayed when the property is updated or created.</p> <p>For a complete list of supported parameters, see the galasactl properties set command reference.</p>"},{"location":"docs/ecosystem/ecosystem-manage-cps/#examples-of-setting-properties-in-a-namespace","title":"Examples of setting properties in a namespace","text":"<p>The WebAppIntegrationTest documentation is designed to help you to understand how to set the properties that enable a local test to run in a Galasa Ecosystem.</p> <p>For example, the following CPS properties are set for the Docker Manager when running the <code>WebAppIntegrationTest</code> locally:</p> <pre><code>docker.dse.engine.PRIMARY=LOCAL\ndocker.default.engines=LOCAL\ndocker.engine.LOCAL.hostname=127.0.0.1\ndocker.engine.LOCAL.port=2375\ndocker.engine.LOCAL.max.slots=10\n</code></pre> <p>The first component, <code>docker</code> indicates the namespace. The upper-case components are used to show which part of the property is dynamic, while the lower case is used to define the static parts.</p> <p>You can use the <code>galasactl properties set</code> command to update these properties so that the test can run in the Ecosystem. To use a remote server as a Docker Engine, simply change the default engine from LOCAL to REMOTE and specify the appropriate connection details. No change is required to the test code, only to the CPS properties file.</p> <p>For example, to change the value of the properties in the <code>docker</code> namespace, use the following example commands:</p> <pre><code>galasactl properties set --namespace docker --name dse.engine.PRIMARY --value REMOTE\ngalasactl properties set --namespace docker --name default.engines --value REMOTE\ngalasactl properties set --namespace docker --name engine.REMOTE.hostname --value 103.67.89.6\ngalasactl properties set --namespace docker --name engine.REMOTE.port --value 2987\ngalasactl properties set --namespace docker --name engine.REMOTE.max.slots --value 20\n</code></pre>"},{"location":"docs/ecosystem/ecosystem-manage-cps/#deleting-properties-from-a-namespace","title":"Deleting properties from a namespace","text":"<p>You can delete a property and its associated value in a namespace by using the <code>galasactl properties delete</code> command. You must provide the namespace and the name of the property that you want to delete.  For example:</p> <pre><code>galasactl properties delete --namespace myNamespace --name myName\n</code></pre> <p>where: </p> <ul> <li><code>namespace</code> is the namespace that contains the property to delete</li> <li><code>name</code> is the name of the property you want to delete</li> </ul> <p>A success message is displayed when the property is deleted.</p> <p>For a complete list of supported parameters, see the galasactl properties delete command reference.</p>"},{"location":"docs/ecosystem/ecosystem-manage-creds/","title":"Managing credentials in an Ecosystem","text":"<p>It is likely that a test will need to pass credentials to the application being tested. For example, as HTTP credentials or as username and password values entered onto a 3270 screen. In a Galasa Ecosystem the credentials store, which is hosted in the etcd server, securely provides the credentials (for example, password, username, and personal access token) that are required for a test to run in automation.  </p> <p>You can set a Username, UsernamePassword, Token, or UsernameToken secret in the credentials store by using the Galasa CLI tool's <code>secrets</code> commands. The ability to set these properties means that you can supply test cases with the credentials and tokens that they need to run.</p> <p>The following examples show how you can update the credentials store, and will refer to credentials as secrets. The example commands that are provided in the following sections assume that the <code>GALASA_BOOTSTRAP</code> environment variable is set, so the <code>--bootstrap</code> flag is not required in the command.</p>"},{"location":"docs/ecosystem/ecosystem-manage-creds/#creating-and-updating-secrets","title":"Creating and updating secrets","text":"<p>The <code>galasactl secrets set</code> command can be used to create or update secrets in the credentials store. The command's <code>--username</code>, <code>--password</code>, and <code>--token</code> flags can be used in different combinations to create different types of secret.</p> <p>Optionally, a description can be provided when setting secrets using the <code>--description</code> flag to provide useful information as to what the secrets are used for.</p> <p>For example, a UsernamePassword secret can be created by supplying <code>--username</code> and <code>--password</code>:</p> <pre><code>galasactl secrets set --name SYSTEM1 --username \"my-username\" --password \"my-password\" --description \"an example secret\"\n</code></pre> <p>A UsernameToken secret can be created by supplying <code>--username</code> and <code>--token</code>:</p> <pre><code>galasactl secrets set --name SYSTEM1 --username \"my-username\" --token \"my-token\"\n</code></pre> <p>A Token secret can be created by supplying <code>--token</code> on its own:</p> <pre><code>galasactl secrets set --name SYSTEM1 --token \"my-token\"\n</code></pre> <p>A Username secret can be created by supplying <code>--username</code> on its own:</p> <pre><code>galasactl secrets set --name SYSTEM1 --username \"my-username\"\n</code></pre> <p>Base64-encoded values can be supplied using the <code>--base64-username</code>, <code>--base64-password</code>, and <code>--base64-token</code> flags. These base64 flags can be used with the non-encoded flags described above to supply values in different encoding schemes. However, you cannot provide the same value in multiple encoding schemes (e.g. using <code>--base64-username</code> and <code>--username</code> in the same command).</p> <p>For example, to create a UsernamePassword secret where both the username and password are base64-encoded:</p> <pre><code>galasactl secrets set --name SYSTEM1 --base64-username \"my-base64-username\" --base64-password \"my-base64-password\"\n</code></pre> <p>To create a UsernameToken secret where only the token is base64-encoded:</p> <pre><code>galasactl secrets set --name SYSTEM1 --username \"my-base64-username\" --base64-token \"my-base64-token\"\n</code></pre> <p>Once a secret has been created, you can change the type of the secret by supplying your desired secret type using the <code>--type</code> flag. When supplying the <code>--type</code> flag, all values for the new secret type must be provided. To find out what secret types are supported, run <code>galasactl secrets set --help</code>.</p> <p>For example, to create a UsernamePassword secret and then change it to a Token secret:</p> <pre><code>galasactl secrets set --name SYSTEM1 --username \"my-username\" --password \"my-password\"\ngalasactl secrets set --name SYSTEM1 --token \"my-token\" --type Token\n</code></pre> <p>Updated credentials are now available for a test to run in automation on a Galasa Ecosystem.</p> <p>For a complete list of supported parameters, see the galasactl secrets set command reference.</p>"},{"location":"docs/ecosystem/ecosystem-manage-creds/#getting-secrets","title":"Getting secrets","text":"<p>You can use the <code>galasactl secrets get</code> command to get secrets stored in the credentials store to verify that the secrets exist and are populated correctly. You can also filter results to retrieve a specific secret by providing its name in <code>galasactl secrets get</code> commands.</p> <p>The following table shows the available output formats that can be provided as part of the <code>galasactl secrets get</code> command:</p> Name Description <code>--format summary</code> The default format is summary. Summary format is useful if you need a quick, high-level overview. If you omit the <code>--format</code> flag in the command, results are returned in summary format. You can set the summary format explicitly by setting the <code>--format summary</code> flag in the <code>galasactl secrets get</code> command. <code>--format yaml</code> The results from <code>galasactl secrets get</code> are returned as GalasaSecret resources in YAML format. This YAML content can then be used in <code>galasactl resources</code> commands to create, update, and delete secrets using a YAML file. See Configuring an Ecosystem using resource files for more details. <p>For example, you can use the following command to retrieve all secrets in <code>yaml</code> format:</p> <pre><code>galasactl secrets get --format yaml\n</code></pre> <p>For a complete list of supported parameters, see the galasactl secrets get command reference.</p>"},{"location":"docs/ecosystem/ecosystem-manage-creds/#getting-all-secrets","title":"Getting all secrets","text":"<p>To retrieve all secrets stored in a Galasa Ecosystem, run the following command:</p> <pre><code>galasactl secrets get\n</code></pre> <p>This will display the retrieved secrets in a summary format:</p> <pre><code>name    type             last-updated(UTC)   last-updated-by description\nSIMBANK UsernamePassword 2024-11-01 10:43:06 galasa-user     credentials for simbank\nSYSTEM2 Token            2024-11-01 10:43:41 galasa-user2    example access token\nSYSTEM1 Username         2024-11-01 10:42:46 galasa-user3    example secret\n\nTotal:3\n</code></pre>"},{"location":"docs/ecosystem/ecosystem-manage-creds/#get-a-secret-by-name","title":"Get a secret by name","text":"<p>To retrieve a secret with a specific name, use the following example command:</p> <pre><code>galasactl secrets get --name {mysecret}\n</code></pre> <p>where <code>{mysecret}</code> is the name of the secret that you want to get.</p> <p>For example, to view a secret named <code>SYSTEM1</code>, run the following command:</p> <pre><code>galasactl secrets get --name SYSTEM1\n</code></pre> <p>The following example shows the returned secret:</p> <pre><code>name    type             description       last-updated(UTC)   last-updated-by\nSYSTEM1 UsernamePassword an example secret 2024-10-30 16:23:49 galasa-user\n\nTotal:1\n</code></pre>"},{"location":"docs/ecosystem/ecosystem-manage-creds/#deleting-secrets","title":"Deleting secrets","text":"<p>When a secret is no longer used or required by tests, it can be deleted from the Galasa Ecosystem using the <code>galasactl secrets delete</code> command, supplying the name of the secret as part of the command.</p> <p>To delete a specific secret, use the following command:</p> <pre><code>galasactl secrets delete --name {mysecret}\n</code></pre> <p>where: <code>{mysecret}</code> is the name of the secret that you want to delete.</p> <p>For example, to delete a secret called <code>SIMBANK</code>, run the following command:</p> <pre><code>galasactl secrets delete --name SIMBANK\n</code></pre> <p>If the secret does not exist, an error will be displayed to indicate that the secret could not be found.</p> <p>For a complete list of supported parameters, see the galasactl secrets delete command reference.</p>"},{"location":"docs/ecosystem/ecosystem-manage-resources/","title":"Configuring an Ecosystem using resource files","text":"<p>You might want to create or update a number of different Galasa properties and associated values at the same time, for example to configure a different Galasa Ecosystem. A good way to do this is by using a YAML file containing Galasa resources and their associated values to set the configuration of your Ecosystem, as described in the Creating and updating resources using a YAML resource file section.</p>"},{"location":"docs/ecosystem/ecosystem-manage-resources/#configuration-properties-as-galasaproperty-resources","title":"Configuration Properties as GalasaProperty resources","text":"<p>The topic Managing integrated test runs describes how to use the <code>galasactl properties get</code> command with the <code>--format yaml</code> flag specified to extract a YAML file which describes Galasa properties and property values. </p> <p>If more than one property is returned, each property is separated in the file by three dashes, <code>---</code>, as shown in the following example: </p> <pre><code>apiVersion: galasa-dev/v1alpha1\nkind: GalasaProperty\nmetadata:\n  name: engine.LOCAL.hostname\n  namespace: docker\ndata:\n  value: 127.0.0.1\n---\napiVersion: galasa-dev/v1alpha1\nkind: GalasaProperty\nmetadata:\n  name: engine.REMOTE.hostname\n  namespace: docker\ndata:\n  value: 103.67.89.6\n</code></pre> <p>Alternatively, if you want to create a new YAML file, you can do so but you must use the following example format:</p> <pre><code>apiVersion: galasa-dev/v1alpha1\nkind: GalasaProperty\nmetadata:\n  name: my.property1\n  namespace: myNamespace1\ndata:\n  value: myValue1\n---\napiVersion: galasa-dev/v1alpha1\nkind: GalasaProperty\nmetadata:\n  name: my.property2\n  namespace: myNamespace2\ndata:\n  value: myValue2\n</code></pre> <p>where: - <code>apiVersion</code> is the version of the API that you are using - <code>name</code> is the name of the property that you want to create or update - <code>namespace</code> is the namespace in which the property is contained in the configuration properties store (cps.properties).  - <code>value</code> is the value that you want to assign to the specified property in the specified namespace</p> <p>You can define multiple properties and values in the same YAML file by separating them using three dashes, <code>---</code>, as shown in the example.</p> <p>You can save the file with a <code>.yaml</code> or <code>.yml</code> file extension.</p>"},{"location":"docs/ecosystem/ecosystem-manage-resources/#credentials-as-galasasecret-resources","title":"Credentials as GalasaSecret resources","text":"<p>The topic Managing credentials in an Ecosystem describes how to use the <code>galasactl secrets get</code> command with the <code>--format yaml</code> flag specified to extract a YAML file which describes Galasa secrets.</p> <p>If more than one secret is returned, each secret is separated in the file by three dashes, <code>---</code>, as shown in the following example: </p> <pre><code>apiVersion: galasa-dev/v1alpha1\nkind: GalasaSecret\nmetadata:\n  name: SYSTEM1\n  type: UsernamePassword\n  encoding: base64\n  description: an example username and password secret\n  lastUpdatedTime:\n  lastUpdatedBy: myuser\ndata:\n  username: &lt;base64-encoded-username&gt;\n  password: &lt;base64-encoded-password&gt;\n---\napiVersion: galasa-dev/v1alpha1\nkind: GalasaSecret\nmetadata:\n  name: SYSTEM2\n  type: Token\n  encoding: base64\n  description: an example token secret\n  lastUpdatedTime:\n  lastUpdatedBy: anotheruser\ndata:\n  token: &lt;base64-encoded-token&gt;\n</code></pre> <p>You can update the values in this YAML file and then create, update, or apply those updates by using the galasactl command line tool, as described in the following section. </p> <p>Alternatively, if you want to create a new YAML file, you can do so using the following example format:</p> <pre><code>apiVersion: galasa-dev/v1alpha1\nkind: GalasaSecret\nmetadata:\n  name: SYSTEM1\n  type: UsernameToken\n  description: an example username and token secret\ndata:\n  username: &lt;username&gt;\n  token: &lt;token&gt;\n---\napiVersion: galasa-dev/v1alpha1\nkind: GalasaSecret\nmetadata:\n  name: SYSTEM2\n  type: Username\n  encoding: base64\n  description: an example username secret\ndata:\n  username: &lt;base64-encoded-username&gt;\n</code></pre> <p>where: - <code>apiVersion</code> is the version of the API that you are using - <code>name</code> is the name of the secret that you want to create or update - <code>type</code> is the type of secret that you want to create or update. Supported values are: <code>Username</code>, <code>UsernamePassword</code>, <code>UsernameToken</code>, and <code>Token</code> - <code>encoding</code> is an optional encoding scheme applied to all fields in the <code>data</code> section. The currently available value for this is <code>base64</code>. If this is not provided, then the fields in the <code>data</code> section are assumed to be provided without any encoding applied - <code>description</code> is an optional field that allows you to supply a description associated with the secret being created or updated - <code>username</code> is the username value to be set for a secret, and is provided when the <code>type</code> is <code>Username</code>, <code>UsernamePassword</code>, or <code>UsernameToken</code> - <code>password</code> is the password value to be set for a secret, and is provided when the <code>type</code> is <code>UsernamePassword</code> - <code>token</code> is the token value to be set for a secret, and is provided when the <code>type</code> is <code>Token</code> or <code>UsernameToken</code></p> <p>You can define multiple secrets in the same YAML file by separating them using three dashes, <code>---</code>, as shown in the example.</p> <p>You can save the file with a <code>.yaml</code> or <code>.yml</code> file extension.</p>"},{"location":"docs/ecosystem/ecosystem-manage-resources/#creating-and-updating-resources-using-a-yaml-file","title":"Creating and updating resources using a YAML file","text":"<p>You can use the galasactl command line tool to submit a YAML file to create new Galasa resources, including properties and credentials, or to update existing ones. The YAML files can contain different types of Galasa resources, where each resource is separated by three dashes <code>---</code>. For example, a GalasaProperty resource and a GalasaSecret resource can both be created using the following format:</p> <pre><code>apiVersion: galasa-dev/v1alpha1\nkind: GalasaSecret\nmetadata:\n  name: SYSTEM1\n  type: Token\n  description: an example token secret\ndata:\n  token: myToken\n---\napiVersion: galasa-dev/v1alpha1\nkind: GalasaProperty\nmetadata:\n  name: my.property1\n  namespace: myNamespace1\ndata:\n  value: myValue1\n</code></pre> <p>Use the following command to create Galasa resources by using a YAML file called <code>myFile.yaml</code>:</p> <pre><code>galasactl resources create -f myFile.yaml\n</code></pre> <p>Use the following command to update Galasa resources by using a YAML file called <code>myFile.yaml</code>:</p> <pre><code>galasactl resources update -f myFile.yaml\n</code></pre> <p>Use the following command to create a new Galasa resource if the resource does not exist or update an existing resource by using a YAML file called <code>myFile.yaml</code>:</p> <pre><code>galasactl resources apply -f myFile.yaml\n</code></pre> <p>An error message is returned if the action is not able to complete successfully. For example, if a property could not be created in a particular namespace because the property already exists in that namespace.</p>"},{"location":"docs/ecosystem/ecosystem-manage-resources/#deleting-resources-using-a-yaml-file","title":"Deleting resources using a YAML file","text":"<p>When maintaining an Ecosystem, you might have a YAML file containing Galasa property resource definitions and want to delete a corresponding set of Galasa resources stored on the server in an Ecosystem. You can do this by using the following command: </p> <pre><code>galasactl resources delete -f {filename}\n</code></pre> <p>where:</p> <p><code>{filename}</code> is the name of the YAML file that contains the list of Galasa resources that you want to delete.</p> <p>For example, you might have a list of resources that you want to delete in a file called <code>resources_to_delete.yaml</code>. You can delete those resources by running the following command:</p> <pre><code>galasactl resources delete -f resources_to_delete.yaml\n</code></pre> <p>For a complete list of supported parameters, see the galasactl resources command reference.</p>"},{"location":"docs/ecosystem/ecosystem-managing-encryption-keys/","title":"Managing Ecosystem encryption keys","text":"<p>To maintain the security of your Galasa Ecosystem, you may wish to replace the encryption key being used to encrypt credentials in the Galasa Ecosystem's credentials store with a new encryption key, and re-encrypt all your existing credentials using the new key.</p> <p>Backup existing credentials before proceeding</p> <p>Before proceeding to rotate encryption keys, it is highly recommended to make a backup of the existing credentials stored in your Galasa Ecosystem by running the following command using the Galasa CLI tool:</p> <pre><code>galasactl secrets get --format yaml &gt; /path/to/backup/file.yaml\n</code></pre> <p>where <code>/path/to/backup/file.yaml</code> is either an absolute or relative path of your choice to a file where the backup will be stored.</p>"},{"location":"docs/ecosystem/ecosystem-managing-encryption-keys/#prerequisites","title":"Prerequisites","text":"<p>The following command-line utilities must be installed:</p> <ul> <li> <p>kubectl (v1.30.3 or later){target=\"_blank\"}</p> </li> <li> <p>galasactl (0.38.0 or later)</p> </li> <li> <p>openssl (3.3.2 or later)</p> </li> </ul> <p>You must have the correct permissions to read and update Kubernetes Secrets in the Kubernetes namespace that you have installed your Galasa Ecosystem within.</p> <p>You must also have a valid personal access token for your Galasa Ecosystem set on your machine so that you can retrieve and update secrets with <code>galasactl</code>.</p>"},{"location":"docs/ecosystem/ecosystem-managing-encryption-keys/#automated-steps","title":"Automated steps","text":"<p>For Linux and macOS, you can download the rotate-encryption-keys.sh script for your installed Galasa Ecosystem version from the Galasa Helm repository's releases page and run the script via the command-line to simplify the process of rotating encryption keys and re-encrypting credentials.</p> <p>The following flags can be supplied when running the script:</p> <ul> <li> <p><code>--release-name &lt;name&gt;</code> Required. The Helm release name provided when installing the Galasa Ecosystem Helm chart (see Installing your Galasa Ecosystem)</p> </li> <li> <p><code>--namespace &lt;namespace&gt;</code> Optional. The Kubernetes namespace where your Galasa Ecosystem is installed</p> </li> <li> <p><code>--bootstrap &lt;bootstrap-url&gt;</code> Optional. The bootstrap URL of the Galasa Ecosystem that is being serviced. Not required if the <code>GALASA_BOOTSTRAP</code> environment variable is set and is pointing to the correct bootstrap URL. Overrides the existing <code>GALASA_BOOTSTRAP</code> environment variable value if set</p> </li> </ul> <p>For example:</p> <pre><code>./rotate-encryption-keys.sh --release-name example --namespace galasa-dev\n</code></pre> <p>The <code>rotate-encryption-keys.sh</code> script will automatically update the current encryption key with a new one, and then restart your Galasa Ecosystem's API and engine controller pods so that they can pick up the new encryption key. After rotating the encryption keys, the script will re-encrypt the existing secrets in your Galasa Ecosystem using the newly activated encryption key.</p> <p>Once the encryption keys have been rotated and the existing secrets have been re-encrypted, the script will clear the fallback decryption keys list and restart the API and engine controller pods for a final time to keep the Galasa services in sync with the contents of the encryption keys secret.</p>"},{"location":"docs/ecosystem/ecosystem-managing-encryption-keys/#manual-steps","title":"Manual steps","text":"<p>If the <code>rotate-encryption-keys.sh</code> script fails or if you are on Windows and cannot run the script, you can manually rotate encryption keys by performing the following steps.</p> <p>This guide assumes <code>kubectl</code> is configured to manage resources in the namespace that your Galasa Ecosystem is installed within, so the <code>--namespace</code> flag is not required when running <code>kubectl</code> commands.</p> <p>This guide also assumes that the <code>GALASA_BOOTSTRAP</code> environment variable is set, so the <code>--bootstrap</code> flag is not required when running <code>galasactl</code> commands.</p> <ol> <li> <p>Get all the existing secrets from your Galasa Ecosystem by running:</p> <pre><code>galasactl secrets get --format yaml\n</code></pre> <p>Store these secrets in a <code>.yaml</code> or <code>.yml</code> file so that you can re-encrypt them after rotating the encryption keys.</p> </li> <li> <p>Find the name of the Kubernetes Secret containing your Galasa Ecosystem's encryption keys by running:</p> <pre><code>kubectl get secrets\n</code></pre> <p>The secret's name should be of the form <code>{release-name}-encryption-secret</code>, where <code>{release-name}</code> is the Helm release name provided when installing the Galasa Ecosystem Helm chart.</p> </li> <li> <p>Get the existing encryption keys data for your Galasa Ecosystem by running:</p> <pre><code>kubectl get secret {encryption-secret-name} --output jsonpath='{ .data.encryption-keys\\.yaml }' | openssl base64 -d -A\n</code></pre> <p>where <code>{encryption-secret-name}</code> is the name of the Kubernetes secret retrieved in step 2. The output should look like the following:</p> <pre><code>encryptionKey: &lt;existing-encryption-key&gt;\nfallbackDecryptionKeys: []\n</code></pre> <p>Place the output into a file.</p> </li> <li> <p>Generate a new encryption key by running:</p> <pre><code>openssl rand -base64 32\n</code></pre> </li> <li> <p>In the file created at the end of step 3, move the existing <code>encryptionKey</code> value into the <code>fallbackDecryptionKeys</code> list and place the newly generated encryption key into the <code>encryptionKey</code> field. The file should now look like this:</p> <pre><code>encryptionKey: &lt;newly-generated-encryption-key&gt;\nfallbackDecryptionKeys:\n- &lt;existing-encryption-key&gt;\n</code></pre> <p>where <code>&lt;newly-generated-encryption-key&gt;</code> is the new encryption key generated in step 5 and <code>&lt;existing-encryption-key&gt;</code> is the old encryption key retrieved in step 3.</p> </li> <li> <p>Base64-encode the file contents by running the following command:</p> <pre><code>openssl base64 -in &lt;encryption-keys-file&gt;\n</code></pre> <p>where <code>&lt;encryption-keys-file&gt;</code> is an absolute or relative path to the file created in step 3.</p> <p>Record the base64-encoded output, making sure there are no spaces or line breaks in the recorded output.</p> </li> <li> <p>Update the existing Kubernetes Secret with the rotated keys by running:</p> <pre><code>kubectl patch secret {encryption-secret-name} --type='json' -p=\"[{'op': 'replace', 'path': '/data/encryption-keys.yaml', 'value': '&lt;base64-encoded-encryption-keys&gt;'}]\"\n</code></pre> <p>where <code>{encryption-secret-name}</code> is the name of the Kubernetes secret retrieved in step 2, and <code>&lt;base64-encoded-encryption-keys&gt;</code> is the output recorded in step 6.</p> </li> <li> <p>Restart the Galasa Ecosystem's API server deployment by running:</p> <pre><code>kubectl rollout restart deployment {release-name}-api\nkubectl rollout status deployment {release-name}-api\n</code></pre> <p>where <code>{release-name}</code> is the name of the Helm release provided when installing the Galasa Ecosystem Helm chart.</p> </li> <li> <p>Restart the Galasa Ecosystem's engine controller deployment by running:</p> <pre><code>kubectl rollout restart deployment {release-name}-engine-controller\nkubectl rollout status deployment {release-name}-engine-controller\n</code></pre> <p>where <code>{release-name}</code> is the name of the Helm release provided when installing the Galasa Ecosystem Helm chart.</p> </li> <li> <p>Once both the API server and engine controller have been restarted successfully, you can re-encrypt your existing secrets using the YAML file you created in step 1, by running:</p> <pre><code>galasactl resources apply -f &lt;secrets-yaml-file&gt;\n</code></pre> <p>where <code>&lt;secrets-yaml-file&gt;</code> is an absolute or relative path to the YAML file created at the end of step 1.</p> </li> </ol> <p>Your Galasa Ecosystem will now use the newly generated encryption key to encrypt and decrypt secrets until the next time it is rotated.</p> <p>To verify that your secrets can still be read correctly, you can run <code>galasactl secrets get --format yaml</code> again and compare the YAML output with the content of YAML file that you applied in step 10. If the output is the same, then the secrets have been re-encrypted successfully.</p>"},{"location":"docs/ecosystem/ecosystem-role-based-access/","title":"Role Based Access Control in Galasa","text":"<p>Role Based Access Control (RBAC) is a widely adopted mechanism of assigning roles to users of a system which grants such users permissions to perform some capability dictated by the role(s) they have been assigned. Here we discuss the Galasa implementation of RBAC.</p>"},{"location":"docs/ecosystem/ecosystem-role-based-access/#why-do-we-need-role-based-access-control","title":"Why do we need Role Based Access Control?","text":"<p>Some actions that can be performed on the Galasa Service are powerful and dangerous, such as deleting CPS properties, secrets, users or other resources. Giving every user of the Galasa service the ability to perform those actions is inviting disaster from inexperienced or incautious users who are not aware of the consequences of their actions. Deleted resources could mean data being lost forever, which bears a cost to work out what was removed, and how to re-create it again. It would be far better to prevent those events occurring in the first place.</p> <p>To limit the risk of such events occurring, the Galasa Service provides some Role Based Access (RBAC) mechanisms to ensure users responsible for administering the service can perform these powerful actions, while other users are denied access to them.</p>"},{"location":"docs/ecosystem/ecosystem-role-based-access/#understanding-the-galasa-rbac-model","title":"Understanding the Galasa RBAC model","text":"<p>The Galasa Service offers a list of \"actions\". Each one relates to something which can be performed on the Galasa Service.</p> <p>Galasa has a concept of a \"role\", such that each role has a name and description, but also has a list of actions which someone can perform when that user has been assigned this role.</p> <p>Each user has one such role, thereby indirectly associating each user with a list of actions that user can perform.</p> <p>When a personal access token is used, that token is associated with the user identity the token was created for, and so also has an indirect association with a list of actions which can be performed by a client program using that access token.</p> <p>If the user has an action in the role they are assigned, then that user can perform that action.</p> <p>For example, an \"admin\" role exists with an action CPS_PROPERTY_SET which allows a user with the \"admin\" role to set a CPS property. A \"tester\" role does not list that action, so a user with the \"tester\" role cannot set a CPS property.</p> <p>Currently, the list of \"actions\" and \"roles\" are fixed within the system.</p>"},{"location":"docs/ecosystem/ecosystem-role-based-access/#available-actions","title":"Available Actions","text":"<p>This table shows the list of built-in actions:</p> Action What it allows you to do CPS_PROPERTIES_DELETE Allows the deletion of CPS properties CPS_PROPERTIES_SET Set a CPS property value GENERAL_API_ACCESS Be able to perform basic actions on the system via the REST api RUNS_DELETE_OTHER_USERS Allows the user to delete runs that other users submitted SECRETS_DELETE Allows the deletion of secrets SECRETS_GET_UNREDACTED_VALUES Allows you to get secrets which contain the real secret value, rather than a redacted value SECRETS_SET Allows setting of secrets USER_EDIT_OTHER Allows the editing of a different user on the system. This includes changing their role, deleting personal access tokens, or deleting the user completely"},{"location":"docs/ecosystem/ecosystem-role-based-access/#available-roles","title":"Available Roles","text":"<p>This table shows the list of built-in roles:</p> Role name Description Actions someone with this role can perform deactivated A user who has no permissions at all, and is able to do nothing on the Galasa service none tester A user who writes and runs tests, looks at the test results and diagnoses errors in the system under test GENERAL_API_ACCESS admin A Galasa service administrator. Able to do any operation supported by the Galasa service all owner The owner of the Galasa service. Such users have all the rights of an administrator, but nobody can delete their id or change their role without changing the kubernetes configuration all"},{"location":"docs/ecosystem/ecosystem-role-based-access/#constraints","title":"Constraints","text":"<p>The system also has some constraints on how these resources can be set up and used:</p> <ul> <li> <p>Nobody can change their own \"role\", assigning a different role to yourself is not permitted</p> </li> <li> <p>New users on the system are assigned a default role when they first login to the Galasa service. This role is configurable. More details on how to configure this default role is described in section how to set the default user role.</p> </li> <li> <p>One or more users can be assigned the <code>owner</code> role. Such users are privileged because an administrator role cannot directly update their role away from <code>owner</code> using the standard mechanisms. Similarly, such \"owners\" of the Galasa service cannot be removed, even by another \"owner\" without changing kubernetes configuration.</p> </li> <li> <p>An administrator cannot delete their own user record. This constraint attempts to make sure that there is at least one owner or administrator on the system. If nobody active in your organisation has <code>admin</code> or <code>owner</code> rights, then a new owner of the service can be nominated using the Galasa service install/update instructions. See How to nominate a user as the Galasa service <code>owner</code>.</p> </li> <li> <p>An administrator cannot change their own role.</p> </li> <li> <p>Not even administrators can change the role of a user nominated as an <code>owner</code>.</p> </li> <li> <p>The <code>owner</code> role can only be assigned using the Helm property, not via the command-line or REST interface.</p> </li> </ul>"},{"location":"docs/ecosystem/ecosystem-role-based-access/#upgrading-to-a-version-of-galasa-which-supports-rbac","title":"Upgrading to a version of Galasa which supports RBAC","text":"<p>When upgrading your Galasa service to a version 0.42.0 or later, any existing users will be assigned the role of <code>admin</code> without any extra action being required.</p> <p>Under such circumstances you may wish to assign the role of <code>tester</code> to anyone who now should not have administration rights.</p> <p>Upgrading the existing Galasa service will therefore not require any <code>owner</code> to be set up, because your system will already have multiple administrator users with the <code>admin</code> role.</p>"},{"location":"docs/ecosystem/ecosystem-role-based-access/#setting-up-rbac-when-you-install-galasa-into-kubernetes","title":"Setting up RBAC when you install Galasa into Kubernetes","text":""},{"location":"docs/ecosystem/ecosystem-role-based-access/#how-to-nominate-a-user-as-the-galasa-service-owner","title":"How to nominate a user as the Galasa service <code>owner</code>","text":"<p>An \"owner\" of the Galasa service is a user who has been nominated as the owner of the service, and who has the <code>owner</code> RBAC role.</p> <p>This nomination is made at the time the Galasa service is first installed into the Kubernetes namespace, or  when it is subsequently updated using the Galasa Helm chart.</p> <p>To nominate a user as an <code>owner</code> you need to set the property in the Helm values file when the Galasa service is installed or updated.</p> <p>For example, in the <code>.values.yaml</code> file used by Helm:</p> <pre><code>#\n# The list of login ids of the Galasa service owner(s), comma-separated.\n# If a user login id appears in this list, the user will appear to have the 'owner' role, rather than \n# their normal role.\n#\n# Roles of owner user records cannot be changed. Without changing the configuration at the Kubernetes level.\n# \n# The users nominated here will always have a role of 'owner'.\n#\n# If the Galasa service owners leave the organisation, or are otherwise unable to administer the system any longer,\n# someone with access to kubernetes can change this value and the user specified will then appear to have the role\n# of owner.\n#\n# Multiple owners can be specified. eg: \"user1, user2\". All users mentioned will have the 'owner' role until they are \n# removed from the list\n#\n# If your Galasa service already has a user with the 'admin' role, the `owner` role may not be required.\ngalasaOwnersLoginIds: \"\"\n</code></pre> <p>To install the Galasa service, it may be necessary to nominate an <code>owner</code> using this mechanism initially, so  that when such a user logs in, they are able to promote other trusted users to the position of <code>admin</code>.</p> <p>After that point, the Kubernetes configuration can be changed to remove the <code>owner</code> or not.</p>"},{"location":"docs/ecosystem/ecosystem-role-based-access/#how-to-set-the-default-user-role","title":"How to set the default user role","text":"<p>When a new user initially logs into the Galasa web user interface, a user record is created, and that user is assigned a default user role.</p> <p>The default user role is configurable by the system installer, who can set a property in the Helm values file when the Galasa service is installed or updated.</p> <p>For example, in the <code>.values</code> file used by helm:</p> <pre><code>#\n#  \n# New users logging into the system get a user record created and that user is assigned a role\n# by default. It should be the name of one of the roles on the system.\n# Suggested values are:\n#   \"deactivated\" - After initial logon, an administrator will need to set their most apropriate role \n#                   before this new user can access any function within the Galasa service.\n#   \"tester\"      - After initial logon, the user is classified as a tester, so can launch tests and \n#                   see test results, but cannot administer the system.\n#   \"admin\"       - A user with access to all the functionality provided by Galasa.\n#                   We recommend only using this setting if you want every user to be an administrator\n#                   (unlikely).\ngalasaDefaultUserRole: \"tester\"\n</code></pre> <p>The default will be set to \"tester\" unless the Galasa systems administrator wishes to change it.</p>"},{"location":"docs/ecosystem/ecosystem-role-based-access/#using-the-galasactl-command-line-tool-to-view-roles","title":"Using the <code>galasactl</code> command-line tool to view roles","text":"<p>To list roles on the service:</p> <pre><code>&gt; galasactl roles get\nname        description\nadmin       Administrator access\ndeactivated User has no access\ntester      Test developer and runner\n\nTotal:3\n</code></pre> <p>A role can also be queried in yaml format, where it is possible to see the list of actions that role entitles the user to perform:</p> <pre><code>&gt; galasactl roles get --format yaml --name admin\napiVersion: galasa-dev/v1alpha1\nkind: GalasaRole\nmetadata:\n    id: \"2\"\n    name: admin\n    description: Administrator access\n    url: http://my-server:8080/rbac/roles/2\ndata:\n    actions:\n        - CPS_PROPERTIES_SET\n        - GENERAL_API_ACCESS\n        - SECRETS_GET_UNREDACTED_VALUES\n        - USER_ROLE_UPDATE_ANY\n        ...etc\n</code></pre>"},{"location":"docs/ecosystem/ecosystem-role-based-access/#using-the-galasactl-command-line-tool-assigning-a-role-to-a-user","title":"Using the <code>galasactl</code> command-line tool assigning a \"role\" to a user","text":"<p>The user role can be listed by getting the user data. For example:</p> <pre><code>&gt; galasactl users get --name userName1\nlogin-id  role   web-last-login(UTC) rest-api-last-login(UTC)\nuserName1 tester 2025-01-22 14:09    2025-01-22 23:15\n\nTotal:1\n</code></pre> <p>If someone has the <code>USER_ROLE_UPDATE_ANY</code> action, then they are able to do the following to change the role of a different user.</p> <pre><code>galasactl users set --name userName1 --role deactivated\n</code></pre>"},{"location":"docs/ecosystem/ecosystem-role-based-access/#using-the-galasa-web-user-interface-to-view-your-own-user-role","title":"Using the Galasa web user interface to view your own user role","text":"<p>The Web user interface for Galasa can be used to view your own user role. Navigate to the \"My Settings\" page.</p>"},{"location":"docs/faqs/","title":"Frequently asked questions","text":"<p>Use the following sections to scan for questions and problems that have been raised previously, and how these have been answered and resolved.</p>"},{"location":"docs/faqs/#how-can-i-generate-screenshot-output-when-running-my-tests-locally","title":"How can I generate screenshot output when running my tests locally?","text":"<p>You can generate screenshot output by setting the <code>zos3270.terminal.output</code> property in your <code>cps.properties</code> file or your <code>overrides.properties</code> file. For example, to generate screenshot output in json and png format, set the property to <code>zos3270.terminal.output=json,png</code>. </p> <p>If you used the <code>galasactl local init</code> command to initialise your environment, the following setting should be in the <code>cps.properties</code> file already, so you can un-comment the line <code>zos3270.terminal.output=json,png</code> by removing the hash symbol (<code>#</code>), as shown in the following example:</p> <pre><code>#-------------------------------------------------------------------------\n# zos3270.terminal.output\n#\n# Controls which output format(s) any 3270 traffic uses when creating artifact files\n# in the Result Archive Store (RAS).\n#\n# Supported values are 'json' or 'png' or both.\n# \n# Default for a locally-launched JVM test is both.\n#\n# Example:\nzos3270.terminal.output=json,png\n</code></pre>"},{"location":"docs/faqs/#what-function-can-i-use-to-clear-a-cics-screen-in-a-3270-terminal","title":"What function can I use to clear a CICS screen in a 3270 terminal?","text":"<p>If your terminal object is of type <code>ITerminal</code> you can use the <code>terminal.clear().waitForKeyboard()</code> method in your test code. </p> <p>If your terminal object is of type <code>ICicsTerminal</code> you can use the method <code>resetAndClear()</code>  as this method has a slightly different implementation and checks for a clear screen before beginning to type again.</p>"},{"location":"docs/faqs/#are-there-any-ivt-test-cases-or-javadoc-that-i-can-look-at-for-samples-of-test-code-methods","title":"Are there any IVT test cases or Javadoc that I can look at for samples of test code / methods?","text":"<p>Yes, you can view the installation verification tests (IVTs) for the Managers in GitHub.</p> <p>You can find the links to the Javadoc API documentation for all the Galasa Managers on the overview page.</p>"},{"location":"docs/faqs/#can-i-generate-run-reports-with-logs-whist-running-galasa-tests","title":"Can I generate run reports with logs whist running Galasa tests?","text":"<p>If you are using the galasactl command-line tool to launch tests, you can specify the <code>--reportjson</code>, <code>--reportjunit</code> , or <code>--reportyaml</code> flags to get a <code>json</code>, <code>junit</code> or <code>yaml</code> report. Run log output is always captured in the <code>{GALASA_HOME}/ras/{run-id}</code>, and you can turn on debug-output to the command-line tool using <code>--log -</code> (if you want to see it on the screen), or <code>--log {filename}</code> if you want the log information captured into a file.</p>"},{"location":"docs/faqs/#does-galasa-support-multiple-terminals","title":"Does Galasa support multiple terminals?","text":"<p>Yes, you can declare the number of terminals you need in the test class and use different tags to hook them up to different z/OS images.</p>"},{"location":"docs/faqs/#what-is-the-purpose-of-imagetag","title":"What is the purpose of <code>imageTag</code>?","text":"<p>The <code>imageTag</code> is a symbolic label in your testcase source code which maps onto some configuration. <code>imageTag</code> is useful because if the configuration needs to change, it means that you don't have to go back and change the source code and re-build/re-distribute it. You can simply change the configuration it uses when running.</p> <p>The purpose an imageTag is to give the Galasa framework a label that it can use to tie-up with the CPS properties that are used by the Manager. For example, the Terminal Manager. Your CPS properties have a mapping from the <code>imageTag</code> label to the actual system that is used. When you generate a project with the <code>galasactl project create</code> command, it creates a <code>cps.properties</code> file as shown in the following example:</p> <pre><code># An example of properties required to identify and configue a z/OS resource\n# In this case, our z/OS system is on a cluster, which has two images.\n# Here we define a user-tag called CLUSTERA.\n# This defines a user-tag of IMAGEA and IMAGEB.\n# The names are chosen to be meaningful, and to give us a way of linking \n# related properties using parts of the name.\n\n# zos.cluster.CLUSTERA.images=IMAGEA,IMAGEB\n\n## Here are some physical values which can be looked up for the IMAGEA system:\n# zos.image.IMAGEA.default.hostname=dev.galasa.system1\n# zos.image.IMAGEA.ipv4.hostname=dev.galasa.system1\n# zos.image.IMAGEA.telnet.port=992\n# zos.image.IMAGEA.telnet.tls=true\n# zos.image.IMAGEA.credentials=MY_KEY_INTO_GALASA_CREDENTIALS_STORE\n# zos.image.IMAGEA.max.slots=4\n\n## Here are some physical values which can be looked up for the IMAGEB system\n# zos.image.IMAGEB.default.hostname=dev.galasa.system2\n# zos.image.IMAGEB.ipv4.hostname=dev.galasa.system2\n# zos.image.IMAGEB.telnet.port=992\n# zos.image.IMAGEB.telnet.tls=true\n# zos.image.IMAGEB.credentials=MY_KEY_INTO_GALASA_CREDENTIALS_STORE\n# zos.image.IMAGEB.max.slots=4\n\n## For our systems, we might use zosmf to communicate to the z/OS systems...\n# zosmf.server.CLUSTERA.images=IMAGE1\n# zosmf.server.MVLA.hostname=dev.galasa.system1\n# zosmf.server.MVLA.port=32070\n</code></pre> <p>So the <code>zos.cluster.CLUSTERA.images</code> means that you could use the <code>CLUSTERA</code> as a label in the Galasa annotations, and the Galasa framework would be allowed to decide which actual image is used (IMAGEA or IMAGEB). If you actually want to use <code>IMAGEA</code> in your source code you can, but it's better to use this symbolic abstraction via the <code>zos.cluster.images</code>.</p> <p>In the documented Simbank example, we have this:</p> <pre><code>zos.dse.tag.SIMBANK.imageid=SIMBANK\nzos.dse.tag.SIMBANK.clusterid=SIMBANK\n\nsimbank.dse.instance.name=SIMBANK\nsimbank.instance.SIMBANK.zos.image=SIMBANK\n\nzos.image.SIMBANK.ipv4.hostname=127.0.0.1\nzos.image.SIMBANK.telnet.port=2023\nzos.image.SIMBANK.webnet.port=2080\nzos.image.SIMBANK.telnet.tls=false\nzos.image.SIMBANK.credentials=SIMBANK\n\nzosmf.image.SIMBANK.servers=SIMBANK\nzosmf.server.SIMBANK.image=SIMBANK\nzosmf.server.SIMBANK.port=2040\nzosmf.server.SIMBANK.https=false\n</code></pre> <p>which means there is only a single imageTag of \"SIMBANK\" being mapped to the \"SIMBANK\" image, for which there are only a single set of properties.</p> <p>If you had a CPS property of <code>zos.cluster.CLUSTERA.images=IMAGEA</code>, then <code>CLUSTERA</code> should be set in your Java code annotations, with something similar to the following example in your <code>cps.properties</code> file: </p> <pre><code>zos.image.IMAGEA.default.hostname=dev.galasa.system1\nzos.image.IMAGEA.ipv4.hostname=dev.galasa.system1\nzos.image.IMAGEA.telnet.port=992\nzos.image.IMAGEA.telnet.tls=true\nzos.image.IMAGEA.credentials=MY_KEY_INTO_GALASA_CREDENTIALS_STORE\nzos.image.IMAGEA.max.slots=4\n</code></pre> <p>but with the values customized to match the name and location of your z/OS system.</p>"},{"location":"docs/faqs/#what-is-the-connection-between-zos-terminal-and-application","title":"What is the connection between z/OS terminal and application?","text":"<p>The <code>ITerminal</code> object allows communication to the remote z/OS system. See the Javadoc for ITerminal for more information. </p>"},{"location":"docs/faqs/#why-is-my-test-which-is-running-on-a-local-lpar-failing-at-the-provision-generate-phase-with-the-error-caused-by-devgalasazoszosmanagerexception-insufficent-capacity-for-images-in-cluster","title":"Why is my test (which is running on a local LPAR) failing at the Provision Generate phase with the error \"Caused by: dev.galasa.zos.ZosManagerException: Insufficent capacity for images in cluster...\"?","text":"<p>Try clearing out the <code>dss.properties</code> file on your local machine. The DSS (Dynamic Status Store) is a component that is provided in Galasa. In a local environment, or when running tests locally within a pipeline, it is in a file. The <code>dss.properties</code> file contains lots of settings, and counters that Managers put there, to indicate what resources are currently in-use so far. So, if a z/OS machine only has ten ports configured for example, and the counter reaches ten, this prevents any more tests trying to allocate a port for them to use. There is a danger if tests are dropped, that the proper cleanup is skipped, and the port number doesn't decrease when a test owning that port stops abnormally.</p> <p>Normal operation of an Ecosystem includes a resource monitor which looks for this situation and releases resources that a failed test owns. In a local run the resource monitor isn't present, so the DSS might not accurately reflect how much resource is available. In this example, a test is run, the 3270 port counter increases up to one, the test fails, and the DSS is not cleaned up but gets re-used in the next pipeline run. The counter then starts at one and increases to two and so forth until the limit is reached and a test is no longer able to get access to the resources it needs. The same situation might occur with counters of images on a cluster.</p> <p>Clearing out the <code>dss.properties</code> file resets the counters down to zero again. It is safe to do this providing that no tests are running. In principle, if you run multiple tests in parallel, you can see some of this limiting safety feature start failing tests even if you did not clean out the DSS. It is worth noting that if you always clear out the <code>dss.properties</code> file, the run name of tests always start from the same number, as the latest test number allocated counter is also kept there.</p>"},{"location":"docs/faqs/#i-have-a-testcase-that-needs-to-connect-to-an-external-resource-with-ssl-is-there-a-preferred-way-to-do-this-with-galasa-if-i-do-not-have-access-to-the-default-truststore","title":"I have a testcase that needs to connect to an external resource with SSL. Is there a preferred way to do this with Galasa if I do not have access to the default truststore?","text":"<p>For local tests, in the <code>bootstrap.properties</code> file, you can use <code>galasactl.jvm.local.launch.options=-Xmx80m -Xms20m</code>. When the galasactl program launches the JVM it will add those options to the command-line.</p>"},{"location":"docs/manage-ecosystem/","title":"Managing tests in a Galasa Ecosystem","text":"<p>Read the topics contained in this section to understand how to simply and effectively manage the scheduling and running of large numbers of Galasa tests in automation in a Galasa Ecosystem. You can group your tests using the test stream function, select groups of tests to run, retry and cancel failed tests, view results in a number of formats, and download test artifacts quickly and easily by using the Galasa CLI. </p>"},{"location":"docs/manage-ecosystem/runs-delete/","title":"Deleting test run results","text":"<p>Over time, test run results build up and take up space in the Galasa Ecosystem. You can delete test runs which have completed in the past by using the <code>galasactl runs delete</code> command.</p> <p>To view the full command syntax, see the galasactl runs delete command reference.</p>"},{"location":"docs/manage-ecosystem/runs-delete/#working-with-the-galasactl-runs-delete-command","title":"Working with the <code>galasactl runs delete</code> command","text":"<p>The following example deletes a test run called C1234: </p> <pre><code>galasactl runs delete --name C1234 --bootstrap http://example.com:30960/bootstrap\n</code></pre>"},{"location":"docs/manage-ecosystem/runs-delete/#identifying-test-runs-to-delete","title":"Identifying test runs to delete","text":"<p>Use the <code>galasactl runs get</code> command to find the names of the test runs to delete. For example, use the <code>--age</code> option to specify a time period in which the tests ran. </p> <pre><code>galasactl runs get --age 6w:1w --bootstrap http://example.com:30960/bootstrap\n</code></pre> <p>The <code>--format raw</code> option is useful if you are writing a script to delete multiple test runs.</p> <p>To view the full command syntax, see the galasactl runs get command reference.</p>"},{"location":"docs/manage-ecosystem/runs-download/","title":"Downloading test artifacts","text":"<p>You can download the artifacts that are associated with a test run from the RAS and store those artifacts in a directory by using the <code>runs download</code> command. Use this output to gather information about a test, help debug and diagnose test failure, share test run output, and make comparisons between test run results.</p> <p>To view the full list of options that are available, see the runs download command reference.</p>"},{"location":"docs/manage-ecosystem/runs-download/#working-with-the-runs-download-command","title":"Working with the <code>runs download</code> command","text":"<p>Downloaded artifacts are stored by default in a folder that is created within the current working directory from where the command is run. The name of the created folder corresponds to the test run-name that was provided. </p> <p>In the following example, the test run is called C1234. All artifacts for test run <code>C1234</code> are downloaded to a folder named <code>C1234</code> in the current working directory by using the following command:</p> <pre><code>galasactl runs download --name C1234\n</code></pre> <p>If the folder named <code>C1234</code> does not exist, it is created. If artifacts are already stored within an existing folder named <code>C1234</code>, the download fails. You can force artifacts stored within an existing folder to be overwritten by using the <code>--force</code> flag:</p> <pre><code>galasactl runs download --name C1234 \u2013-force\n</code></pre> <p>Use the <code>--force</code> flag carefully to avoid artifacts being over-written, resulting in the loss of data.</p>"},{"location":"docs/manage-ecosystem/runs-download/#specifying-a-folder-for-downloading-artifacts","title":"Specifying a folder for downloading artifacts","text":"<p>You can specify a location where you want the test artifacts downloaded by using the <code>--destination</code> option on the <code>runs download</code> command. This is useful if you do not want to use the default directory. </p> <p>The downloaded artifacts are organised within the specified directory in sub-folders that are based on the run-name. The file path of the folder can be relative to the current working directory, or absolute. For example, you can save artifacts from test run C1234 to a folder called mytestruns in a directory called temp by using the following command:</p> <pre><code>galasactl runs download --name C1234 --destination /temp/mytestruns\n</code></pre> <p>A message is displayed to confirm the location of the downloaded artifacts, for example:</p> <pre><code>GAL2501I: Downloaded 35 artifacts to '/temp/mytestruns/C1234' \n</code></pre>"},{"location":"docs/manage-ecosystem/runs-download/#identifying-output-for-incomplete-test-runs","title":"Identifying output for incomplete test runs","text":"<p>If you are investigating a problem, you might want to download artifacts that are associated with a test run which has not finished. If a test run is not finished when the <code>runs download</code> command is submitted, artifact collection might not be complete.</p> <p>To identify such a scenario, a timestamp is appended to the folder name to indicate that the test did not finish running. The timestamp shows the time at which the <code>runs download</code> command is run. The time is displayed in Universal Time Coordinated (UTC) time. The date is displayed in the format yyyy-mm-dd. </p> <p>For example, if the <code>runs download</code> command is run on the 6<sup>th</sup> of May 2023 at 10.30 am, against test U5432 which is still running, the created folder name would look similar to the following example:</p> <pre><code>U5432-2023-05-06_10:30:15\n</code></pre> <p>A message is displayed to show the location of any downloaded artifacts from the incomplete run, for example:</p> <pre><code>GAL2501I: Downloaded 11 files to folder U5432_2023-05-06_10:30:15\n</code></pre>"},{"location":"docs/manage-ecosystem/runs-download/#identifying-output-for-test-retries","title":"Identifying output for test retries","text":"<p>If a test is scheduled to run at a particular time but is unable to start, for example due to a lack of resources that are available in the environment, the Ecosystem might retry the test at a later time. When investigating problems with a test running in an Ecosystem, it is useful to download the artifacts that are associated with the retries of that test.</p> <p>When using the <code>runs download</code> command, if a test has run more than once, a number is added to the folder name to indicate the number of the retry, as shown in the following example:</p> <pre><code>C1234-1-2023-05-25_18:30:26\nC1234-2-2023-05-25_18:30:26\nC1234-3\n</code></pre> <p>In this example, the test C1234 tried to run twice unsuccessfully and completed on the third try. The numbers 1 and 2 in the folder names of the first two test run attempts indicate the retry order. The inclusion of the timestamp in folder name of the first two tries indicates that the test did not finish running. The third time the test finished running, so no timestamp is included as part of the name of the folder. </p>"},{"location":"docs/manage-ecosystem/runs-get/","title":"Viewing test run results","text":"<p>You can specify a number of options on the <code>galasactl runs get</code> command to query test run results on particular details, and to display the output of those queries in different formats. </p> <p>To view the full command syntax, see the galasactl runs get command reference.</p>"},{"location":"docs/manage-ecosystem/runs-get/#options-for-querying-and-viewing-test-run-results","title":"Options for querying and viewing test run results","text":"<p>Use the tables provided to view the options for filtering test results, and for choosing the format in which you want those results displayed.</p> <p>Table 1: The following table shows the options that you can set on the <code>galasactl runs get</code> command to query test run data on specific details:</p> Name Description <code>--name</code> Use the <code>--name</code> option to query the status of a particular test run. <code>--requestor</code> Use the <code>--requestor</code> option to filter the results of test runs, so that only those tests that are submitted to the ecosystem by a specified user are shown. If not specified, the default behaviour is to show all the test results from any user. <code>--age</code> Use the <code>--age</code> option to specify a time period in which the tests ran. The age option is specified in the format FROM:TO. Units of time can be specified in weeks w, days d, hours h, or minutes m. The FROM part is mandatory. The TO part is optional, with a default set to <code>0</code>, which indicates the current time. The FROM value specifies how far back in time the query is applied. The FROM value must therefore always be a larger value than the TO value. The returned times are in UTC (Coordinated Universal Time). If the <code>--name</code> option is specified, the <code>--age</code> parameter is not used. <code>--result</code> Use the <code>--result</code> option to return test runs based on test run results. You can select more than one result by using a comma-separated list. The <code>--result</code> flag cannot be used in conjunction with the <code>--active</code> flag. The two flags are mutually exclusive. <code>--active</code> Use the <code>--active</code> option to query tests that have not finished, so that you can quickly see which tests are currently running. The <code>--active</code> flag cannot be used in conjunction with the <code>--result</code> flag. The two flags are mutually exclusive. <code>--group</code> Use the <code>--group</code> flag to get all the test runs associated with the given group name. A custom group name can be assigned to a set of test runs when submitting tests using the galasactl runs submit command, otherwise a random group name will be assigned. <code>--group</code> can be used with other flags, like <code>--age</code>, <code>--requestor</code>, and <code>--result</code>, to filter test runs as desired, but it cannot be used alongside the <code>--name</code> flag. <code>--tags</code> Use the <code>--tags</code> flag to get all the test runs that have test tags assigned to them. A custom set of tags can be assigned to a set of test runs when submitting tests using the galasactl runs submit command. <code>--tags</code> can be used with other flags, like <code>--age</code>, <code>--requestor</code>, and <code>--result</code>, to filter test runs. Multiple tags can be supplied by either providing <code>--tags</code> with a comma-separated list of tags (e.g. <code>--tags tag1,tag2,tag3</code>) or by providing multiple <code>--tags</code> flags separately (e.g. <code>--tags tag1 --tags tag2 --tags tag3</code>). <p>Table 2: The following table shows the options that you can set on the <code>galasactl runs get</code> command to display test run results in different formats:</p> Name Description <code>--format summary</code> The default format is summary. The summary format is useful if you just need to know the high-level status and result of a test. <code>--format details</code> The details format is useful when you need to see all the details of a test run, including method information. <code>--format raw</code> The raw format output is useful if you are writing scripts to report on multiple test runs programmatically. The output from <code>galasactl runs get</code> is returned in a form that makes it easy for scripting to digest the individual pieces of data available. Returned values are separated by pipes, without formatting or header information."},{"location":"docs/manage-ecosystem/runs-get/#more-about-the-result-option","title":"More about the <code>--result</code> option","text":"<p>You might want to filter the test results that are returned based on run result. For example, you might choose to return only failed tests, so that you can quickly check if you need to investigate an issue. </p> <p>The galasactl runs get command now supports the <code>--result</code> option, so that test runs which completed with a specified result are returned. Runs which completed with a result that is not specified are not displayed.</p> <p>The <code>--result</code>  option accepts a comma-separated list of values. The following values are supported:</p> <ul> <li>Passed</li> <li>Failed</li> <li>EnvFailed</li> <li>Ignored</li> <li>Unknown</li> </ul> <p>The parameters are accepted regardless of whether they are entered in upper or lower-case.</p>"},{"location":"docs/manage-ecosystem/runs-get/#examples","title":"Examples","text":"<p>Use the following sections to view some example command options and generated output. Note that the <code>--format summary</code> and <code>--format details</code> options return a total count of results returned, along with a breakdown of the number that are returned with a particular result, for example, Passed, Failed, PassedWithDefects. </p>"},{"location":"docs/manage-ecosystem/runs-get/#view-tests-results-in-summary-format","title":"View tests results in summary format","text":"<p>This is the default format. Use this format to get a quick, high-level update on the status of a test run or runs. Returned information includes details about time the test was submitted, run name, status, result, and test name. This format is especially useful if a query returns a large number of results. </p> <p>The following example command returns test status in a summary format for tests that were requested by the user name bobsmith, and that ran between two weeks ago and one week ago:</p> <p>On Mac or Unix:</p> <pre><code>galasactl runs get --bootstrap http://example.com:30960/bootstrap \\ \n--requestor bobsmith --age 2w:1w\n</code></pre> <p>On Windows (Powershell):</p> <pre><code>galasactl runs get --bootstrap http://example.com:30960/bootstrap ` \n--requestor bobsmith --age 2w:1w\n</code></pre> <p>where:</p> <ul> <li><code>--bootstrap</code> is the URL of the ecosystem's bootstrap properties</li> <li><code>--requestor</code> is the name of the user who requested the test run</li> <li><code>--age</code> is the period of time in which the tests ran</li> </ul> <p>Results are returned on the terminal in the following example format:</p> <pre><code>$galasactl runs get --bootstrap http://example.com:30960/bootstrap \\ \n--requestor bobsmith --age 2w:1w --format summary\n\nsubmitted-time(UTC) name status   result test-name   group\n2023-05-04 10:55:29 U456 finished Passed MyTestName1 testGroup1\n2023-05-05 10:45:29 U856 finished Passed MyTestName2 testGroup1\n2023-05-06 11:55:29 U859 finished Passed MyTestName3 testGroup2\n2023-05-07 10:55:23 U956 finished Passed MyTestName4 testGroup2\n2023-05-07 10:56:29 U976 finished Passed MyTestName5 testGroup2\n2023-05-07 10:57:20 U996 finished Passed MyTestName6 testGroup3\n\nTotal:6 Passed:6 \n</code></pre>"},{"location":"docs/manage-ecosystem/runs-get/#view-tests-results-in-details-format","title":"View tests results in details format","text":"<p>Use this format to drill down to get more details on a particular test run. The returned information includes details about the bundle and a link to the run log URL, which can be viewed in a browser. Viewing the run log in this way makes it easier to diagnose why a test failed. A table of methods is also displayed, including details about the status and result of each test method. </p> <p>The following example command returns test status in a details format:</p> <p>On Mac or Unix:</p> <pre><code>$galasactl runs get --name U456 --bootstrap http://example.com:30960/bootstrap \\\n--format details \n</code></pre> <p>On Windows (Powershell):</p> <pre><code>galasactl runs get --name U456 --bootstrap http://example.com:30960/bootstrap `\n--format details \n</code></pre> <p>where: - <code>--name</code> is the name of the test run  - <code>--bootstrap</code> is the URL of the ecosystem's bootstrap properties - <code>--format</code> is the format in which you want the results to display</p> <p>Results are returned on the terminal in the following example format:</p> <pre><code>$galasactl runs get --name U456 --format details --bootstrap http://example.com:30960/bootstrap\nname                : U456\nstatus              : finished\nresult              : Passed\nsubmitted-time(UTC) : 2023-05-04 10:55:29\nstart-time(UTC)     : 2023-05-05 06:00:14\nend-time(UTC)       : 2023-05-05 06:00:15\nduration(ms)        : 1000\ntest-name           : dev.galasa.Zos3270LocalJava11Ubuntu\nrequestor           : bobsmith \nbundle              : dev.galasa\ngroup               : testGroup1\nrun-log             : https://127.0.0.1/ras/run/cbd-123/runlog\n\nmethod          type status   result start-time(UTC)     end-time(UTC)       duration(ms)\ntestCoreIvtTest test finished Passed 2023-05-05 06:03:38 2023-05-05 06:03:39 1000\n\nTotal:1 Passed:1  \n</code></pre>"},{"location":"docs/manage-ecosystem/runs-get/#view-tests-results-in-raw-format","title":"View tests results in raw format","text":"<p>Use this format if you want to parse test results using scripts. The raw format returns values separated by pipes, without formatting or header information.</p> <p>The following example command returns test status in a raw format:</p> <p>On Mac or Unix:</p> <pre><code>galasactl runs get --name U456 --bootstrap http://example.com:30960/bootstrap \\\n--format raw\n</code></pre> <p>On Windows (Powershell):</p> <pre><code>galasactl runs get --name U456 --bootstrap http://example.com:30960/bootstrap `\n--format raw\n</code></pre> <p>where: - <code>--name</code> is the name of the test run  - <code>--bootstrap</code> is the URL of the ecosystem's bootstrap properties - <code>--format</code> is the format in which you want the results to display</p> <p>Results are returned on the terminal in the following example format:</p> <pre><code>$galasactl runs get --name U456 --format raw \nU456|finished|Passed|2023-05-04T10:55:29.545323Z|2023-05-05T06:00:14.496953Z|2023-05-05T06:00:15.654565Z|1157|dev.galasa.Zos3270LocalJava11Ubuntu|galasa|dev.galasa|testGroup1|https://127.0.0.1/ras/run/cbd-123/runlog\n</code></pre>"},{"location":"docs/manage-ecosystem/runs-get/#return-tests-with-specified-results-in-summary-format","title":"Return tests with specified results in summary format","text":"<p>Use the following example command to return test information for test runs that ran the previous day and have a result of either Failed or EnvFail.</p> <p>On Mac or Unix:</p> <pre><code>galasactl runs get --age 1d --result failed,envfail \\\n--bootstrap http://example.com:30960/bootstrap\n</code></pre> <p>On Windows (Powershell):</p> <pre><code>galasactl runs get --age 1d --result failed,envfail `\n--bootstrap http://example.com:30960/bootstrap\n</code></pre> <p>Results are returned on the terminal in the following example format:</p> <pre><code>galasactl runs get --age 1d --result failed,envfail --bootstrap http://example.com:30960/bootstrap\n\nsubmitted-time(UTC) name status result  test-name   group\n2023-05-05 10:55:29 U456 ending Failed  MyTestName1 testGroup1\n2023-05-05 10:55:39 U856 ending Failed  MyTestName2 testGroup1\n2023-05-05 10:55:49 U859 ending EnvFail MyTestName3 testGroup2\n2023-05-05 10:55:53 U956 ending Failed  MyTestName4 testGroup2\n\nTotal:4 Failed:3 EnvFail:1\n</code></pre>"},{"location":"docs/manage-ecosystem/runs-prepare/","title":"Selecting tests to run in an Ecosystem","text":"<p>If you have a group of tests that you want to run in batch, the simplest way to do this is by defining these tests inside a portfolio. You can create a portfolio of tests by using the <code>runs prepare</code> command. You can build the portfolio from single or multiple test streams.</p> <p>This portfolio of tests can then be run by using the runs submit command. When you submit the tests to run, you need specify only the portfolio name on the command, rather than listing all of the classes.</p>"},{"location":"docs/manage-ecosystem/runs-prepare/#working-with-the-runs-prepare-command","title":"Working with the <code>runs prepare</code> command","text":"<p>The following section provides a subset of examples that use the <code>runs prepare</code> command to complete various tasks, for example, getting help, selecting tests, and setting overrides. The examples build on the Galasa SimBank tests, which you can run non-locally if you have an ecosystem that is running SimPlatform.</p>"},{"location":"docs/manage-ecosystem/runs-prepare/#selecting-tests-from-a-test-steam","title":"Selecting tests from a test steam","text":"<p>The following example command selects tests from a test stream called <code>BestSoFar</code> for inclusion in a portfolio called <code>my_portfolio.yaml</code>. All tests in the <code>dev.galasa.simbank.tests</code>  package within the <code>BestSoFar</code> test stream are added to the <code>my_portfolio.yaml</code> portfolio. Packages are selected if the name contains a specified string or matches the regex if --regex is specified.  </p> <p>On Mac or Unix:</p> <pre><code>galasactl runs prepare \\\n    --bootstrap http://example.com:30960/bootstrap \\\n    --portfolio my_portfolio.yaml \\\n    --stream BestSoFar \\\n    --package dev.galasa.simbank.tests\n</code></pre> <p>On Windows (Powershell):</p> <pre><code>galasactl runs prepare `\n    --bootstrap http://example.com:30960/bootstrap `\n    --portfolio my_portfolio.yaml `\n    --stream BestSoFar `\n    --package dev.galasa.simbank.tests\n</code></pre>"},{"location":"docs/manage-ecosystem/runs-prepare/#building-a-portfolio-for-multiple-test-packages","title":"Building a portfolio for multiple test packages","text":"<p>You can build a portfolio for multiple test package by using a comma separated list.</p> <p>The following example command selects tests from the <code>dev.galasa.simbank.tests</code> and <code>dev.galasa.example.banking</code> test packages and adds these tests to the <code>my_portfolio.yaml</code> portfolio.</p> <p>On Mac or Unix:</p> <pre><code>galasactl runs prepare \\\n    --bootstrap http://example.com:30960/bootstrap \\\n    --portfolio my_portfolio.yaml \\\n    --stream BestSoFar \\\n    --package dev.galasa.simbank.tests,dev.galasa.example.banking\n</code></pre> <p>On Windows (Powershell):</p> <pre><code>galasactl runs prepare `\n    --bootstrap http://example.com:30960/bootstrap `\n    --portfolio my_portfolio.yaml `\n    --stream BestSoFar `\n    --package dev.galasa.simbank.tests,dev.galasa.example.banking\n</code></pre>"},{"location":"docs/manage-ecosystem/runs-prepare/#selecting-tests-without-a-test-stream","title":"Selecting tests without a test stream","text":"<p>You can use test class names to build a portfolio when a test stream or test catalog is not available. </p> <p>The following example command selects specified tests (<code>SimBankIVT</code> and <code>BasicAccountCreditTest</code>) from the <code>dev.galasa.simbank.tests</code> test package and adds these tests to the <code>my_portfolio.yaml</code> portfolio. </p> <p>On Mac or Unix:</p> <pre><code>galasactl runs prepare \\\n    --bootstrap http://example.com:30960/bootstrap \\\n    --portfolio my_portfolio.yaml \\\n    --class dev.galasa.simbank.tests/SimBankIVT \\\n    --class dev.galasa.simbank.tests/BasicAccountCreditTest\n</code></pre> <p>On Windows (Powershell):</p> <pre><code>galasactl runs prepare `\n    --bootstrap http://example.com:30960/bootstrap `\n    --portfolio my_portfolio.yaml `\n    --class dev.galasa.simbank.tests/SimBankIVT `\n    --class dev.galasa.simbank.tests/BasicAccountCreditTest\n</code></pre>"},{"location":"docs/manage-ecosystem/runs-prepare/#setting-test-specific-overrides","title":"Setting test-specific overrides","text":"<p>Specifying overrides is useful if you want to run a set of tests against a particular configuration without changing the test code. For example, you might have multiple versions of software that you need to test. How can you do that without changing the test code? The answer is to use override properties. If you are running tests locally, you can set overrides properties by editing your <code>Overrides Properties</code> file. If you are running tests in an ecosystem, you can use the <code>--override</code> parameter in the Galasa CLI. Note that overrides in the portfolio take precedence over the overrides on the <code>runs submit</code> command. This is so you can set general overrides on the submit, but have specific class overrides in the portfolio.</p> <p>The following example creates a portfolio called <code>my_portfolio.yaml</code> that contains tests from the <code>BestSoFar</code> test stream where the test package is <code>dev.galasa.simbank.tests</code>.</p> <p>All the tests in the <code>my_portfolio.yaml</code> portfolio will run on the z/OS LPAR <code>MYLPAR</code> in the <code>MYPLEX</code> cluster when the <code>galasactl runs submit --portfolio my_portfolio.yaml</code> command is run, regardless of the LPAR and cluster that is specified in the CPS properties file.</p> <p>On Mac or Unix:</p> <pre><code>galasactl runs prepare \\\n    --bootstrap http://example.com:30960/bootstrap \\\n    --portfolio my_portfolio.yaml \\\n    --stream BestSoFar \\\n    --package dev.galasa.simbank.tests \\\n    --override zos.default.lpar=MYLPAR \\\n    --override zos.default.cluster=MYPLEX\n</code></pre> <p>On Windows (Powershell):</p> <pre><code>galasactl runs prepare `\n    --bootstrap http://example.com:30960/bootstrap `\n    --portfolio my_portfolio.yaml `\n    --stream BestSoFar `\n    --package dev.galasa.simbank.tests `\n    --override zos.default.lpar=MYLPAR `\n    --override zos.default.cluster=MYPLEX\n</code></pre>"},{"location":"docs/manage-ecosystem/runs-prepare/#building-a-portfolio-over-multiple-selections-and-overrides","title":"Building a portfolio over multiple selections and overrides","text":"<p>You can select tests by using \"package\" OR \"bundle\" OR \"test\". If a test is selected multiple times, it will only be added once. Duplicate tests are appended, enabling the same test to be selected multiple times with different overrides.</p> <p>In the following example, the first command creates a portfolio called <code>my_portfolio.yaml</code> that contains tests from the <code>BestSoFar</code> test stream where the test package name is <code>dev.galasa.simbank.tests</code>. The second command adds more tests to the <code>my_portfolio.yaml</code> portfolio from the <code>BestSoFar</code> test stream where the test package name is <code>dev.galasa.simbank.tests.two</code>. </p> <p>All the tests in the <code>my_portfolio.yaml</code> portfolio from the <code>dev.galasa.simbank.tests</code> package will run on the z/OS LPAR <code>MYLPAR</code> in the <code>MYPLEX</code> cluster. The tests from the <code>dev.galasa.simbank.tests.two</code> package will run on the z/OS LPAR <code>MYLPAR2</code> in the <code>MYPLEX</code> cluster when the <code>galasactl runs submit --portfolio my_portfolio.yaml</code> command is run.</p> <p>On Mac or Unix:</p> <pre><code>galasactl runs prepare \\\n    --bootstrap http://example.com:30960/bootstrap \\\n    --portfolio my_portfolio.yaml \\\n    --stream BestSoFar \\\n    --package dev.galasa.simbank.tests \\\n    --override zos.default.lpar=MYLPAR \\\n    --override zos.default.cluster=MYPLEX \\\ngalasactl runs prepare \\\n    --bootstrap http://example.com:30960/bootstrap \\\n    --portfolio my_portfolio.yaml \\\n    --append \\\n    --stream BestSoFar \\\n    --package dev.galasa.simbank.tests.two \\\n    --override zos.default.lpar=MYLPAR2 \\\n    --override zos.default.cluster=MYPLEX\n</code></pre> <p>On Windows (Powershell):</p> <pre><code>galasactl runs prepare `\n    --bootstrap http://example.com:30960/bootstrap `\n    --portfolio my_portfolio.yaml `\n    --stream BestSoFar `\n    --package dev.galasa.simbank.tests `\n    --override zos.default.lpar=MYLPAR `\n    --override zos.default.cluster=MYPLEX `\ngalasactl runs prepare `\n    --bootstrap http://example.com:30960/bootstrap `\n    --portfolio my_portfolio.yaml `\n    --append `\n    --stream BestSoFar `\n    --package dev.galasa.simbank.tests.two `\n    --override zos.default.lpar=MYLPAR2 `\n    --override zos.default.cluster=MYPLEX\n</code></pre> <p>You can now run the tests in your portfolio by using the <code>runs submit</code> command.</p>"},{"location":"docs/manage-ecosystem/runs-reset-cancel/","title":"Retrying and cancelling tests","text":"<p>Sometimes tests can become stuck in a loop and fail to finish running, for example, due to a lack of available resources, an environmental problem, or a timeout. You can retry a test to run again by using the <code>runs reset</code> command. If the test continues to fail to finish running, you can use the <code>runs cancel</code> command to cancel the test. </p> <p>Retrying a test sets the status of the test run in the DSS to <code>queued</code> status. Cancelling a test removes all entries in the DSS for that test run. For this reason it is preferable to retry a test rather than cancel a test. All information that is stored in the RAS about the test is kept and is not removed when either the <code>runs reset</code> or <code>runs cancel</code> command is run.</p> <p>To view the full list of options that are available, see the galasactl runs reset and galasactl runs cancel command references.</p>"},{"location":"docs/manage-ecosystem/runs-reset-cancel/#working-with-the-runs-reset-command","title":"Working with the <code>runs reset</code> command","text":"<p>The following example retrys a test run called C1234 by using the following command: </p> <pre><code>galasactl runs reset --name C1234\n</code></pre>"},{"location":"docs/manage-ecosystem/runs-reset-cancel/#output-for-test-retries","title":"Output for test retries","text":"<p>When using the galasactl runs download command to view test results, if a test has run more than once, a number is added to the folder name to indicate the number of the retry, as shown in the following example:</p> <pre><code>C1234-1-2023-05-25_18:30:26\nC1234-2-2023-05-25_18:30:26\nC1234-3\n</code></pre> <p>In this example, the test C1234 tried to run twice unsuccessfully and completed on the third try. The numbers 1 and 2 in the folder names of the first two test run attempts indicate the retry order. The inclusion of the timestamp in folder name of the first two tries indicates that the test did not finish running. The third time the test finished running, so no timestamp is included as part of the name of the folder. </p>"},{"location":"docs/manage-ecosystem/runs-reset-cancel/#working-with-the-runs-cancel-command","title":"Working with the <code>runs cancel</code> command","text":"<p>The following example cancels a test run called C1234 by using the following command: </p> <pre><code>galasactl runs cancel --name C1234\n</code></pre> <p>All information that is held in the DSS about the test run is removed. A message is returned in the log to say that the test run was lost and results are returned on the terminal in the following example format: </p> <pre><code>2024/02/07 13:34:28 Run C1234 was lost - inttests/dev.galasa.inttests/dev.galasa.inttests.core.local.CoreLocalJava11Ubuntu\nsubmitted-time(UTC) name requestor status result test-name\n\nTotal:1 Lost:1\n2024/02/07 13:34:28 GAL1017E: Not all runs passed. 1 failed.\nGAL1017E: Not all runs passed. 1 failed.\n2024/02/07 13:34:28 Exit code is 2\n</code></pre>"},{"location":"docs/manage-ecosystem/runs-submit/","title":"Running tests in an Ecosystem","text":"<p>The <code>runs submit</code> command submits and monitors tests in the Galasa Ecosystem. Tests can be input either from a portfolio or directly from a test package.</p> <p>For information about creating a portfolio by using the Galasa CLI, see the documentation for the runs prepare command.</p>"},{"location":"docs/manage-ecosystem/runs-submit/#working-with-the-runs-submit-command","title":"Working with the <code>runs submit</code> command","text":"<p>The following section provides a subset of examples of how you can use the <code>runs submit</code> command to complete various tasks, for example, getting help, submitting tests, and setting overrides. The examples build on the Galasa SimBank tests, which you can run non-locally if you have an ecosystem that is running SimPlatform.</p>"},{"location":"docs/manage-ecosystem/runs-submit/#submitting-tests-to-an-ecosystem-from-a-portfolio","title":"Submitting tests to an ecosystem from a portfolio","text":"<p>The following example assumes that you have created a <code>my_portfolio.yaml</code> portfolio by using the runs prepare command. The command submits tests from the <code>my_portfolio.yaml</code> portfolio, and specifies the following settings.</p> <p>On Mac or Unix:</p> <pre><code>galasactl runs submit \\\n    --bootstrap http://example.com:30960/bootstrap \\\n    --portfolio my_portfolio.yaml \\\n    --poll 5 \\\n    --progress 1 \\\n    --throttle 5 \\\n    --log -\n</code></pre> <p>On Windows (Powershell):</p> <pre><code>galasactl runs submit `\n    --bootstrap http://example.com:30960/bootstrap `\n    --portfolio my_portfolio.yaml `\n    --poll 5 `\n    --progress 1 `\n    --throttle 5 `\n    --log -\n</code></pre> <p>where:</p> <ul> <li><code>portfolio</code> specifies the portfolio that defines the tests that you want to run</li> <li><code>poll</code> specifies the frequency in seconds that the CLI polls the Ecosystem for test run status.</li> <li><code>progress</code> specifies the frequency in minutes that the CLI reports the overall progress of the test runs. A value of  <code>-1</code> or less disables progress reports.</li> <li><code>throttle</code> specifies the number of test runs that can be submitted in parallel. A value of <code>0</code> or less  prevents throttling.</li> <li><code>log</code> specifies that the progress log should be directed somewhere, and the <code>-</code> means that it should be sent to the console (stderr) so it is visible.</li> </ul>"},{"location":"docs/manage-ecosystem/runs-submit/#submitting-tests-without-a-portfolio","title":"Submitting tests without a portfolio","text":"<p>You can use test class names to submit test runs without using a portfolio.</p> <p>The following command runs the <code>SimBankIVT</code> and <code>BasicAccountCreditTest</code> tests from the  <code>dev.galasa.simbank.tests</code> package.</p> <p>On Mac or Unix:</p> <pre><code>galasactl runs submit \\\n    --bootstrap http://example.com:30960/bootstrap \\\n    --class dev.galasa.simbank.tests/SimBankIVT \\\n    --class dev.galasa.simbank.tests/BasicAccountCreditTest \\\n    --stream BestSoFar \\\n    --log -\n</code></pre> <p>On Windows (Powershell):</p> <pre><code>galasactl runs submit `\n    --bootstrap http://example.com:30960/bootstrap `\n    --class dev.galasa.simbank.tests/SimBankIVT `\n    --class dev.galasa.simbank.tests/BasicAccountCreditTest `\n    --stream BestSoFar `\n    --log -\n</code></pre>"},{"location":"docs/manage-ecosystem/runs-submit/#setting-overrides-for-all-tests-during-a-run","title":"Setting overrides for all tests during a run","text":"<p>Specifying overrides is useful if you want to run a set of tests against a particular configuration without changing the test code. For example, you might have multiple versions of software that you need to test. How can you do that without changing the test code? The answer is to use override properties. If you are running tests locally, you can set overrides properties by editing your <code>Overrides Properties</code> file. If you are running tests in an ecosystem, you can use the <code>--override</code> parameter in the Galasa CLI. Note that overrides in the portfolio take precedence over the overrides on the <code>runs submit</code> command. This is so that you can set general overrides on the submit, but have specific class overrides in the portfolio.</p> <p>The following command runs all the tests in the <code>my_portfolio.yaml</code> portfolio are on the z/OS LPAR <code>MYLPAR</code> in the <code>MYPLEX</code> cluster.</p> <p>On Mac or Unix:</p> <pre><code>galasactl runs submit \\\n    --portfolio my_portfolio.yaml \\\n    --override zos.default.lpar=MYLPAR \\\n    --override zos.default.cluster=MYPLEX \\\n    --log -\n</code></pre> <p>On Windows (Powershell):</p> <pre><code>galasactl runs submit `\n    --portfolio my_portfolio.yaml `\n    --override zos.default.lpar=MYLPAR `\n    --override zos.default.cluster=MYPLEX `\n    --log -\n</code></pre>"},{"location":"docs/manage-ecosystem/test-streams/","title":"Test streams","text":"<p>Galasa's Ecosystem organises tests into streams. Test streams give you more options when it comes to organising your test projects, how often they are built and where they are deployed.</p> <p>A test stream is a group of tests that you want to run in automation, represented by a single OBR (OSGi Bundle Repository) and its equivalent test catalog. Galasa uses the OBR to locate your tests in a Maven repository, along with all of the Managers that a test project requires. A test catalog is generated directly from the test source, is always up to date, and is specified in the Galasa CLI to select tests to run in automation. Administrators can create few or many test streams, depending on testing requirements. Testers can contribute tests to one or more test streams.</p>"},{"location":"docs/manage-ecosystem/test-streams/#test-stream-components","title":"Test stream components","text":"<p>A test stream is made up of a name, description, OBR, location and repository components. </p> <ul> <li>The OBR component is a URL that points to a list of Maven coodinates in the format <code>mvn:{grp}/{artifact id}/{version}/{obr}</code>. </li> <li> <p>The location component is a URL that points to the location of the test catalog that is associated with a particular OBR in the format <code>http://points-to-my-testcatalog</code>. A test catalog is an index of tests.  </p> </li> <li> <p>The repository component provides the location of the Maven repository where the test code and test catalog are deployed</p> </li> </ul> <p>The following diagram shows the relationship between the test code, test catalog, and test stream.</p> <p></p>"},{"location":"docs/manage-ecosystem/test-streams/#creating-and-retrieving-test-stream-components","title":"Creating and retrieving test stream components","text":"<p>The components of the <code>test.stream</code> property are set by using <code>galasactl properties set</code> command, as shown in the following example:</p> <pre><code>galasactl properties set --namespace framework --name test.stream.mystream.description --value \"My stream to use as an example\"\ngalasactl properties set --namespace framework --name test.stream.mystream.repo --value http://points-to-my-maven-repo.example.org\ngalasactl properties set --namespace framework --name test.stream.mystream.location --value http://points-to-my-test-catalog.example.org\ngalasactl properties set --namespace framework --name test.stream.mystream.obr --value mvn:myorg/myartifact/0.0.1/obr\n</code></pre> <p>These four commands each set a part of the stream. Streams must always be created in the <code>framework</code> namespace and must always have all four components set.</p> <p>You can view all test streams in the <code>framework</code> namespace by using the <code>galasactl properties get</code> command, as shown in the following example:</p> <pre><code>galasactl properties get --namespace framework --name test.streams \nnamespace name         value \nframework test.streams integrationtests, regressiontests \n\nTotal:2\n</code></pre>"},{"location":"docs/manage-ecosystem/test-streams/#organising-test-streams","title":"Organising test streams","text":"<p>There are many ways to organise test streams:</p> <ul> <li> <p>Single test stream: A single test stream can contain all of your tests. This system is of most use when you are learning about Galasa and experimenting with the automation system. At some point, it is much more beneficial for you to move to a dual stream setup.</p> </li> <li> <p>Dual test streams: Often, you will need to run a production test stream and a best so far test stream. The production stream is used by the CI/CD pipeline to test the application, while the best so far stream will include tests under development that you wish to observe under automation.   The source code for tests in dual streams is usually from the same SCM (Source Code Management) area - in git terms, this would mean the same repository but in different branches. The best so far stream contains all of the production stream tests plus new or modified tests. When you are happy that a test has reached a good level of quality, you can promote it to the production stream and make it available to the CI/CD pipeline. Usually, you would organise things so that you have a Maven build per stream.</p> </li> <li> <p>Many streams: You might organise your streams so that you have one per team, or dual test streams per team. If you have lots of tests per application area, having a stream per area is also possible.</p> </li> </ul> <p>Build time and frequency usually dictates how streams are structured. If you are building your test projects frequently, and those build times are long, you might wish to split the test projects into streams. Alternatively, you could stick with a single stream, but split the projects into separate builds that all kick off the build of the test stream OBR when complete.</p>"},{"location":"docs/managers/","title":"Managers","text":"<p>You can find the links to the Javadoc API documentation for all the Galasa Managers on the overview page.</p>"},{"location":"docs/managers/#managers-provided-with-the-current-galasa-distribution","title":"Managers provided with the current Galasa distribution","text":"<p>Key</p> <p>Each Manager is tagged with one of the follow readiness indicators:</p> This Manager is being actively developed. It is subject to change and has not been extensively tested. This Manager is almost ready. It has been tested and the TPI is stable, but there may be minor changes to come. This Manager is feature complete, has passed all tests and is deemed release grade."},{"location":"docs/managers/#cics-ts-managers","title":"CICS TS Managers","text":"CECI Manager <p>Provides CECI 3270 interaction - initially supporting containers and link programs.</p> CEDA Manager  <p>Provides CEDA 3270 interaction.</p> CEMT Manager  <p>Provides CEMT 3270 interaction.</p> CICS TS Manager <p>Provides configuration information for pre-existing CICS TS servers. Drives provisioning services from other managers, e.g. z/OS PT.</p>"},{"location":"docs/managers/#ims-tm-managers","title":"IMS TM Managers","text":"IMS TM Manager <p>Provides configuration information for pre-existing IMS TM systems. Drives provisioning services from other managers, e.g. z/OS 3270 Manager.</p>"},{"location":"docs/managers/#cloud-managers","title":"Cloud Managers","text":"Docker Manager <p>Enables containers to run on infrastructure Docker engines - either for testing directly or for assisting the testing process.</p> Kubernetes Manager <p>Provisions Kubernetes namespaces for tests (or Managers) to use.</p> OpenStack Manager <p>Provisions Linux images on  servers within OpenStack. This Manager currently supports only Linux and provides the servers via the Linux Manager.</p>"},{"location":"docs/managers/#communications-managers","title":"Communications Managers","text":"HTTP Client Manager <p>Provides a common setup of HTTP client operations for the test (or a Manager) to use.</p> IP Network Manager <p>Provides configuration information for IP-based servers.</p> MQ Manager <p>Provides the ability to connect to an existing Queue Manager and enables applications to read and write one or more messages to and from a queue.</p>"},{"location":"docs/managers/#core-managers","title":"Core Managers","text":"Artifact Manager <p>Provides access to resources within a test bundle. It also provides templating services.</p> Core Manager <p>The Core Manager provides tests with access to some of the core features within the Galasa Framework. The Core Manager is always initialised and included in a test run and contributes the logger, stored artefact root and test property annotations.</p>"},{"location":"docs/managers/#logging-managers","title":"Logging Managers","text":"ElasticLog Manager <p>Exports test results to ElasticSearch, which can be subsequently used within Kibana dashboards.</p>"},{"location":"docs/managers/#ecosystem-managers","title":"Ecosystem Managers","text":"Galasa Ecosystem Manager <p>Deploys an entire Galasa Ecosystem to Kubernetes to enable integration testing against Galasa.</p>"},{"location":"docs/managers/#test-tool-managers","title":"Test Tool Managers","text":"JMeter Manager <p>Configures and runs JMeter testing via Docker containers.</p> SDV Manager <p>Create an automated test in Galasa and use the SDV Manager to record the security used during your test.</p> Selenium Manager <p>Allows tests to drive Web Browser testing using Selenium.</p> VTP Manager <p>Create an automated test in Galasa and use the VTP Manager to record the interactions between the test and your CICS programs.</p>"},{"location":"docs/managers/#unix-managers","title":"Unix Managers","text":"Linux Manager <p>Connect to a Linux image and run commands on that image via the command shell. Drive provisioning of images by using other Managers, for example, the OpenStack Manager. The Linux Manager depends on the IP Network Manager to provide the IP connection to the Linux image.</p>"},{"location":"docs/managers/#workflow-managers","title":"Workflow Managers","text":"GitHub Manager <p>Use the GitHub Manager to help analyze test results. Identify test classes and test methods that have failed as the result of a known problem which is documented in an open GitHub issue, avoiding spending time investigating the cause of a failure of which the reason is known.</p>"},{"location":"docs/managers/#zos-managers","title":"z/OS Managers","text":"RSE API Manager <p>Provides tests and Managers with access to RSE API functions.</p> z/OS 3270 Manager <p>Provides tests and Managers with a 3270 client.</p> z/OS Batch z/OS MF Manager <p>Provides the default implementation of the z/OS Batch Manager using z/OS MF. Can only be used via the z/OS Batch Manager interface.       </p> z/OS Batch RSE API Manager <p>Provides an implementation of the z/OS Batch Manager using the RSE API. Can only be used via the z/OS Batch Manager interface.</p> z/OS Console oeconsol Manager <p>Provides an implementation of the z/OS Console by using the z/OS UNIX oeconsol command. Can only be used via the z/OS Console Manager interface.                                                                               </p> z/OS Console z/OS MF Manager <p>Provides the default implementation of the z/OS Console by using z/OS MF. Can only be used via the z/OS Console Manager interface.</p> z/OS File RSE API Manager <p>Provides an implementation of the z/OS File Manager by using RSE API. Can only be used via the z/OS File Manager interface.</p> z/OS File z/OS MF Manager <p>Provides the default implementation of the z/OS File Manager using z/OS MF. Can only be used via the z/OS File Manager interface.                        </p> z/OS Manager <p>Provides tests and Managers with access to z/OS images, sysplexes and log information. Additionally, the z/OS Manager contributes annotations which allow you to run batch jobs, issue console commands, transfer files and securely access z/OS systems via TSO or UNIX commands.</p> z/OS MF Manager <p>Provides tests and Managers with access to z/OS MF functions.</p> z/OS Program Manager <p>Compiles test programs from source embedded in the Galasa test bundle at test start. The executable load module is then available for use in the test.</p> z/OS TSO Command SSH Manager <p>Provides the default implementation of the z/OS TSO Command Manager using SSH. Can only be used via the z/OS TSO Command Manager interface.</p> z/OS UNIX Command SSH Manager <p>Provides the default implementation of the z/OS UNIX Command Manager using SSH. Can only be used via the z/OS UNIX Command Manager interface.</p>"},{"location":"docs/managers/cics-ts-managers/","title":"CICS TS Managers","text":"CECI Manager <p>Provides CECI 3270 interaction - initially supporting containers and link programs.</p> CEDA Manager  <p>Provides CEDA 3270 interaction.</p> CEMT Manager  <p>Provides CEMT 3270 interaction.</p> CICS TS Manager <p>Provides configuration information for pre-existing CICS TS servers.\u00a0Drives provisioning services from other managers, e.g. z/OS PT.</p>"},{"location":"docs/managers/cics-ts-managers/cics-ts-ceci-manager/","title":"CICS TS CECI Manager","text":"<p>This Manager is at Release level. You can view the Javadoc documentation for the Manager.</p>"},{"location":"docs/managers/cics-ts-managers/cics-ts-ceci-manager/#overview","title":"Overview","text":"<p>This Manager allows Galasa tests to issue CICS/TS CECI commands. Use the command-level interpreter (CECI) Manager to request a CECI instance in a Galasa test,  issue basic CECI commands  which can be processed interactively on a 3270 screen and  retrieve results. Examples of using this Manager can include writing data to a temporary storage  queue, linking to a CICS program or retrieving the signed on user id.</p>"},{"location":"docs/managers/cics-ts-managers/cics-ts-ceci-manager/#provided-annotation","title":"Provided annotation","text":"<p>The following annotations are available with the CICS TS CECI Manager</p>"},{"location":"docs/managers/cics-ts-managers/cics-ts-ceci-manager/#cicsts-ceci-manager","title":"CICS/TS CECI Manager","text":"Annotation: CICS/TS CECI Manager Name: <code>@CECI</code> Description: The <code>@CECI</code> annotation will request the CICS/TS CECI Manager to provide a CECI instance. Syntax: <pre>@CECIpublic ICECI ceci;</pre> Notes: Requests to the <code>ICECI</code> Manager interface requires an ITerminal object which is logged on to CICS and is at  the CECI initial screen. If mixed case is required, the terminal should be presented with no upper case translate status. For example, the test could first issue <code>CEOT TRANIDONLY</code> to the ITerminal before invoking ICECI methods."},{"location":"docs/managers/cics-ts-managers/cics-ts-ceci-manager/#code-snippets","title":"Code snippets","text":"<p>Use the following code snippets to help you get started with the CICS TS CECI Manager.</p>"},{"location":"docs/managers/cics-ts-managers/cics-ts-ceci-manager/#request-a-ceci-instance","title":"Request a CECI instance","text":"<p>The following snippet shows the code that is required to request a CECI instance in a Galasa test:</p> <pre><code>@CECI\npublic ICECI ceci;\n</code></pre> <p>The code creates a CICS/TS CECI instance. The CECI instance will also require a 3270 terminal instance:</p> <p><pre><code>@ZosImage(imageTag=\"A\")\npublic IZosImage zosImageA;\n\n@Zos3270Terminal(imageTag=\"A\")\npublic ITerminal ceciTerminal;\n</code></pre> The 3270 terminal is associated with the zOS Image allocated in the zosImageA field.</p>"},{"location":"docs/managers/cics-ts-managers/cics-ts-ceci-manager/#issue-a-basic-ceci-command","title":"Issue a basic CECI command","text":"<p>The following snippet shows the code required to issue the a basic CECI command. In this case, the test will write a message to the operator console:</p> <pre><code>String ceciCommand = \"EXEC CICS WRITE OPERATOR TEXT('About to execute Galasa Test...')\";\nICECIResponse resp = ceciTerminal.issueCommand(terminal, ceciCommand);\nif (!resp.isNormal() {\n    //...\n}\n</code></pre>"},{"location":"docs/managers/cics-ts-managers/cics-ts-ceci-manager/#link-to-program-with-container","title":"Link to program with container","text":"<p>Create a CONTAINER on a CHANNEL, EXEC CICS LINK to a PROGRAM with the CHANNEL and get the returned CONTAINER data.</p> <p>Create the input CONATINER called \"MY-CONTAINER-IN\" on CHANNEL \"MY-CHANNEL\" with the data \"My_Contaier_Data\". The CONTAINER will default to TEXT with no code page conversion:</p> <pre><code>ICECIResponse resp = ceci.putContainer(ceciTerminal, \"MY-CHANNEL\", \"MY-CONTAINER-IN\", \"My_Contaier_Data\", null, null, null);\nif (!resp.isNormal()) {\n    //...\n}\n</code></pre> <p>Link to PROGRAM \"MYPROG\" with the CHANNEL \"MY-CHANNEL\":</p> <pre><code>eib = ceci.linkProgramWithChannel(ceciTerminal, \"MYPROG\", \"MY-CHANNEL\", null, null, false);\nif (!resp.isNormal()) {\n    //...\n}\n</code></pre> <p>Get the content of the CONTAINER \"MY-CONTAINER-OUT\" from CHANNEL \"MY-CHANNEL\" into the CECI variable \"&amp;DATAOUT\" and retrieve the variable data into a String:</p> <pre><code>eib = ceci.getContainer(ceciTerminal, \"MY-CHANNEL\", \"MY-CONTAINER-OUT\", \"&amp;DATAOUT\", null, null);\nif (!resp.isNormal()) {\n    //...\n}\nString dataOut = ceci.retrieveVariableText(ceciTerminal, \"&amp;DATAOUT\");\n</code></pre>"},{"location":"docs/managers/cics-ts-managers/cics-ts-ceci-manager/#write-binary-data-to-a-temporary-storage-queue","title":"Write binary data to a temporary storage queue","text":"<p>Use the following code to write binary data to TS QUEUE </p> <p>Create a binary CECI variable:</p> <pre><code>char[] data = {0x0C7, 0x081, 0x093, 0x081, 0x0A2, 0x081, 0x040, 0x0C4, 0x081, 0x0A3, 0x081};\nceci.defineVariableBinary(ceciTerminal, \"&amp;BINDATA\", data);\n</code></pre> <p>Write the binary variable to a TS QUEUE called \"MYQUEUE\": </p> <pre><code>String command = \"WRITEQ TS QUEUE('MYQUEUE') FROM(&amp;BINDATA)\";\nICECIResponse resp = ceci.issueCommand(ceciTerminal, command);\nif (!resp.isNormal()) {\n    //...\n}\n</code></pre> <p>The \"MYQUEUE\" now contains the following data:</p> <pre><code>Galasa Data\n</code></pre>"},{"location":"docs/managers/cics-ts-managers/cics-ts-ceci-manager/#confirm-the-signed-on-userid","title":"Confirm the signed on userid","text":"<p>Use the following code to issue the CICS ASSIGN API and retrieve the signed on userid from the response: </p> <pre><code>String command = \"ASSIGN\";\nICECIResponse resp = ceci.issueCommand(ceciTerminal, command);\nString userid = resp.getResponseOutputValues().get(\"USERID\").getTextValue();\n</code></pre> <p>Alternatively, issue ASSIGN and assign the userid value to a variable:</p> <pre><code>String command = \"ASSIGN USERID(&amp;USERID)\";\nICECIResponse resp = ceci.issueCommand(ceciTerminal, command);\nString userid = ceci.retrieveVariableText(\"&amp;USERID\");\n</code></pre>"},{"location":"docs/managers/cics-ts-managers/cics-ts-manager/","title":"CICS TS Manager","text":"<p>This Manager is at Alpha level. You can view the Javadoc documentation for the Manager.</p>"},{"location":"docs/managers/cics-ts-managers/cics-ts-manager/#overview","title":"Overview","text":"<p>This Manager provides Galasa tests to CICS/TS functions. </p>"},{"location":"docs/managers/cics-ts-managers/cics-ts-manager/#testing-in-cics-regions-on-zos","title":"Testing in CICS Regions on z/OS","text":"<p>To connect your Galasa test to a developer supplied environment with a provisioned CICS region as a minimum you need to configure the following properties for the CICS TS Manager: </p> <pre><code>cicsts.provision.type=dse\ncicsts.dse.tag.[TAG].applid=[APPLID]\n</code></pre> <p>You also need to configure the following properties for the z/OS Manager as a minimum to connect to a CICS region, even if you do not reference a <code>@ZosImage</code> in your Galasa test. This is because CICS regions sit on a z/OS LPAR, and so to provision and connect to a CICS region in a test, you also need access to the z/OS image that it sits within to make requests on the CICS region. You might need to configure additional z/OS-related CPS properties, depending on your test.</p> <pre><code>zos.dse.tag.[tag].imageid=[IMAGEID]\n    OR zos.tag.[tag].imageid=[IMAGEID] \n    OR zos.cluster.[CLUSTERID].images=[IMAGEID] (AND zos.dse.tag.[tag].clusterid=[CLUSTERID] if [CLUSTERID] is not DEFAULT)\nzos.image.[IMAGEID].ipv4.hostname=[IP ADDRESS]\nzos.image.[IMAGEID].credentials=[CREDENTIALID]\n</code></pre>"},{"location":"docs/managers/cics-ts-managers/cics-ts-manager/#configuration-properties","title":"Configuration Properties","text":"<p>The following are properties that are used to configure the CICS TS Manager in the CPS.</p>"},{"location":"docs/managers/cics-ts-managers/cics-ts-manager/#developer-supplied-environment-cics-ts-region-type","title":"Developer Supplied Environment - CICS TS Region - Type","text":"Property: Developer Supplied Environment - CICS TS Region - Type Name: cicsts.provision.type Description: Provides the type of the CICS TS region for the DSE provisioner.  The type setting is mandatory for a DSE region. Required: Yes if you want a DSE region, otherwise not required. You must set this property if you are using the <code>cicsts.dse.tag.[TAG].applid</code> property. Default value: None Valid values: dse Examples: <code>cicsts.provision.type=dse</code>"},{"location":"docs/managers/cics-ts-managers/cics-ts-manager/#developer-supplied-environment-cics-ts-region-applid","title":"Developer Supplied Environment - CICS TS Region - Applid","text":"Property: Developer Supplied Environment - CICS TS Region - Applid Name: cicsts.dse.tag.[TAG].applid Description: Provides the applid of the CICS TS region for the DSE provisioner. The applid setting is mandatory for a DSE region. If you are using this property, you must also set the <code>cicsts.provision.type</code> property to specify the CICS TS region type to be <code>dse</code>. For example, <code>cicsts.provision.type=dse</code>. Required: Yes if you want a DSE region, otherwise not required. Default value: None Valid values: A value VTAM applid Examples: <code>cicsts.dse.tag.PRIMARY.applid=CICS1A</code>"},{"location":"docs/managers/cics-ts-managers/cics-ts-manager/#developer-supplied-environment-cics-ts-region-version","title":"Developer Supplied Environment - CICS TS Region - Version","text":"Property: Developer Supplied Environment - CICS TS Region - Version Name: cicsts.dse.tag.[TAG].version Description: Provides the version of the CICS TS region to the DSE provisioner. Required: Only requires setting if the test request it or a Manager performs a version dependent function. Default value: None Valid values: A value V.R.M version format, eg 5.6.0 Examples: <code>cicsts.dse.tag.PRIMARY.version=5.6.0</code>"},{"location":"docs/managers/cics-ts-managers/cics-ts-manager/#extra-bundles-required-to-implement-the-cics-ts-manager","title":"Extra bundles required to implement the CICS TS Manager","text":"Property: Extra bundles required to implement the CICS TS Manager Name: cicsts.extra.bundles Description: The symbolic names of any bundles that need to be loaded with the CICS TS Manager. Required: No Default value: dev.galasa.cicsts.ceci.manager,dev.galasa.cicsts.ceda.manager,dev.galasa.cicsts.cemt.manager Valid values: bundle symbolic names comma separated Examples: <code>cicsts.extra.bundles=org.example.cicsts.provisioning</code>"},{"location":"docs/managers/cloud-managers/","title":"Cloud Managers","text":"Docker Manager <p>Enables containers to run on infrastructure Docker engines - either for testing directly or for assisting the testing process.</p> Kubernetes Manager <p>Provisions Kubernetes namespaces for tests (or Managers) to use.</p> OpenStack Manager <p>Provisions Linux images on  servers within OpenStack. This Manager currently supports only Linux and provides the servers via the Linux Manager.</p>"},{"location":"docs/managers/cloud-managers/docker-manager/","title":"Docker Manager","text":"<p>This Manager is at Release level. You can view the Javadoc documentation for the Manager.</p>"},{"location":"docs/managers/cloud-managers/docker-manager/#overview","title":"Overview","text":"<p>This Manager enables tests to run Docker Containers on a Docker Engine provided by the Galasa infrastructure, making it easy to write tests that consume container-based services. The test does not need to worry about where the Docker infrastructure is, its credentials, or its capacity as this is all handled by the Manager.</p> <p>The Docker Manager can be used by other Managers as a base for their own services.  For example, the JMeter Manager can run a JMeter service inside a Docker Container.  Using the Docker Manager in this way means that the test or administration team  do not need to create dedicated JMeter resources.</p> <p>Containers that are provided by the Docker Manager can be used to either drive  workload for the application under test, or to receive workload from the application.  The Docker Manager can also be used to monitor the test or to provide a security context like  OpenLDAP. Docker Containers provide a powerful tool in helping test applications in an integrated environment.</p> <p>The Docker Manager supports Galasa Shared Environments.  Shared Environments provide  the ability to create a test environment that can be shared across multiple test runs  so you don't have to provision a test environment for each test.</p>"},{"location":"docs/managers/cloud-managers/docker-manager/#limitations","title":"Limitations","text":"<p>The Docker Manager supports only AMD64 platforms. It is planned to expand the capability to S390x.</p> <p>The Docker Manager currently supports only a single Docker Engine.  It is planned to allow multiple Docker Engines to be configured.</p>"},{"location":"docs/managers/cloud-managers/docker-manager/#annotations","title":"Annotations","text":"<p>The following annotations are available with the Docker Manager.</p>"},{"location":"docs/managers/cloud-managers/docker-manager/#docker-container","title":"Docker Container","text":"Annotation: Docker Container Name: @DockerContainer Description: The <code>@DockerContainer</code> annotation requests the Docker Manager to allocate a slot and start a container  on the infrastructure Docker Engines. The test can request as many containers as required within  the limits set by the Docker Manager configuration. Attribute: <code>dockerContainerTag</code> The <code>dockerContainerTag</code> is used to identify the Docker Container to other Managers or Shared Environments.  If a test is using multiple  Docker Containers, each separate Docker Container must have a unique tag. If two Docker Containers use the same tag, they will refer to the  same Docker Container. Attribute: <code>image</code> The <code>image</code> attribute provides the Docker Image that is used to create the Docker Container.  The image name must not  include the Docker Registry as this is provided in the CPS.   If using a public official image from DockerHub,  then the  image name must be prefixed with <code>library/</code>, for example <code>library/httpd:latest</code>, the Docker Manager will not default to the library namespace like the Docker commands do. Attribute: <code>start</code> The <code>start</code> attribute indicates whether the Docker Container should be started automatically. If the  test needs to perform some work before the container is started, then <code>start=false</code> should be used, after which <code>IDockerContainer.start()</code> can be called to start the container. Attribute: <code>dockerEngineTag</code> The <code>dockerEngineTag</code> will be used in the future so that a container can be run on a specific Docker Engine type. You would not normally need to provide a Docker Engine tag. Syntax: <pre>@DockerContainer(image=\"library/httpd:latest\")public IDockerContainer httpdContainer;@DockerContainer(image=\"privateimage\", start=false)public IDockerContainer container1; </pre> Notes: The <code>IDockerContainer</code> interface gives the test access to the IPv4/6 address and the exposed port numbers of the Docker Container.  The interface also enables the test to execute commands and retrieve the log and transfer files that are sent to  and from the container. See DockerContainer and IDockerContainer to find out more."},{"location":"docs/managers/cloud-managers/docker-manager/#docker-container-configuation","title":"Docker Container Configuation","text":"Annotation: Docker Container Configuation Name: @DockerContainerConfig Description: The <code>@DockerContainerConfig</code> annotation provides an object to manually configure certain aspects of a containers run. Within the annotation, volumes can be requests, for both binding and provisioning. Look at the Docker volume annotation  description for more details. The <code>IDockerContainerConfig</code> object it self allows for non provisioing configurations to be set at test time and  ammended between container startups. The <code>IDockerContainer</code> object needs to use the <code>startWithConfig()</code> method to take use of the customised  startup config Attribute: <code>dockerVolumes</code> Multiple volumes can be mounted within a single configuration  @return Syntax: <pre>@DockerContainerConfig(      dockerVolumes =  {</pre>"},{"location":"docs/managers/cloud-managers/docker-manager/#docker-volume","title":"Docker Volume","text":"Annotation: Docker Volume Name: @DockerVolume Description: The <code>@DockerVolume</code> annotation provides the capability to bind or provision docker volumes. The  volumes were desgined with three Docker volume use cases in mind:  1. Mounting configuration - in this usecase any volume to be mounted contains configuration data and must not be edited by the running      container, as this could affect parallelization of test running. Therefore, in the DockerVolume annotation, if a volume name is provided      (aka already exists), the mount will be read only.  2. Sharing volumes - when a volume is required for multiple containers to use to share data. This shoult not be a provided volume, so it      is expected that a volume name will not be passed to the DockerVolume annotation, and the docker engine will generate a name. This      volume will be tagged for later reference. Current limitation is that the config used to provision the volume must be used for all      containers wanting to mount the same volume. This results in the path having to be the same in all containers.  3. Persisting data - There may be a use case for a volume to exsist outside the life span of the test. For this I have encorparated a      boolean called persist on the DockerVolume annotation. This is not indefinate, but controlled by resource management. A good default      would probably be 24 hours, but can utimately be set by the user with a CPS property. Attribute: <code>existingVolumeName</code> By default it is expected that Galasa should provision and control the volume. This field should only be used if beinding to an already exisitng volume.  @return Attribute: <code>mountPath</code> Where to mount the volume on the container.  @return Attribute: <code>volumeTag</code> When wanting to reference a mount that is going to be provisioned, this tage will be used.  @return Attribute: <code>dockerEngineTag</code> The <code>dockerEngineTag</code> will be used in the future so that a volume can be allocated on a specific Docker Engine type. You would not normally need to provide a Docker Engine tag.  @return Attribute: <code>readOnly</code> This field is used to protect this volume. If this volume is intended to be mounted to multiple containers, which you do not want  editing the contents, set this to be true  @return Syntax: <pre>@DockerContainerConfig(      dockerVolumes =  {           // A read only mount, as a specific volume was requested.</pre>"},{"location":"docs/managers/cloud-managers/docker-manager/#code-snippets","title":"Code snippets","text":"<p>Use the following code snippets to help you get started with the Docker Manager.</p>"},{"location":"docs/managers/cloud-managers/docker-manager/#create-a-docker-container","title":"Create a Docker Container","text":"<p>The following snippet shows the minimum code that is required to request a Docker Container in a Galasa test:</p> <pre><code>@Dockercontainer(image=\"library/httpd:latest\", tag=\"http\", start=true)\npublic IDockercontainer container1;\n</code></pre> <p>The code creates a Docker Container with an Apache HTTP Server running on port 80. Although this does not provide much, it does give a known target HTTP Server that you can start and stop in order to test how your application responds in those circumstances.  By accessing the container1 field, you can find the IP address and port that was used for the container. </p> <p>At the end of the test, the Docker Manager automatically stops and discards the Docker Container. If for some reason the test was not able to do this, the Docker Manager resource management routines perform the same clean up after the Galasa Ecosystem discovers the test has disappeared.</p> <p>There is no limit in Galasa on how many Docker Containers can be used within a single test. The only limit is the number of Docker Containers that can be started in the Galasa Ecosystem. This limit is set by the Galasa Administrator and is typically set to the maximum number of containers that can be supported by the Docker Server or Swarm.  If there are not enough slots available for an automated run, the run is put back on the queue in waiting state to retry. Local test runs fail if there are not enough container slots available.</p>"},{"location":"docs/managers/cloud-managers/docker-manager/#obtain-the-ip-address-and-port-of-an-exposed-container-port","title":"Obtain the IP address and port of an exposed container port","text":"<p>Find the IP address and port by using the following code which provisions and starts an Apache HTTP server on port 80:</p> <pre><code>@Dockercontainer(image=\"library/httpd:latest\")\npublic IDockercontainer httpcontainer;\n...\nInetSocketAddress port80 = httpContainer.getFirstSocketForExposedPort(80);\n</code></pre>"},{"location":"docs/managers/cloud-managers/docker-manager/#stop-and-start-a-container","title":"Stop and Start a container","text":"<p>Stop and start your Apache HTTP Server to test how your application responds by using the following code:</p> <pre><code>@Dockercontainer(image=\"library/httpd:latest\")\npublic IDockercontainer httpcontainer;\n...\nhttpContainer.stop();\n\nhttpContainer.start();\n</code></pre>"},{"location":"docs/managers/cloud-managers/docker-manager/#run-a-command-in-the-container","title":"Run a command in the container","text":"<p>Use the following code to execute a command within the Docker Container and return the resulting output:</p> <pre><code>@Dockercontainer(image=\"library/httpd:latest\")\npublic IDockercontainer httpcontainer;\n...\nIDockerExec exec = httpContainer.exec(\"ls\",\"-l\",\"/var/log\");\nexec.waitForExec();\nString output = exec.getCurrentOutput();\n</code></pre>"},{"location":"docs/managers/cloud-managers/docker-manager/#retrieve-the-log-of-the-container","title":"Retrieve the log of the container","text":"<p>Use the following code to retrieve the container log:</p> <pre><code>@Dockercontainer(image=\"library/httpd:latest\")\npublic IDockercontainer httpcontainer;\n...\nString log = httpContainer.getStdOut();\n</code></pre>"},{"location":"docs/managers/cloud-managers/docker-manager/#configuration-properties","title":"Configuration Properties","text":"<p>The following are properties used to configure the Docker Manager.</p>"},{"location":"docs/managers/cloud-managers/docker-manager/#docker-engine-dse-cps-property","title":"Docker Engine DSE CPS Property","text":"Property: Docker Engine DSE CPS Property Name: docker.dse.engine.[engineTag] Description: A property that allows a image to be tagged, and then selected from a test class Required: No Default value: PRIMARY Valid values: An ID for the engine, e.g. LOCAL Examples: <code>docker.dse.engine.PRIMARY=LOCAL</code>"},{"location":"docs/managers/cloud-managers/docker-manager/#docker-engine-cps-property","title":"Docker Engine CPS Property","text":"Property: Docker Engine CPS Property Name: docker.engine.[engineId].hostname Description: Provides location of the Docker Engine Required: Yes - the hostname of the Docker Engine must be provided Default value: None Valid values: A valid DNS name or IPv4/6 address Examples: <code>docker.engine.[engineId].hostname=docker.example.company.org</code> <code>docker.engine.[engineId].hostname=192.168.2.3</code> <p>Currently, the Docker Manager supports only a single Docker Engine although it is planned to allow multiple Engines to be configured.</p> <p>To allow local runs to access the local Docker Engine, you must add this property to the CPS and enable the TCP port of your local Docker Engine.</p> <p>If the Docker Engine is not using the default TCP port, you must provide the docker.engine.port configuration property in the CPS.</p>"},{"location":"docs/managers/cloud-managers/docker-manager/#docker-engine-port-cps-property","title":"Docker Engine Port CPS Property","text":"Property: Docker Engine Port CPS Property Name: docker.engine.port Description: Provides TCP Port of the Docker Engine Required: No Default value: 2375 Valid values: Any valid TCP Port number Examples: <code>docker.engine.port=2375</code> <p>The Docker Manager communicates with the Docker Engine via TCP. The Docker Engine needs to be  configured to open the TCP port, which is usually 2375. If the port is not the default one, then this property needs to be provided in the CPS.</p>"},{"location":"docs/managers/cloud-managers/docker-manager/#docker-engines-cps-property","title":"Docker Engines CPS Property","text":"Property: Docker Engines CPS Property Name: docker.default.engines Description: Comma seperated list of availble docker engines Required: Yes - at least one engine needs to be defined Default value: None Valid values: An ID for the engine, e.g. LOCAL Examples: <code>docker.default.engines=LOCAL</code> <p>Currently, the Docker Manager supports only a single Docker Engine group called \"default\" although it is planned to allow multiple Engine groups to be configured.</p>"},{"location":"docs/managers/cloud-managers/docker-manager/#default-docker-registries-cps-property","title":"Default Docker Registries CPS Property","text":"Property: Default Docker Registries CPS Property Name: docker.default.registries Description: An ordered list of Docker Registries IDs to search for Images requested by Galasa Tests Required: No Default value: If not provided, DOCKERHUB id will be added Valid values: A comma separated list of ID.  See CPS property <code>docker.registry.ID</code> Examples: <code>docker.default.registries=LOCAL,DOCKERHUB</code> <p>To decouple Docker Registries from the Galasa test, this property allows the Docker Manager to search for images. The main reason being if the customer Docker Registry moves, only this property needs  to change, instead of having to change the source code of lots of tests.</p> <p>The registries are searched in order when looking for an image. When the image is located, the search stops.</p> <p>If this property is provided in the CPS, the Docker Hub registry is not automatically appended. If it is required, then the DOCKERHUB id must be included.</p>"},{"location":"docs/managers/cloud-managers/docker-manager/#docker-registry-credentials-cps-property","title":"Docker Registry Credentials CPS Property","text":"Property: Docker Registry Credentials CPS Property Name: docker.registry.[ID.]credentials Description: Provides the credentials of a Docker Registry that is used by the Docker Manager Required: Yes if the registry requires authentication. Default value: DOCKER Valid values: A valid credentials ID. Examples: <code>docker.registry.LOCAL.credentials=CREDSID</code> <p>If the <code>docker.registry.ID.credentials</code> CPS property is missing, the Docker Manager will attempt to use the credentials ID that is provided in <code>docker.registry.credentials</code>, if that is missing, then the default credentials  ID of <code>DOCKER</code> will be used.</p>"},{"location":"docs/managers/cloud-managers/docker-manager/#docker-registry-url-cps-property","title":"Docker Registry URL CPS Property","text":"Property: Docker Registry URL CPS Property Name: docker.registry.ID.url Description: Provides the URL of a Docker Registry that is used by the Docker Manager. Required: Yes if the Registry ID is used in the CPS Property <code>docker.default.registries</code>. However,  the Docker Manager will default DOCKERHUB to <code>https://registry.hub.docker.com</code> if not provided. Default value: None, except for DOCKERHUB where the default is <code>https://registry.hub.docker.com</code> Valid values: A valid URL Examples: <code>docker.registry.LOCAL.url=https://registry.local.com</code> <p>If the Docker Registry requires credentials for authentication, then the id for the credentials must be provided using the CPS property  <code>docker.registry.ID.credentials</code> or <code>docker.registry.credentials</code></p>"},{"location":"docs/managers/cloud-managers/kubernetes-manager/","title":"Kubernetes Manager","text":"<p>This Manager is at Alpha level. You can view the Javadoc documentation for the Manager.</p>"},{"location":"docs/managers/cloud-managers/kubernetes-manager/#overview","title":"Overview","text":"<p>This Manager provides a test with a Kubernetes Namespace to utilize. The test will provide YAML representations of the resources that the test requires.</p> <p>As an absolute minimum, the CPS property <code>kubernetes.cluster.K8S.url</code> must be provided as well as a credential <code>secure.credentials.K8S.token</code> for the API token.</p> <p>The Kubernetes Manager supports Galasa Shared Environments. Shared environments provide  the ability to create a test environment that can be shared across multiple test runs  so you don't have to provision a test environment for each test.</p>"},{"location":"docs/managers/cloud-managers/kubernetes-manager/#limitations","title":"Limitations","text":"<p>The Manager only supports the following Kubernetes resources:-</p> <ul> <li>Deployment</li> <li>StatefulSet</li> <li>Service</li> <li>Secret</li> <li>ConfigMap</li> <li>PersistentVolumeClaim</li> </ul> <p>If additional resources are required, please raise a GitHub issue.</p>"},{"location":"docs/managers/cloud-managers/kubernetes-manager/#annotations","title":"Annotations","text":"<p>The following annotations are available with the Kubernetes Manager</p>"},{"location":"docs/managers/cloud-managers/kubernetes-manager/#kubernetes-namespace","title":"Kubernetes Namespace","text":"Annotation: Kubernetes Namespace Name: @KubernetesNamespace Description: The <code>@KubernetesNamespace</code> annotation requests the Kubernetes Manager to allocate a namespace on the infrastructure Kubernetes clusters.  The test can request as many namespaces as required so long as they  can be supported simultaneously by the Kubernetes Manager configuration. Attribute: <code>kubernetesNamespaceTag</code> The <code>kubernetesNamespaceTag</code> identifies the Kubernetes names to other Managers or Shared Environments.  If a test is using multiple  Kubernetes namespace, each separate Kubernetes namespace must have a unique tag.  If more than one Kubernetes namespace use the same tag, they will refer to the  same Kubernetes namespace. Syntax: <pre>@KubernetesNamespacepublic IKubernetesNamesapce namespace; </pre> Notes: The <code>IKubernetesNamespace</code> interface gives the test access to create and manage resources on the Kubernetes cluster.  See KubernetesNamespace and IKubernetesNamespace to find out more."},{"location":"docs/managers/cloud-managers/kubernetes-manager/#code-snippets","title":"Code snippets","text":"<p>Use the following code snippets to help you get started with the Kubernetes Manager.</p>"},{"location":"docs/managers/cloud-managers/kubernetes-manager/#create-kubernetes-namespaces-for-the-kubernetes-manager-to-use","title":"Create Kubernetes namespaces for the Kubernetes Manager to use","text":"<p>Note: Isolated namespaces must be provided for the Kubernetes Manager to use.  The Manager deletes any resources that  exist on the namespace once a test has finished.</p> <p>The following are example scripts and yaml files necessary to create namespaces:</p> <ol> <li>Namespace creation script</li> <li>Create Service Account for the Manager to use (including api token)</li> <li>The RBAC rules to be applied to each namespace</li> </ol>"},{"location":"docs/managers/cloud-managers/kubernetes-manager/#obtain-a-kubernetes-namespace","title":"Obtain a Kubernetes Namespace","text":"<pre><code>@KubernetesNamespace()\npublic IKubernetesNamespace namespace;\n</code></pre> <p>This code requests the Kubernetes Manager to allocate a namespace for the test to use.</p> <p>There is no limit in Galasa on how many Kubernetes Namespaces can be used within a single test. The only limit is the number of Kubernetes Namespaces that can be started in the Galasa Ecosystem. This limit is set by the Galasa Administrator and is typically set to the maximum number of namespaces defined in the Kubernetes cluster.  If there are not enough slots available for an automated run, the run is put back on the queue in waiting state to retry.  Local test runs fail if there are not enough container slots available.</p>"},{"location":"docs/managers/cloud-managers/kubernetes-manager/#create-a-resource-on-the-namespace","title":"Create a resource on the namespace","text":"<pre><code>@ArtifactManager\npublic IArtifactManager artifactManager\n\n@KubernetesNamespace()\npublic IKubernetesNamespace namespace;\n\n@Test\npublic void test() {\n    IBundleResources bundleResources = artifactManager.getBundleResources(getClass());\n\n    String yaml = bundleResource.streamAsString(bundleResources.retrieveFile(\"/example.yaml\"));\n\n    IResource resource = namespace.createResource(yaml);\n}\n</code></pre> <p>In this snippet, the test retrieves the contents of the <code>/example.yaml</code> resource file as a String.  The yaml file is passed the namespace for creation.  The yaml must contain only one Kubernetes resource.</p> <p>The resource is created but is not checked to see if the resource has been started or allocated.</p>"},{"location":"docs/managers/cloud-managers/kubernetes-manager/#retrieve-a-pod-log","title":"Retrieve a pod log","text":"<pre><code>IStatefulSet statefulSet = (IStatefulSet)namespace.createResource(yaml);\n\nList&lt;IPodLog&gt; podLogs = statefulSet.getPodLogs(\"containername\");\n</code></pre> <p>As Deployments and StatefulSets can have multiple pods and therefore containers with the same name,  a List is returned containing all the current logs for all the named containers.</p>"},{"location":"docs/managers/cloud-managers/kubernetes-manager/#configuration-properties","title":"Configuration Properties","text":"<p>The following are properties used to configure the Kubernetes Manager.</p>"},{"location":"docs/managers/cloud-managers/kubernetes-manager/#kubernetes-cluster-ids-cps-property","title":"Kubernetes Cluster IDs CPS Property","text":"Property: Kubernetes Cluster IDs CPS Property Name: kubernetes.cluster.ids Description: Provides a comma separated list of the active Kubernetes Clusters that are defined in the CPS Required: No Default value: Defaults to a single cluster ID of K8S if the property is missing Valid values: A comma separated list of alphanumeric IDs.  Normally uppercased. Examples: <code>kubernetes.cluster.ids=K8S,ALTERNATE</code>"},{"location":"docs/managers/cloud-managers/kubernetes-manager/#kubernetes-cluster-credentials-cps-property","title":"Kubernetes Cluster Credentials CPS Property","text":"Property: Kubernetes Cluster Credentials CPS Property Name: kubernetes.cluster.[XXXX.]credentials Description: Provides the Credentials ID for the token required to access the Kubernetes cluster Required: No Default value: K8S Valid values: A valid credentials ID. Galasa convention states IDs should be uppercase Examples: <code>kubernetes.cluster.K8S.credentials=K8S</code> <code>kubernetes.cluster.credentials=K8S</code>"},{"location":"docs/managers/cloud-managers/kubernetes-manager/#maximum-slots-on-cluster-cps-property","title":"Maximum Slots on Cluster CPS Property","text":"Property: Maximum Slots on Cluster CPS Property Name: kubernetes.cluster.[XXXX.]max.slots Description: Specifies the maximum number of slots(namespaces) that can be allocated at one time on the cluster Required: No Default value: Defaults to 2 if not provided Valid values: Integer value.  A value &lt;0 disables the cluster. Examples: <code>kubernetes.cluster.K8S.max.slots=5</code>"},{"location":"docs/managers/cloud-managers/kubernetes-manager/#kubernetes-tag-shared-environment","title":"Kubernetes Tag Shared Environment","text":"Property: Kubernetes Tag Shared Environment Name: kubernetes.namespace.tag.XXXXXX.shared.environment Description: Tells the Kubernetes Manager which Shared Environment is assigned to a namespace tag Required: No Default value: None Valid values: A valid Shared Environment Examples: <code>kubernetes.namespace.tag.SHARED.shared.environment=M1</code>"},{"location":"docs/managers/cloud-managers/kubernetes-manager/#kubernetes-namespace-ids-cps-property","title":"Kubernetes Namespace IDs CPS Property","text":"Property: Kubernetes Namespace IDs CPS Property Name: kubernetes.cluster.[XXXX.]namespaces Description: Provides a comma separated list of the namespaces that are available on the cluster Required: No Default value: Defaults to galasa{1-2} if not provided Valid values: A comma separated list of valid Kubernetes namespaces with resource pooling expanders Examples: <code>kubernetes.cluster.K8S.namespaces=galasa1,galasa{2-9}</code> <code>kubebernetes.cluster.namespaces=bob1,bob2,bob3</code>"},{"location":"docs/managers/cloud-managers/kubernetes-manager/#kubernetes-node-port-proxy-hostname-cps-property","title":"Kubernetes Node Port Proxy Hostname CPS Property","text":"Property: Kubernetes Node Port Proxy Hostname CPS Property Name: kubernetes.cluster.XXXX.nodeport.proxy.hostname Description: Provides the hostname that NodePorts can be accessed on. Required: No Default value: The hostname as specified in the API URL Valid values: A valid URL hostname Examples: <code>kubernetes.cluster.K8S.nodeport.proxy.hostname=cluster.org</code>"},{"location":"docs/managers/cloud-managers/kubernetes-manager/#kubernetes-override-storage-class-cps-property","title":"Kubernetes Override Storage Class CPS Property","text":"Property: Kubernetes Override Storage Class CPS Property Name: kubernetes.cluster.[XXXX.]override.storageclass Description: Provides a Kubernetes StorageClass that is set on all PersistentVolumeClaims that are created in the Kubernetes namespace.   The value of this property is set in the property spec.storageClassName Required: No Default value: None Valid values: A valid StorageClass that is defined in the Kubernetes cluster Examples: <code>kubernetes.cluster.K8S.override.storageclass=fast</code> <code>kubernetes.cluster.override.storageclass=slow</code>"},{"location":"docs/managers/cloud-managers/kubernetes-manager/#kubernetes-cluster-api-url-cps-property","title":"Kubernetes Cluster API URL CPS Property","text":"Property: Kubernetes Cluster API URL CPS Property Name: kubernetes.cluster.XXXX.url Description: The API URL of the Kubernetes Cluster Required: Yes Default value: None Valid values: A valid URL Examples: <code>kubernetes.cluster.K8S.url=http://cluster.org:8443</code>"},{"location":"docs/managers/cloud-managers/kubernetes-manager/#kubernetes-validate-cluster-certificate-cps-property","title":"Kubernetes Validate Cluster Certificate CPS Property","text":"Property: Kubernetes Validate Cluster Certificate CPS Property Name: kubernetes.cluster.[XXXX.]validate.certificate Description: Validates the Kubernetes Cluster API Certificate Required: No Default value: true Valid values: true or false Examples: <code>kubernetes.cluster.K8S.validate.certificate=false</code> <code>kubernetes.cluster.validate.certificate=true</code>"},{"location":"docs/managers/cloud-managers/open-stack-manager/","title":"Open Stack Manager","text":"<p>This Manager is at Alpha level. You can view the Javadoc documentation for the Manager.</p>"},{"location":"docs/managers/cloud-managers/open-stack-manager/#overview","title":"Overview","text":"<p>This Manager enables Galasa to provision Linux images on a provided Open Stack instance. Use the Open Stack Manager to create the instances and to set up the networking required to make the images accessible to the tester. The Open Stack Manager has a dependency on the Linux Manager.</p>"},{"location":"docs/managers/communications-managers/","title":"Communications Managers","text":"HTTP Client Manager <p>Provides a common setup of HTTP client operations for the test (or a Manager) to use.</p> IP Network Manager <p>Provides configuration information for IP-based servers.</p> MQ Manager <p>Provides the ability to connect to an existing Queue Manager and enables applications to read and write one or more messages to and from a queue.</p>"},{"location":"docs/managers/communications-managers/http-client-manager/","title":"HTTP Client Manager","text":"<p>This Manager is at Release level. You can view the Javadoc documentation for the Manager.</p>"},{"location":"docs/managers/communications-managers/http-client-manager/#overview","title":"Overview","text":"<p>This Manager provides a variety of common HTTP client operations you can use in your tests. For example, you can use this Manager in a test where you want to determine if a particular web page contains (or does not contain) some specific content. This is exactly how it is used in the Docker Manager IVT (Installation Verification Test). As well as providing client functionality to people who write tests, it may also be used internally by other Managers to enrich their range of offered services. This Manager supports outbound HTTP calls, JSON requests, HTTP file transfer and Web Services calls. SSL is supported.</p>"},{"location":"docs/managers/communications-managers/http-client-manager/#code-snippets","title":"Code snippets","text":"<p>Use the following code snippets to help you get started with the HTTP Client Manager.</p>"},{"location":"docs/managers/communications-managers/http-client-manager/#instantiate-an-http-client","title":"Instantiate an HTTP Client","text":"<p>This code instantiates an HTTP Client.</p> <pre><code>@HttpClient\npublic IHttpClient client;\n</code></pre> <p>You can just as simply instantiate multiple HTTP Clients.</p> <pre><code>@HttpClient\npublic IHttpClient client1;\n\n@HttpClient\npublic IHttpClient client2;\n</code></pre>"},{"location":"docs/managers/communications-managers/http-client-manager/#set-the-target-uri-for-an-http-client","title":"Set the target URI for an HTTP Client","text":"<p>This code sets an HTTP Client's target URI.</p> <pre><code>@HttpClient\npublic IHttpClient client;\n\nclient.setURI(new URI(\"http://www.google.com\"));\n</code></pre> <p>You would typically use this call prior to, say, an outbound HTTP call to retrieve the contents of a web page.</p>"},{"location":"docs/managers/communications-managers/http-client-manager/#make-an-outbound-http-call","title":"Make an outbound HTTP call","text":"<p>This code makes a get request to the given path.</p> <pre><code>client.setURI(new URI(\"https://httpbin.org\"));\nString pageContent = client.getText(\"/get\").getContent();\n</code></pre> <p>These two lines use the HTTPClient to perform a GET request against the URL https://httpbin.org/get. The getText method is used as we want to retrieve the response as a string.  Alternatives for XML, JSON and JAXB objects exist. There are also methods for the other HTTP verbs such as PUT, POST and DELETE</p>"},{"location":"docs/managers/communications-managers/http-client-manager/#use-streams-to-download-a-file","title":"Use streams to download a file","text":"<p>The following code is an example of one way to download a file using streams.</p> <pre><code>@HttpClient\npublic IHttpClient client;\n\nFile f = new File(\"/tmp/dev.galasa_0.7.0.jar\");\n\nclient.setURI(new URI(\"https://p2.galasa.dev\"));\n// Note: The response closes when we leave the code block.\ntry( CloseableHttpResponse response = client.getFile(\"/plugins/dev.galasa_0.7.0.jar\")) {\n  // Note: The input stream auto-closes when we leave the code block.\n  try (InputStream in = response.getEntity().getContent()) {\n    // Note: The output stream auto-closes when we leave the code block.\n    try (OutputStream out = new FileOutputStream(f)) { \n      int count;\n      byte data[] = new byte[2048];\n      while((count = in.read(data)) != -1) {\n          out.write(data, 0, count);\n      }\n    }\n  }\n}\n</code></pre> <p>The snippet begins by declaring <code>client</code> as before and <code>f</code>, an instance of <code>File</code>. The client's URI is set and its <code>getFile</code> method called to return <code>response</code> - an instance of <code>CloseableHttpResponse</code>.</p> <p>The two streams <code>in</code> and <code>out</code> are declared and initialized and the data transferred from <code>in</code> to <code>out</code> in 2048 byte chunks, after which the output stream is flushed and then closed.</p>"},{"location":"docs/managers/communications-managers/ipnetwork-manager/","title":"IP Network Manager","text":"<p>This Manager is at Release level. You can view the Javadoc documentation for the Manager.</p>"},{"location":"docs/managers/communications-managers/ipnetwork-manager/#overview","title":"Overview","text":"<p>The IP Network Manager enables access to applications over TCP/IP networks for those applications whose native communication is over TCP/IP. It can be used by other application specific managers that will build upon the basic address capabilities provided by the IP Network Manager.</p> <p>The Manager interrogates the Configuration Properties Store (CPS) to get hostname and port information so that you do not need to hard-code these values into your tests.</p>"},{"location":"docs/managers/communications-managers/mq-manager/","title":"MQ Manager","text":"<p>This Manager is at Alpha level. You can view the Javadoc documentation for the Manager.</p>"},{"location":"docs/managers/communications-managers/mq-manager/#overview","title":"Overview","text":"<p>This Manager provides the ability to connect a test to an existing IBM MQ queue manager, enabling one or more messages to be written to and read from existing queues.</p>"},{"location":"docs/managers/communications-managers/mq-manager/#annotations","title":"Annotations","text":"<p>The following annotations are available with the MQ Manager</p>"},{"location":"docs/managers/communications-managers/mq-manager/#mq-manager","title":"MQ Manager","text":"Annotation: MQ Manager Name: @QueueManager Description: The <code>@QueueManager</code> annotation represents the name of the IBM MQ queue manager Attribute: <code>tag</code> Specifies which queue manager to connect to. Default value is PRIMARY. Syntax: @QueueManager public IMessageQueueManager qmgr; Notes: The <code>IMessageQueueManager</code> interface enables connection to the IBM MQ queue manager."},{"location":"docs/managers/communications-managers/mq-manager/#mq-queue","title":"MQ Queue","text":"Annotation: MQ Queue Name: @Queue Description: The <code>@Queue</code> annotation represents the name of the IBM MQ queue Attribute: <code>queueMgrTag</code> Specifies which queue manager to connect to. Default value is PRIMARY. Attribute: <code>name</code> Specifies the name of the queue as it appears on the queue manager. Use the <code>name</code> attribute if the queue name never changes, regardless of environment. Attribute: <code>tag</code> The name of the queue. Use the <code>tag</code> attribute when the value of the queue name is defined by a property in the CPS. Notes: You must specify either the <code>name</code> or the <code>tag</code> attribute but not both. If you specify both or neither, an exception is generated. Attribute: <code>archive</code> Archive messages retrieved and sent messages from and to this queue into the RAS to aid debugging. Default value is true. Valid values are true and false. Syntax: @Queue public IMessageQueue queue; Notes: The <code>IMessageQueue</code> interface enables the test to put the provided messages onto the IBM MQ queues and retrieve messages from the IBM MQ queues."},{"location":"docs/managers/communications-managers/mq-manager/#code-snippets","title":"Code snippets","text":"<p>Use the following code snippets to help you get started with the MQ Manager. Use the MQ Manager to connect a test to an existing IBM MQ queue manager and queue. Galasa does not provision new IBM MQ queue managers or queues. </p>"},{"location":"docs/managers/communications-managers/mq-manager/#create-an-instance-of-an-ibm-mq-manager","title":"Create an instance of an IBM MQ Manager","text":"<p>The following snippet shows the code that is required to create an instance of an IBM MQ Manager:</p> <pre><code>@QueueManager\npublic IMessageQueueManager qmgr;\n</code></pre>"},{"location":"docs/managers/communications-managers/mq-manager/#instantiate-an-ibm-mq-queue","title":"Instantiate an IBM MQ queue","text":"<p>The following snippet shows the code that is required to instantiate an IBM MQ queue:</p> <pre><code>@QueueManager()\npublic IMessageQueueManager qmgr;\n\n@Queue(archive = true, name = \"GALASA.INPUT.QUEUE\")\npublic IMessageQueue queue;\n</code></pre> <p>You can just as simply instantiate multiple IBM MQ queues:</p> <pre><code>@QueueManager()\npublic IMessageQueueManager qmgr;\n\n@Queue(archive = true, name = \"GALASA.INPUT.QUEUE\")\npublic IMessageQueue queue;\n\n@Queue(archive = false, name = \"GALASA.INPUT.QUEUE2\")\npublic IMessageQueue queue2;\n\n@Queue(tag = \"NEWQUEUE\")\npublic IMessageQueue queue3;\n</code></pre> <p>You can also instantiate multiple IBM MQ queues on multiple queue managers:</p> <pre><code>@QueueManager(tag = \"DISTQMGR\")\npublic IMessageQueueManager distributedQueueManager;\n\n@QueueManager(tag = \"CLOUDQMGR\")\npublic IMessageQueueManager cloudQueueManager;\n\n@Queue(archive = true, name = \"GALASA.SEND.QUEUE1\", queueMgrTag = \"DISTQMGR\")\npublic IMessageQueue queue1;\n\n@Queue(archive = true, name = \"GALASA.SEND.QUEUE2\", queueMgrTag = \"DISTQMGR\")\npublic IMessageQueue queue2;\n\n@Queue(archive = false, name = \"GALASA.RECEIVE.QUEUE3\", queueMgrTag = \"CLOUDQMGR\")\npublic IMessageQueue queue3;\n\n@Queue(archive = true, name = \"GALASA.RECEIVE.QUEUE4\", queueMgrTag = \"CLOUDQMGR\")\npublic IMessageQueue queue4;\n</code></pre>"},{"location":"docs/managers/communications-managers/mq-manager/#put-messages-to-an-ibm-mq-queue","title":"Put messages to an IBM MQ queue","text":"<p>Multiple message objects can be passed to the sendMessage method. The following snippets show the code required to create a text or binary message to put on an IBM MQ queue: </p> <p><pre><code>TextMessage tm = qmgr.createTextMessage(testData);\nqueue.sendMessage(tm);\n</code></pre> <pre><code>TextMessage tm = qmgr.createTextMessage(testData);\nqueue.sendMessage(tm,tm,tm,tm,tm,tm,tm,tm);\n</code></pre> <pre><code>byte[] input = {41,01,33,76};\nBytesMessage m = qmgr.createBytesMessage(input);\nqueue.sendMessage(m);\n</code></pre></p>"},{"location":"docs/managers/communications-managers/mq-manager/#read-messages-from-an-ibm-mq-queue","title":"Read messages from an IBM MQ queue","text":"<p>The following snippet shows the code required to read a message from an existing IBM MQ queue:</p> <pre><code>Message m = queue.getMessage();\nString response = m.getBody(String.class);\n</code></pre>"},{"location":"docs/managers/communications-managers/mq-manager/#clear-messages-from-an-ibm-mq-queue","title":"Clear messages from an IBM MQ queue","text":"<p>The following snippet shows the code required to clear messages from an IBM MQ queue:</p> <pre><code>queue.clearQueue();\n</code></pre>"},{"location":"docs/managers/communications-managers/mq-manager/#configuration-properties","title":"Configuration Properties","text":"<p>The following are properties used to configure the MQ Manager:</p>"},{"location":"docs/managers/communications-managers/mq-manager/#instance-id-for-the-tag-cps-property","title":"Instance ID for the tag CPS Property","text":"Property: Instance ID for the tag CPS Property Name: mq.tag.[tag].instanceid Description: The instance for the specified tag Required: Yes Default value: None Valid values: Examples: <code>mq.tag.[tag].instanceid=QUEUEMGR1</code> <p>This property is associated with the @QueueManager annotation attribute <code>tag</code>. You can use the <code>tag</code> attribute to avoid hardcoding in your test code. Because the properties that are associated with the attribute are stored in the CPS, the same test can run against a different queue manager without changing the test code. </p>"},{"location":"docs/managers/communications-managers/mq-manager/#queue-name-for-the-tag-cps-property","title":"Queue name for the tag CPS Property","text":"Property: Queue name for the tag CPS Property Name: mq.queue.[tag].queuename Description: The queue name for the specified tag Required: Yes Default value: None Valid values: Examples: <code>mq.queue.[tag].queuename=GALASA.INPUT.QUEUE</code> <p>This property is associated with the @Queue annotation attribute <code>tag</code>. You can use the <code>tag</code> attribute to avoid hardcoding in your test code. Because the properties that are associated with the attribute are stored in the CPS, the same test can run against a different queue without changing the test code. </p>"},{"location":"docs/managers/communications-managers/mq-manager/#queue-manager-channel-cps-property","title":"Queue manager channel CPS Property","text":"Property: Queue manager channel CPS Property Name: mq.server.[instanceid].channel Description: The channel for the specified instance Required: Yes Default value: None Valid values: Examples: <code>mq.server.[instanceid].channel=DEV.APP.SVRCONN</code>"},{"location":"docs/managers/communications-managers/mq-manager/#queue-manager-credentials-cps-property","title":"Queue manager credentials CPS Property","text":"Property: Queue manager credentials CPS Property Name: mq.server.[instanceid].credentials.id Description: The credentials for the queue Manager Required: Yes Default value: None Valid values: Examples: <code>mq.server.[instanceid].credentials.id=CRED1</code>"},{"location":"docs/managers/communications-managers/mq-manager/#queue-manager-host-cps-property","title":"Queue manager host CPS Property","text":"Property: Queue manager host CPS Property Name: mq.server.[instanceid].host Description: The host for the specified instance Required: Yes Default value: None Valid values: Examples: <code>mq.server.[instanceid].host=127.0.0.1</code>"},{"location":"docs/managers/communications-managers/mq-manager/#queue-manager-name-cps-property","title":"Queue manager name CPS Property","text":"Property: Queue manager name CPS Property Name: mq.server.[instanceid].name Description: The queue manager name for the specified instance Required: Yes Default value: None Valid values: Examples: <code>mq.server.[instanceid].name=QM1</code>"},{"location":"docs/managers/communications-managers/mq-manager/#queue-manager-port-cps-property","title":"Queue manager port CPS Property","text":"Property: Queue manager port CPS Property Name: mq.server.[instanceid].port Description: The queue manager port for the specified instance Required: Yes Default value: None Valid values: Examples: <code>mq.server.[instanceid].port=1414</code>"},{"location":"docs/managers/core-managers/","title":"Core Managers","text":"Artifact Manager <p>Provides access to resources within a test bundle. It also provides templating services.</p> Core Manager <p>The Core Manager provides tests with access to some of the core features within the Galasa Framework. The Core Manager is always initialised and included in a test run and contributes the logger, stored artefact root and test property annotations.</p>"},{"location":"docs/managers/core-managers/artifact-manager/","title":"Artifact Manager","text":"<p>This Manager is at Release level. You can view the Javadoc documentation for the Manager.</p>"},{"location":"docs/managers/core-managers/artifact-manager/#overview","title":"Overview","text":"<p>This Manager allows a test to access files that are stored within the same bundle as the test code itself.  Helper methods are provided to stream and substitute symbolics within the loaded file.</p>"},{"location":"docs/managers/core-managers/artifact-manager/#code-snippets","title":"Code snippets","text":"<p>Use the following code snippets to help you get started with the Artifact Manager.</p>"},{"location":"docs/managers/core-managers/artifact-manager/#create-the-artifact-manager","title":"Create the Artifact Manager","text":"<p>The ArtifactManager allows you to stream resources from within the same bundles as your test class.  The easiest way to accomplish this is to use the BundleResources annotation:</p> <pre><code>@BundleResources\npublic IBundleResources resources;\n</code></pre> <p>The resources object now references the list of resources that are held within the test bundle under /src/main/resources/.  These resources can now be accessed directly by the test code, by calling methods on the resources object.</p> <p>Alternatively, if the resources are within another class, you can use the ArtifactManager annotation to address the Manager directly:</p> <pre><code>@ArtifactManager\npublic IArtifactManager artifacts;\n</code></pre> <p>This will provision an instance of the Artifact Manager.  In order to obtain a IBundleResources object to reference the content of the resources within a test bundle you will need to use the API:</p> <pre><code>IBundleResources resources = artifacts.getBundleResources(this.getClass());\n</code></pre>"},{"location":"docs/managers/core-managers/artifact-manager/#retrieving-the-content-of-a-file-as-a-string","title":"Retrieving the content of a file as a string","text":"<p>The simplest thing that a test might want to do is retrieve the content of a file as a string.  First, an input stream to the file location is constructed and then a helper method is invoked to stream the content as a string.  However, if you wanted to read from the input stream yourself, then that option is available to you.</p> <pre><code>InputStream is = resources.retrieveFile(\"input/hobbit.txt\");\nString textContext = resources.streamAsString(is);\n</code></pre> <p>In this case the file hobbit.txt would be in the location /src/main/resources/input/hobbit.txt.</p> <p>You can stream a string content directly by using the following code:</p> <pre><code>String textContent = resources.retrieveFileAsString(\"/textFiles/test1.txt\");\n</code></pre> <p>This uses the same methods as the previous example but is one less line of code you have to write.</p>"},{"location":"docs/managers/core-managers/artifact-manager/#substituting-variables-into-a-file","title":"Substituting variables into a file","text":"<p>As you read a file from the local bundle you might want to substitute values into the file before retrieving it.  This is called within Galasa as retrieving a skeleton file from the bundle.  The first step is to create a HashMap containing the name of the variables that you want to be substituted in the target file, as well as the value that should be used.</p> <pre><code>HashMap&lt;String, Object&gt; parameters = new HashMap&lt;String, Object&gt;();\nparameters.put(\"ACCOUNT_NUMBER\", \"123456789\");\nparameters.put(\"AMOUNT\", \"50.05\");\n</code></pre> <p>In this case we are adding two items to the HashMap, setting the substitute values for both ACCOUNT_NUMBER and AMOUNT.  This HashMap is then passed to the retrieveSkeletonFile method.</p> <pre><code>InputStream is = resources.retrieveSkeletonFile(\"input/hobbit.txt\", parameters);\nString textContext = resources.streamAsString(is);\n</code></pre> <p>When the file is now retrieved from the local bundle all references to ++ACCOUNT_NUMBER++ and ++AMOUNT++ will be substituted for \"123456789\" and \"50.05\" respectively.  Note that these substitutions are for the instance of the test that is running.  The actual copy of the file in the bundle is unchanged and cannot affect any other instances of the test that are running at the same time.</p> <p>From Galasa 0.8.0 this has been updated to allow you to retrieve the content of a file directly as a string and still perform variable substitution as the following example shows:</p> <pre><code>String textContext = resources.retrieveSkeletonFile(\"input/hobbit.txt\", parameters);\n</code></pre>"},{"location":"docs/managers/core-managers/core-manager/","title":"Core Manager","text":"<p>This Manager is at Release level. You can view the Javadoc documentation for the Manager.</p>"},{"location":"docs/managers/core-managers/core-manager/#overview","title":"Overview","text":"<p>The Core Manager provides tests with access to some of the core features within the Galasa Framework. The Core Manager is always initialised and included in a test run and contributes the <code>Logger</code>, <code>StoredArtifactRoot</code>, <code>ResourceString</code>, <code>RunName</code> and <code>TestProperty</code> annotations.</p> <p>The <code>Logger</code> annotation is provided by the Core Manager to create the log which is then automatically stored in the Result Archive Store (RAS) by the Galasa framework.</p> <p>The <code>StoredArtifactRoot</code> annotation lets your test write specific output to the RAS.  Whilst the Galasa framework automatically sends test output to be stored in the RAS, this annotation enables you to write code to send output specific to your application to be stored. You can use this output for review or to enable compares to be done when tests fail.</p> <p>The Core Manager uses methods including <code>getCredentials</code>, <code>getUsernamePassword</code>, <code>getRunName</code> and <code>ConfidentialText</code> credentials. <code>getCredentials</code> lets you retrieve a user id and password from a file to use in your test as well as other forms of credentials such as tokens, whilst <code>getUsernamePassword</code> lets you retrieve a user id and password only from a file to use in your test and <code>ConfidentialText</code> ensures that the password value is masked. The ability to get credentials from a file means that you do not need to hard code these values in your test and that the test can be run in different environments without the need to change a single line of code. The Core Manager supports Gherkin keywords.</p>"},{"location":"docs/managers/core-managers/core-manager/#including-the-manager-in-a-test","title":"Including the Manager in a test","text":"<p>To use the Core Manager in a test you must import the @CoreManager annotation into the test, as shown in the following example: </p> <pre><code>@CoreManager\npublic ICoreManager coreManager;\n</code></pre> <p>You also need to add the Manager dependency into the pom.xml file if you are using Maven, or into the build.gradle file if you are using Gradle. </p> <p>If you are using Maven, add the following dependencies into the pom.xml in the dependencies section:</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;dev.galasa&lt;/groupId&gt;\n    &lt;artifactId&gt;dev.galasa.core.manager&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre> <p>If you are using Gradle, add the following dependencies into <code>build.gradle</code> in the dependencies closure:</p> <pre><code>dependencies {\n    compileOnly 'dev.galasa:dev.galasa.core.manager'\n}\n</code></pre>"},{"location":"docs/managers/core-managers/core-manager/#configuration-properties","title":"Configuration Properties","text":"<p>The following are properties used to configure the Core Manager:</p>"},{"location":"docs/managers/core-managers/core-manager/#resource-string-pattern-cps-property","title":"Resource String Pattern CPS Property","text":"Property: Resource String Pattern CPS Property Name: core.resource.string.[length].pattern Description: The Resource String Pattern CPS property allows Galasa to form a string based upon a certain standard or pattern, for example, must begin with the letter <code>A</code>, must end with a numeral. The patterns are formed from the Galasa <code>ResourcePoolingService</code> which uses a custom syntax. This property is used when the Core Manager provisions a <code>@ResourceString</code> into a test.  This string can used for anything within the test class, for example, to create new z/OS PDS names, or a piece of data that the test will use. The string must be unique to that test across all the other tests within the Ecosystem. Required: No Default value: {A-Z} for each byte for the specified length Valid values: For each character the value can be a constant or a random choice from a literal, eg {A-Z} results in a single character between A and Z inclusive. {0-9} or {a-zA-Z0-9} are options. DFH{A-Z}{0-1}{0-9}{0-9}{0-9}, results in DFHA1789 for example, the 5<sup>th</sup> character can only be 0 or 1. Examples: <code>core.resource.string.8.length={A-Z}{A-Z}{A-Z}{A-Z}{A-Z}{A-Z}{A-Z}{A-Z}</code>"},{"location":"docs/managers/core-managers/core-manager/#test-property-cps-property","title":"Test Property CPS Property","text":"Property: Test Property CPS Property Name: test.prefix.infix.infix.infix.suffix Description: Enables a test property value to be extracted from the CPS or Overrides file for use in a test. See Code snippets and examples for more information. Required: No Default value: NA Valid values: Any valid string value Examples: <code>test.prefix.infix.suffix=value</code>"},{"location":"docs/managers/core-managers/core-manager/#annotations-provided-by-the-manager","title":"Annotations provided by the Manager","text":"<p>The following annotations are provided by the Core Manager:</p>"},{"location":"docs/managers/core-managers/core-manager/#logger","title":"Logger","text":"Name: Logger Name: @Logger Description: Gives the test access to the log which is then automatically stored in the Result Archive Store (RAS) by the Galasa framework. An object of type <code>Log</code> can be annotated with this annotation. Syntax: <pre>@Loggerpublic Log logger;</pre>"},{"location":"docs/managers/core-managers/core-manager/#resource-string","title":"Resource String","text":"Name: ResourceString Name: @ResourceString Description: A unique (within the ecosystem) string of a set length. The Resource String Pattern CPS property <code>core.resource.string.[length].pattern</code> determines the pattern of the random string. Annotates a public <code>IResource</code> object type Attribute: <code>tag</code> Tag name Attribute: <code>length</code> Default value is 8. Syntax: <pre>@ResourceString(tag = \"tagname\", length=8)public IResourceString resourceString;</pre>"},{"location":"docs/managers/core-managers/core-manager/#run-name","title":"Run Name","text":"Name: RunName Name: @RunName Description: The name of the test run. Can be used for making resource names unique to this run. The test run name is unique across all local and automated runs that are in the system at that point. Syntax: <pre>@RunNamepublic String runName;</pre>"},{"location":"docs/managers/core-managers/core-manager/#stored-artifact-root","title":"Stored Artifact Root","text":"Name: StoredArtifactRoot Name: @StoredArtifactRoot Description: Lets your test write specific output to the RAS. An object of type <code>Path</code> can be annotated with this annotation. Syntax: <code>artifactRoot.resolve(folder).resolve(file);</code>"},{"location":"docs/managers/core-managers/core-manager/#test-property","title":"Test Property","text":"Name: TestProperty Name: @TestProperty Description: Enables a value to be extracted from the CPS or Overrides file for use in the test Attribute: <code>prefix</code> Set the prefix of the property that you want to extract Attribute: <code>suffix</code> Set the suffix of the property that you want to extract Attribute: <code>infixes</code> Set selection precedence on the property that you want to extract. See Code snippets and examples for more information. Default is {} Attribute: <code>required</code> Default is <code>true</code> Syntax: <code>@TestProperty(prefix = \"string\", suffix = \"string\", infixes = \"string\", required = true)</code>"},{"location":"docs/managers/core-managers/core-manager/#code-snippets-and-examples","title":"Code snippets and examples","text":""},{"location":"docs/managers/core-managers/core-manager/#extract-credentials-from-the-galasa-credentials-store","title":"Extract credentials from the Galasa credentials store","text":"<p>You can extract credentials by using the <code>getUsernamePassword</code> method. The Core Manager uses the <code>getUsernamePassword</code> method to retrieve a user id and password from the credentials store to use in your test.</p> <pre><code>import dev.galasa.ICredentials;\nimport dev.galasa.ICredentialsUsernamePassword;\n//...\n\n@Test\n//...\nICredentialsUsernamePassword credentials = coreManger.getUsernamePassword(\"SIMBANK\");\ncredentials.getPassword();\ncredentials.getUsername();\n</code></pre> <p>You can edit the credentials.properties file in your .galasa folder. The following example shows the contents of the credentials.properties file that is set up as part of Galasa SIMBANK tutorials:</p> <pre><code>secure.credentials.SIMBANK.username=IBMUSER\nsecure.credentials.SIMBANK.password=SYS1\n</code></pre>"},{"location":"docs/managers/core-managers/core-manager/#mask-the-value-of-an-extracted-password","title":"Mask the value of an extracted password","text":"<p>To mask the password, for example to prevent it from being displayed in recorded screens, use the Core Manager <code>registerConfidentialText</code> method.</p> <pre><code>coreManager.registerConfidentialText(\"SYS1\", \"IBMUSER password\");\n</code></pre>"},{"location":"docs/managers/core-managers/core-manager/#store-a-request-in-the-test-results-archive","title":"Store a request in the test results archive","text":"<p>Use the following example code to understand how to archive messages in a particular folder and file structure in the RAS:</p> <pre><code>Path requestPath = artifactRoot.resolve(\"communications\").resolve(\"messages\").;\nFiles.write(requestPath, content.getBytes(), new SetContentType(ResultArchiveStoreContentType.TEXT),\nStandardOpenOption.CREATE);\n</code></pre> <p>Messages in the RAS are stored in the following structure:</p> <pre><code>communications\n|\n---messages \n</code></pre> <p>If the folder or file do not exist, it is created by using the <code>resolve</code> method.</p>"},{"location":"docs/managers/core-managers/core-manager/#specify-a-folder-in-the-ras-in-which-to-store-test-result-output","title":"Specify a folder in the RAS in which to store test result output","text":"<p>If you want to produce output to allow compares to be done when tests fail, you can elect a folder in which to store the output by using the @StoredArtifactRoot annotation on an IPath object. </p> <p>Use the following example to understand the code that needs to be added to the test class:</p> <pre><code>@StoredArtifactRoot\n    public Path rasRoot;\nPath jobOutput = \\\nrasRoot.resolve(\"zosBatchJobs\").resolve(\"checkOutputIsStoredInRAS\");\nFiles.write(jobOutput, content.getBytes(), StandardOpenOption.CREATE);\n</code></pre> <p>The <code>resolve</code> method finds the directory (or creates one if needed) and a file is then created in the RAS by using the PATH API.</p>"},{"location":"docs/managers/core-managers/core-manager/#using-the-test-property-annotation","title":"Using the Test Property annotation","text":"<p>This example has the following CPS properties set in the CPS file: </p> <pre><code>test.projectA.first.choice.data=3\ntest.projectA.first.data=2\n</code></pre> <p>where <code>projectA</code> is the prefix, <code>data</code> is the suffix, and <code>first</code> and <code>choice</code> are infixes.</p> <p>The following code is used in the test:</p> <pre><code>@TestProperty(prefix = \"projectA\", suffix = \"data\", infixes = {\"first\",\"choice\"})\npublic String property;\n</code></pre> <p>In this example, if the property test.projectA.first.choice.data is found in the CPS, then this is extracted for use in the test. If test.projectA.first.choice.data is not found, then property test.projectA.first.data is used instead.</p>"},{"location":"docs/managers/core-managers/core-manager/#example-using-the-resource-string-and-logger-annotation","title":"Example - using the Resource String and Logger annotation","text":"<p>The following example imports the @ResourceString annotation and sets the tag name to <code>myString</code> and the string length to <code>4</code>. The value of <code>myResourceString</code> is written to the log which is automatically stored in the Result Archive Store (RAS) by the Galasa framework. </p> <pre><code>@ResourceString(tag=\"myString\", length = 4)\npublic IResourceString myResourceString;\n\n    @Test\n        logger.info(myResourceString.getString());    \n</code></pre>"},{"location":"docs/managers/ecosystem-managers/","title":"Ecosystem Managers","text":"Galasa Ecosystem Manager <p>Deploys an entire Galasa Ecosystem to Kubernetes to enable integration testing against Galasa.</p>"},{"location":"docs/managers/ecosystem-managers/galasa-ecosystem-manager/","title":"Galasa Ecosystem Manager","text":"<p>This Manager is at Alpha level. You can view the Javadoc documentation for the Manager.</p>"},{"location":"docs/managers/ecosystem-managers/galasa-ecosystem-manager/#overview","title":"Overview","text":"<p>This Manager provides the test with a fully provisioned Galasa Ecosystem on which to test.  When the test starts running the test can be assured that all the services are up and working.</p> <p>The Galasa Ecosystem Manager supports Galasa Shared Environments. Shared Environments provide  the ability to create a test environment that can be shared across multiple test runs  so you don't have to provision a test environment for each test.</p>"},{"location":"docs/managers/ecosystem-managers/galasa-ecosystem-manager/#limitations","title":"Limitations","text":"<p>The Manager only supports the following platforms:</p> <ul> <li>Kubernetes Namespace</li> </ul> <p>In the near future, this Manager will be able to provision ecosystems in Docker and on a plain Linux server.</p>"},{"location":"docs/managers/ecosystem-managers/galasa-ecosystem-manager/#annotations","title":"Annotations","text":"<p>The following annotations are available with the Galasa Ecosystem Manager</p>"},{"location":"docs/managers/ecosystem-managers/galasa-ecosystem-manager/#kubernetes-ecosystem","title":"Kubernetes Ecosystem","text":"Annotation: Kubernetes Ecosystem Name: @KubernetesEcosystem Description: The <code>@KubernetesEcosystem</code> annotation requests the Galasa Ecosystem Manager to provision a Galasa Ecosystem within a Kubernetes Namespace. Attribute: <code>ecosystemNamespaceTag</code> The <code>ecosystemNamespaceTag</code> is used to identify the Ecosystem to other Managers or Shared Environments.  If a test is using multiple  Ecosystems, each separate Ecosystem must have a unique tag.  If two Ecosystems use the same tag, they refer to the  same Ecosystem. Attribute: <code>kubernetesNamespaceTag</code> The <code>kubernetesNamespaceTag</code> identifies which tagged Kubernetes Namespace is to be used to deploy the Galasa Ecosystem into. Attribute: <code>yamlDirectory</code> The <code>yamlDirectory</code> points to a resource directory within the test bundle that contains a set of override yaml files to use when creating the  ecosystem.  Each file must end with .yaml to be found.  If a directory or resource is not provided, the stable yaml files within the Galasa Ecosystem Manager will be used. Syntax: <pre>@KubernetesEcosystempublic IKubernetesEcosystem ecosystem;@KubernetesEcosystem(yamlDirectory=\"/k8syaml\")public IKubernetesEcosystem ecosystem;</pre> Notes: The <code>IKubernetesEcosystem</code> interface gives the test access to the URLs of the services and API endpoints within the Ecosystem. When the test runs all the services that are required by the test are known to be up and working.  The test must provide a @KubernetesNamespace IKubernetesNamespace annotation, as this is where the Ecosystem is provisioned in.  In the future, Docker and Linux will be options.  The Galasa Ecosystem has its own stable versions of the Kubernetes yaml files that are needed to create the entire Ecosystem.  If you want to override those and use your own yaml files, then use the yamlDirectory attribute.  If a resource is missing in the test's set, then the stable version is used."},{"location":"docs/managers/ecosystem-managers/galasa-ecosystem-manager/#local-ecosystem","title":"Local Ecosystem","text":"Annotation: Local Ecosystem Name: @LocalEcosystem Description: The <code>@LocalEcosystem</code> annotation requests the Galasa Ecosystem Manager to provision a local running environment on a Linux or Windows instance.   The Local running environment will  use the FPF file configuration and not run any of the servers by default. Attribute: <code>ecosystemTag</code> The <code>ecosystemNamespaceTag</code> is used to identify the Ecosystem to other Managers or Shared Environments.  If a test is using multiple  Ecosystems, each separate Ecosystem must have a unique tag.  If two Ecosystems use the same tag, they refer to the  same Ecosystem. Attribute: <code>linuxImageTag</code> The <code>linuxImageTag</code> identifies which tagged Linux image is to be used to deploy the Galasa Ecosystem into. Attribute: <code>windowsImageTag</code> The <code>windowsImageTag</code> identifies which tagged Windows image is to be used to deploy the Galasa Ecosystem into. Attribute: <code>javaInstallationTag</code> The <code>javaInstallationTag</code> to which Java installation on the image is to be used to run the Galasa tests and services. Attribute: <code>isolationInstallation</code> Syntax: <pre>@LocalEcosystem(linuxImageTag=\"PRIMARY\")public ILocalEcosystem ecosystem;@LocalEcosystem(windowsImageTag=\"PRIMARY\")public ILocalEcosystem ecosystem;</pre> Notes: The <code>ILocalEcosystem</code> interface gives the test access FPF services and the ability to run tests from the commandline. The Manager will pre-configure the CPS, DSS and CREDS before the test begins.  The test must provide a @LocalNamespace ILocalNamespace annotation, as this is where the Ecosystem is provisioned in.  The annotation must provide either a Windows or Linux image tag, but not both and must provide a @JavaInstallation tag."},{"location":"docs/managers/ecosystem-managers/galasa-ecosystem-manager/#code-snippets","title":"Code snippets","text":"<p>Use the following code snippets to help you get started with the Galasa Ecosystem Manager.</p>"},{"location":"docs/managers/ecosystem-managers/galasa-ecosystem-manager/#obtain-a-kubernetes-namespace","title":"Obtain a Kubernetes Namespace","text":"<pre><code>@KubernetesEcosystem\npublic IKubernetesEcosystem ecosystem;\n\n@KubernetesNamespace\npublic IKubernetesNamespace namespace;\n</code></pre> <p>This code requests that the Galasa Ecosystem be provisioned in a Kubernetes Namespace. The default tag for both of them is  PRIMARY.</p>"},{"location":"docs/managers/ecosystem-managers/galasa-ecosystem-manager/#retrieve-the-ras-endpoint","title":"Retrieve the RAS Endpoint","text":"<pre><code>@KubernetesEcosystem\npublic IKubernetesEcosystem ecosystem;\n\nURI ras = ecosystem.getEndpoint(EcosystemEndpoint.RAS);\n</code></pre> <p>This snippet demonstrates how to retrieve the Result Archive Store (RAS) endpoint. Be aware, that the URI is  prefixed with the store type, e.g. couchdb:http://couchdb.server:5984. This is the same for the CPS, DSS and CREDS.</p>"},{"location":"docs/managers/ecosystem-managers/galasa-ecosystem-manager/#set-and-retrieve-a-cps-property","title":"Set and retrieve a CPS property","text":"<pre><code>ecosystem.setCpsProperty(\"bob\", \"hello\");\n\nString value = ecosystem.getCpsProperty(\"bob\")\n</code></pre> <p>Sets the CPS property <code>bob</code> with the value <code>hello</code> and retrieves it again.</p>"},{"location":"docs/managers/ecosystem-managers/galasa-ecosystem-manager/#configuration-properties","title":"Configuration Properties","text":"<p>The following are properties used to configure the Galasa Ecosystem Manager.</p>"},{"location":"docs/managers/ecosystem-managers/galasa-ecosystem-manager/#docker-registry","title":"Docker Registry","text":"Property: Docker Registry Name: galasaecosystem.docker.registry Description: The registry that contains the Docker images Required: No Default value: docker.io Valid values: a valid hostname Examples: <code>galasaecosystem.docker.registry=docker.io</code>"},{"location":"docs/managers/ecosystem-managers/galasa-ecosystem-manager/#docker-image-version","title":"Docker Image Version","text":"Property: Docker Image Version Name: galasaecosystem.docker.version Description: The versions of the Docker images to be used with the Ecosystem Required: Yes Default value: The setting of galasaecosystem.maven.version Valid values: A valid Docker version literial Examples: <code>galasaecosystem.docker.version=0.4.0</code>"},{"location":"docs/managers/ecosystem-managers/galasa-ecosystem-manager/#isolated-full-zip-location","title":"Isolated Full zip location","text":"Property: Isolated Full zip location Name: galasaecosystem.isolated.full.zip Description: The location of the isolated zip for the full distribution Required: No Default value: None Valid values: Valid URL Examples: <code>galasaecosystem.isolated.full.zip=https://resources.galasa.dev/isolated.zip</code>"},{"location":"docs/managers/ecosystem-managers/galasa-ecosystem-manager/#isolated-mvp-zip-location","title":"Isolated MVP zip location","text":"Property: Isolated MVP zip location Name: galasaecosystem.isolated.mvp.zip Description: The location of the isolated zip for the mvp distribution Required: No Default value: None Valid values: Valid URL Examples: <code>galasaecosystem.isolated.mvp.zip=https://github.com/galasa-dev/isolated/releases/download/v0.42.0/galasa-isolated-mvp-0.42.0.zip</code>"},{"location":"docs/managers/ecosystem-managers/galasa-ecosystem-manager/#kubernetes-ecosystem-tag-shared-environment","title":"Kubernetes Ecosystem Tag Shared Environment","text":"Property: Kubernetes Ecosystem Tag Shared Environment Name: galasaecosystem.ecosystem.tag.XXXXXX.shared.environment Description: Tells the Galasa Ecosystem Manager which Shared Environment is assigned to an Ecosystem Tag Required: No Default value: None Valid values: A valid Shared Environment Examples: <code>galasaecosystem.ecosystem.tag.SHARED.shared.environment=M1</code>"},{"location":"docs/managers/ecosystem-managers/galasa-ecosystem-manager/#maven-repository-url","title":"Maven Repository URL","text":"Property: Maven Repository URL Name: galasaecosystem.maven.repository Description: The location of the Maven Repository all artifacts will be downloaded from Required: Yes Default value: None Valid values: Value URL Examples: <code>galasaecosystem.maven.repository=https://nexus.galasa.dev/repository/maven-development</code>"},{"location":"docs/managers/ecosystem-managers/galasa-ecosystem-manager/#maven-use-default-local-repository","title":"Maven use default local repository","text":"Property: Maven use default local repository Name: galasaecosystem.maven.use.default.local.repository Description: The Local ecosystems will use a dedicated local repository, however, this slows the installation, so setting this property to true will use the normal ~/.m2/repository so downloads happen only once per day, useful for rapid development and testings Required: No Default value: false Valid values: true or false Examples: <code>galasaecosystem.maven.use.default.local.repository=true</code>"},{"location":"docs/managers/ecosystem-managers/galasa-ecosystem-manager/#maven-artifact-version","title":"Maven Artifact Version","text":"Property: Maven Artifact Version Name: galasaecosystem.maven.version Description: The versions of the Maven artifacts to be used with the Ecosystem Required: Yes Default value: None Valid values: A valid maven version literial Examples: <code>galasaecosystem.maven.version=0.4.0</code>"},{"location":"docs/managers/ims-tm-managers/","title":"IMS TM Managers","text":"IMS TM Manager <p>Provides configuration information for pre-existing IMS TM systems. Drives provisioning services from other managers, e.g. z/OS 3270 Manager. </p>"},{"location":"docs/managers/ims-tm-managers/ims-tm-manager/","title":"IMS TM Manager","text":"<p>This Manager is at Alpha level. You can view the Javadoc documentation for the Manager.</p>"},{"location":"docs/managers/ims-tm-managers/ims-tm-manager/#overview","title":"Overview","text":"<p>This Manager provides IMS TM functions to Galasa tests. </p>"},{"location":"docs/managers/ims-tm-managers/ims-tm-manager/#testing-in-ims-systems-on-zos","title":"Testing in IMS Systems on z/OS","text":"<p>To connect your Galasa test to a developer supplied environment with a provisioned IMS system as a minimum you need to configure the following property for the IMS TM Manager: </p> <pre><code>imstm.dse.tag.[TAG].applid=[APPLID]\n</code></pre> <p>You also need to configure the following properties for the z/OS Manager as a minimum to connect to an IMS system, even if you do not reference a <code>@ZosImage</code> in your Galasa test. This is because IMS systems sit on a z/OS LPAR, and so to provision and connect to an IMS system in a test, you also need access to the z/OS image that it sits within to make requests on the IMS system. You might need to configure additional z/OS-related CPS properties, depending on your test.</p> <pre><code>zos.dse.tag.[tag].imageid=[IMAGEID]\n    OR zos.tag.[tag].imageid=[IMAGEID] \n    OR zos.cluster.[CLUSTERID].images=[IMAGEID] (AND zos.dse.tag.[tag].clusterid=[CLUSTERID] if [CLUSTERID] is not DEFAULT)\nzos.image.[IMAGEID].ipv4.hostname=[IP ADDRESS]\nzos.image.[IMAGEID].credentials=[CREDENTIALID]\n</code></pre>"},{"location":"docs/managers/ims-tm-managers/ims-tm-manager/#configuration-properties","title":"Configuration Properties","text":"<p>The following are properties that are used to configure the IMS TM Manager in the CPS.</p>"},{"location":"docs/managers/ims-tm-managers/ims-tm-manager/#developer-supplied-environment-ims-tm-system-type","title":"Developer Supplied Environment - IMS TM System - Type","text":"Property: Developer Supplied Environment - IMS TM System - Type Name: imstm.provision.type Description: Provisioners will use this property to determine if they should participate in provisioning. The DSE provisioner responds to <code>dse</code> and <code>mixed</code> (case insensitive). Required: No Default value: dse Valid values: Any Examples: <code>imstm.provision.type=dse</code>"},{"location":"docs/managers/ims-tm-managers/ims-tm-manager/#developer-supplied-environment-ims-tm-system-applid","title":"Developer Supplied Environment - IMS TM System - Applid","text":"Property: Developer Supplied Environment - IMS TM System - Applid Name: imstm.dse.tag.[TAG].applid Description: Provides the applid of the IMS TM system for the DSE provisioner. The applid setting is mandatory for a DSE system. This property is ignored if you set the <code>imstm.provision.type</code> property to specify any value other than <code>dse</code> or <code>mixed</code>. Required: Yes if you want a DSE system, otherwise not required. Default value: None Valid values: A valid VTAM applid Examples: <code>imstm.dse.tag.PRIMARY.applid=IM1A</code>"},{"location":"docs/managers/ims-tm-managers/ims-tm-manager/#developer-supplied-environment-ims-tm-system-version","title":"Developer Supplied Environment - IMS TM System - Version","text":"Property: Developer Supplied Environment - IMS TM System - Version Name: imstm.dse.tag.versionimstm.dse.tag.[TAG].version Description: Provides the version of the IMS TM system to user tests. Required: Only requires setting if a test requests it. Default value: None Valid values: A valid V.R.M version format, e.g. 15.5.0 Examples: <code>imstm.dse.tag.PRIMARY.version=15.5.0</code>"},{"location":"docs/managers/ims-tm-managers/ims-tm-manager/#provided-annotation","title":"Provided annotation","text":"<p>The following annotations are available with the IMS TM Manager</p>"},{"location":"docs/managers/ims-tm-managers/ims-tm-manager/#ims-system","title":"IMS System","text":"Annotation: IMS System Name: @ImsSystem Description: The <code>@ImsSystem</code> annotation requests the IMS TM Manager to provide an IMS TM System associated with a z/OS image.  The test can request multiple IMS Systems. Attribute: <code>imsTag</code> The <code>imsTag</code> is used to identify the IMS System. Optional. The default value is PRIMARY. Attribute: <code>imageTag</code> The <code>imageTag</code> is used to identify the associated z/OS image. Optional. The default value is PRIMARY Syntax: <pre>@ImsSystem(imsTag=\"A\", imageTag=\"MVSA\")public IImsSystem imsSystemA;</pre> Notes: The <code>IImsSystem</code> interface defines <code>getTag()</code>, <code>getApplid()</code>, <code>getVersion()</code>, and <code>getZosImage()</code> methods for accessing the IMS System's attributes. The behaviour of the remaining methods are dependent on the provisioner that supplies the <code>IImsSystem</code> object. For the DSE provisioner, <code>isProvisionStart()</code> always returns <code>true</code>, while <code>startup()</code> and <code>shutdown()</code> always throw an exception."},{"location":"docs/managers/ims-tm-managers/ims-tm-manager/#ims-terminal","title":"IMS Terminal","text":"Annotation: IMS Terminal Name: @ImsTerminal Description: The <code>@ImsTerminal</code> annotation requests the IMS TM Manager to provide a 3270 terminal associated with an IMS System.  The test can request multiple IMS Terminals for each IMS System. Each <code>@ImsTerminal</code> annotation requires a corresponding <code>@ImsSystem</code> annotation in the same test class. Attribute: <code>imsTag</code> The <code>imsTag</code> is used to identify the IMS System. Optional. The default value is PRIMARY. Attribute: <code>connectAtStartup</code> If <code>connectAtStartup=true</code> the terminal will be connected and signed on to the associated IMS System when control is passed to the test. Optional. The default value is true Attribute: <code>loginCredentialsTag</code> The <code>loginCredentialsTag</code> is used to identify the credentials that will be used to sign on to the IMS System. Required. Syntax: <pre>@ImsTerminal(imsTag=\"A\", connectAtStartup=true, loginCredentialsTag=\"USER01\")public IImsTerminal terminalA;</pre> Notes: The <code>IImsTerminal</code> interface defines <code>getImsSystem()</code>, <code>connectToImsSystem()</code>, <code>resetAndClear()</code>, and <code>getLoginCredentialsTag()</code> methods in addition to all methods defined for the <code>ITerminal</code> interface."},{"location":"docs/managers/logging-managers/","title":"Logging Managers","text":"ElasticLog Manager <p>Exports test results to ElasticSearch, which can be subsequently used within Kibana dashboards.</p>"},{"location":"docs/managers/logging-managers/elasticlog-manager/","title":"ElasticLog Manager","text":"<p>This Manager is at Alpha level.</p>"},{"location":"docs/managers/logging-managers/elasticlog-manager/#overview","title":"Overview","text":"<p>This Manager exports test results to an elastic search endpoint, where the data can be visualized on a Kibana dashboard.  Other Managers can contribute to the information that is exported to Elastic.</p> <p>As an absolute minimum, the CPS properties <code>elasticlog.endpoint.address</code> and <code>elasticlog.endpoint.index</code> must be provided.</p> <p>By default, this Manager only logs automated tests. To enable logging from locally run tests, <code>elasticlog.local.run.log</code> must be set to true.</p> <p>The bundle must also be loaded by the framework by using <code>framework.extra.bundles=dev.galasa.elasticlog.manager</code> in bootstrap.properties.</p> <p>This Manager provides two ElasticSearch indexes; one of all test data, and one of the latest run for each test case and each test environment.</p>"},{"location":"docs/managers/logging-managers/elasticlog-manager/#limitations","title":"Limitations","text":"<p>The Manager logs the following test information:</p> <ul> <li>testCase</li> <li>runId</li> <li>startTimestamp</li> <li>endTimestamp</li> <li>requestor</li> <li>result</li> <li>testTooling</li> <li>testType</li> <li>testingEnvironment</li> <li>productRelease</li> <li>buildLevel</li> <li>customBuild</li> <li>testingAreas</li> <li>tags</li> </ul> <p>If additional testing information is required, please raise a GitHub issue.</p>"},{"location":"docs/managers/logging-managers/elasticlog-manager/#configuration-properties","title":"Configuration Properties","text":"<p>The following are properties used to configure the ElasticLog Manager.</p>"},{"location":"docs/managers/logging-managers/elasticlog-manager/#elasticlog-endpoint-address-cps-property","title":"ElasticLog Endpoint Address CPS Property","text":"Property: ElasticLog Endpoint Address CPS Property Name: elastic.endpoint.address Description: Provides an address to send elastic requests to Required: Yes Default value: $default Valid values: Any valid URI string Examples: <code>elastic.endpoint.address=https://yoursitehere.com/elasticendpoint</code>"},{"location":"docs/managers/logging-managers/elasticlog-manager/#elasticlog-endpoint-index-cps-property","title":"ElasticLog Endpoint Index CPS Property","text":"Property: ElasticLog Endpoint Index CPS Property Name: elastic.endpoint.index Description: Provides the index in elasticsearch to which requests are directed Required: Yes Default value: $default Valid values: Any lowercase, single-word string Examples: <code>elastic.endpoint.index=galasa</code> <p>If the index does not exist, the index is created and is mapped to the Galasa run.</p> <p>If the index exists, it must be mapped to the relevant Galasa run.</p>"},{"location":"docs/managers/logging-managers/elasticlog-manager/#elasticlog-endpoint-local-run-cps-property","title":"ElasticLog Endpoint Local Run CPS Property","text":"Property: ElasticLog Endpoint Local Run CPS Property Name: elastic.local.run.log Description: Activates the ElasticLog Manager for local runs Required: Yes Default value: false Valid values: true, false Examples: <code>elastic.local.run.log=true</code> <p>ElasticLog Manager will not run automatically for a local run.</p> <p>By setting this property to true, the manager will activate locally.</p>"},{"location":"docs/managers/test-tool-managers/","title":"Test Tool Managers","text":"JMeter Manager <p>Configures and runs JMeter testing via Docker containers.</p> SDV Manager <p>Create an automated test in Galasa and use the SDV Manager to record the security used during your test.</p> Selenium Manager <p>Allows tests to drive Web Browser testing using Selenium.</p> VTP Manager <p>Create an automated test in Galasa and use the VTP Manager to record the interactions between the test and your CICS programs.</p>"},{"location":"docs/managers/test-tool-managers/jmeter-manager/","title":"JMeter Manager","text":"<p>This Manager is at Beta level. You can view the Javadoc documentation for the Manager.</p>"},{"location":"docs/managers/test-tool-managers/jmeter-manager/#overview","title":"Overview","text":"<p>This Manager enables a JMeter session to run inside a Docker Container. The JMeter Manager requests a container from the Docker Manager inside which the JMeter scripts, or JMX files can run.   The test can access all JMeter-generated files inside the container without worrying about how the container is provisioned, maintained or shut down at the end of test. By using a containerized environment, the test can benefit from the associated standards of scalability and uniformity.</p> <p>The logfiles and generated CSV files can be accessed once the JMeter tests are complete and the container becomes available for interaction. The JMeter Manager allows as many JMeter sessions as you have available Docker container slots on your machine.</p>"},{"location":"docs/managers/test-tool-managers/jmeter-manager/#limitations","title":"Limitations","text":"<p>JMeter tests cannot be run remotely on a target host.</p>"},{"location":"docs/managers/test-tool-managers/jmeter-manager/#code-snippets","title":"Code snippets","text":"<p>Use the following code snippets to help you get started with the JMeter Manager.</p>"},{"location":"docs/managers/test-tool-managers/jmeter-manager/#creating-a-jmeter-session","title":"Creating a JMeter session","text":"<p>The following snippet shows the minimum code that is required to request a JMeter session in a Galasa test:</p> <pre><code>@JMeterSession(jmxPath=\"test.jmx\")\npublic IJMeterSession session;\n</code></pre> <p>This code requests the Docker Manager to provision a container with all the JMeter binaries that are required to run a JMX test installed. You can provision your JMX file via the Artifact Manager and point it to the bundle resources, the location of which is specified in the input stream of your JMX file. The container is discarded when the test finishes. </p> <p>The following snippet enables you to add a personal properties file to the test by pointing the Artifact Manager at the JMeter properties file.</p> <pre><code>@JMeterSession(jmxPath=\"test.jmx\", propPath=\"jmeter.properties\")\npublic IJMeterSession session;\n</code></pre> <p>There is no limit in Galasa on the number of JMeter sessions that can be used within a single test. The only limit is the number of containers that can be started in the Galasa Ecosystem. This limit is set by the Galasa Administrator and is typically set to the maximum number of containers that can be supported by the Docker Server or Swarm.  If there are not enough slots available for an automated run, the run is put back on the queue in waiting state to retry. Local test runs fail if there are not enough container slots available.</p>"},{"location":"docs/managers/test-tool-managers/jmeter-manager/#setting-a-jmx-file-in-a-jmeter-session-by-using-the-artifact-manager","title":"Setting a JMX file in a JMeter session by using the Artifact Manager","text":"<p>Use the following code to provision a JMX file by using the Artifact Manager.</p> <pre><code>IBundleResources bundleResources = artifactManager.getBundleResources(getClass());\nInputStream jmxStream = bundleResources.retrieveFile(\"/test.jmx\");\nsession2.setJmxFile(jmxStream);\n</code></pre>"},{"location":"docs/managers/test-tool-managers/jmeter-manager/#setting-the-properties-file-in-a-jmeter-session-by-using-the-artifact-manager","title":"Setting the properties file in a JMeter session by using the Artifact Manager","text":"<p>Just as you would provision a JMX file via the Artifact Manager, you can use the following code to provision a personalized properties file that gets used by JMeter at runtime.</p> <pre><code>IBundleResources bundleResources = artifactManager.getBundleResources(getClass());\nInputStream propStream = bundleResources.retrieveFile(\"/jmeter.properties\");\nsession.applyProperties(propStream);\n</code></pre>"},{"location":"docs/managers/test-tool-managers/jmeter-manager/#starting-a-jmeter-session","title":"Starting a JMeter session","text":"<p>You can set a timeout for a JMeter session or use the default timeout of 60 seconds for a JMeter session. To use this command, you must configure the JMX file correctly by using the <code>session.setJmxFile(inputStream)</code> method. Timeout is in milli-seconds.</p> <pre><code>session.startJmeter();\n//...\nsession.startJmeter(60000);\n</code></pre>"},{"location":"docs/managers/test-tool-managers/jmeter-manager/#obtaining-the-jmx-file-from-the-jmeter-execution-as-a-string","title":"Obtaining the JMX file from the JMeter-execution as a String","text":"<p>Use the following snippet to access the JMX file that was used in the JMeter session.</p> <pre><code>session.getJmxFile();\n</code></pre>"},{"location":"docs/managers/test-tool-managers/jmeter-manager/#obtaining-the-log-file-from-the-jmeter-execution-as-a-string","title":"Obtaining the log file from the JMeter execution as a String","text":"<p>Use the following snippet to access the log file that is created when the JMX file that is running inside the container finishes running.</p> <pre><code>session.getLogFile();\n</code></pre>"},{"location":"docs/managers/test-tool-managers/jmeter-manager/#viewing-the-console-output-as-a-string","title":"Viewing the console output as a String","text":"<p>Use the following snippet to view any console output that is generated by the JMeter test run. Typically, there is no console output unless the JMX file itself is corrupt or written incorrectly. If a correctly written JMX file generates errors during execution, the errors are held in the log files or in the JTL file.</p> <pre><code>session.getConsoleOutput();\n</code></pre>"},{"location":"docs/managers/test-tool-managers/jmeter-manager/#obtaining-a-generated-file-from-the-jmeter-execution-as-a-string","title":"Obtaining a generated file from the JMeter-execution as a String","text":"<p>Use the following snippet to help you to access any file that is created after execution of a JMX file inside a container completes. In this example, the JTL file test.jtl is returned as a String containing the results of the test run which can be exported to a CSV file. The name of the JTL file has the same prefix as the JMX file.</p> <pre><code>session.getListenerFile(\"test.jtl\")\n</code></pre>"},{"location":"docs/managers/test-tool-managers/jmeter-manager/#checking-your-test-ran-correctly","title":"Checking your test ran correctly","text":"<p>Use the following code to check that the test ran correctly. You can use the logs and JMX files for further investigation. If the JMX file has completed its function successfully, a boolean value of true is returned, otherwise a value of false is returned.</p> <pre><code>session.statusTest();\n</code></pre>"},{"location":"docs/managers/test-tool-managers/jmeter-manager/#stopping-the-jmeter-test","title":"Stopping the JMeter test","text":"<p>Use the following code to stop the JMeter test that is running inside the Docker container.</p> <pre><code>session.stopTest();\n</code></pre>"},{"location":"docs/managers/test-tool-managers/sdv-manager/","title":"SDV Manager","text":"<p>This Manager is at Alpha level.</p>"},{"location":"docs/managers/test-tool-managers/sdv-manager/#overview","title":"Overview","text":"<p>Create an automated integration test in Galasa and use the Security Definition Validation (SDV) Manager to obtain a report of the Security Definitions that would have been required if Resource Security and Command Security were turned on.</p> <p>To achieve this, your tests should be role-based. Users belonging to particular roles should be used throughout your tests. Their interactions on each unique CICS region under test and the resulting Security Definitions of those interactions, will be recorded.</p> <p>The Security Definitions found in the test will be available as a report within the <code>sdv</code> folder of the test runs Stored Artifacts, in human-readable, YAML format. If no Security Definitions were witnessed in a test run, the report will contain a message indicating this. The reports will be grouped and named, firstly by the Java test package name, then secondly by each tested CICS region tag within the test class. For example:</p> <pre><code>dev.galasa.sdv.tests/dev.galasa.sdv.tests.featurea.TestClassOne.SDVCICSA.cics-security.yaml\ndev.galasa.sdv.tests/dev.galasa.sdv.tests.featurea.TestClassOne.SDVCICSB.cics-security.yaml\ndev.galasa.sdv.tests/dev.galasa.sdv.tests.featureb.TestClassTwo.SDVCICSA.cics-security.yaml\n</code></pre> <p>Users must be obtained for use within your test via the <code>@SdvUser</code> annotation. This annotation will allocate the test a user belonging to a role mapped to the provided <code>roleTag</code> (see SDV Role CPS Property below), for use on a provided CICS region via the provided <code>cicsTag</code>. All Security Definitions used by this user on the specified CICS region will be recorded. If the user interacts with a CICS region different from the stated one, those security accesses will not be recorded, a seperate <code>@SdvUser</code> would need to be declared to record those interactions. If a <code>cicsTag</code> is not provided, <code>PRIMARY</code> is assumed. Users are allocated from a pool of users. As an example, the following obtains a user which will conduct interactions on CICS Region tag <code>A</code> that belongs to the role mapped to the <code>R1</code> roleTag in the CPS properties:</p> <pre><code>@SdvUser(cicsTag = \"A\", roleTag = \"R1\")\npublic ISdvUser user1;\n</code></pre> <p>The SDV manager will ensure that a user is only allocated to one test, per CICS Region at any one time to avoid Security Definition \"noise\". When a test run ends, the user will be released back to the pool for the next test to use. If there are no available users in the pool because they are all already allocated, the test will fail with an <code>ResourceUnavailableException</code>. The Galasa framework will then continue to re-attempt to run the test at fixed periods of time until a user is available and the test can run.</p> <p>To ensure the Security Definitions are consistent for each run of a test, any resources that are created by the test should have a fixed name. As an example, if a datetime stamp is used in a resource naming strategy, this would be different each time the test is ran, therefore the Security YAML will be different each test run, which will be found if running any kind of before/after comparison.</p> <p>This manager can be used within a Continuous Integration pipeline to identify, and validate changes in Security Definitions as a result of a request to change application, or test code. Contributing towards a larger DevSecOps strategy. Visit the CICS TS documentation for an introduction to the concept and for links to a demonstration of this in action in an example CI pipeline.</p>"},{"location":"docs/managers/test-tool-managers/sdv-manager/#prerequisites","title":"Prerequisites","text":"<p>CICS feature, Security Definition Capture (SDC) must be active in each region under test for the SDV to function. SDC can be manually configured before using the SDV manager or it can be automatically configured by the SDV manager before the test is ran using the relevant CPS properties in the Configuring section.</p> <p>To use the SDV Manager, the test class must contain at least one <code>@SdvUser</code> annotation. If one is not provided, the SDV Manager is not invoked and the Galasa test will run as normal without Security recording.</p> <p>At least one z/OS user must exist for each role defined in your configuration. All pool users should be manually created in the z/OS system' Security DB, with membership to the correct roles, with the correct permissions.</p> <p>All pool users must be added to the Galasa credentials store, assigned with a unique credentials tag.</p> <p>All CICS regions under test must be provisioned to a started state before the SDV manager runs, and region must be running when test ends in-order to run job to gather Security reports. Exceptions will be encountered if either of these scenarios do not exist.</p> <p>All CICS regions under test must have SIT parameter <code>SEC=YES</code>.</p>"},{"location":"docs/managers/test-tool-managers/sdv-manager/#configuration-properties","title":"Configuration Properties","text":"<p>The following properties are used to configure the SDV Manager.</p>"},{"location":"docs/managers/test-tool-managers/sdv-manager/#sdv-region-hlq-cps-property","title":"SDV Region HLQ CPS Property","text":"Property: SDV Region HLQ CPS Property Name: sdv.cicsTag.[cicsTag].hlq Description: The HLQ for each CICS region used in testing. Used to locate YAML job script. Required: Yes Default value: None Valid values: CICS.INSTALL Examples: <code>sdv.cicsTag.A.hlq=CICS.INSTALL</code>"},{"location":"docs/managers/test-tool-managers/sdv-manager/#sdv-pool-users-cps-property","title":"SDV Pool Users CPS Property","text":"Property: SDV Pool Users CPS Property Name: sdv.zosImage.[imageID].role.[Role].credTags Description: A list of Galasa Credential tags belonging to a role, for a given z/OS image. Required: Yes Default value: None Valid values: USER1,USER2 Examples: <code>sdv.zosImage.IMAGEA.role.TELLER.credTags=USER1,USER2</code>"},{"location":"docs/managers/test-tool-managers/sdv-manager/#sdv-port-cps-property","title":"SDV Port CPS Property","text":"Property: SDV Port CPS Property Name: sdv.cicsTag.[cicsTag].port Description: The port the SDC service listens on, on a given CICS region. Required: Yes Default value: None Valid values: 32000 Examples: <code>sdv.cicsTag.A.port=32000</code>"},{"location":"docs/managers/test-tool-managers/sdv-manager/#sdv-role-cps-property","title":"SDV Role CPS Property","text":"Property: SDV Role CPS Property Name: sdv.roleTag.[roleTag].role Description: The Role tag mapping to a role name. Required: Yes Default value: None Valid values: TELLER Examples: <code>sdv.roleTag.A.role=TELLER</code>"},{"location":"docs/managers/test-tool-managers/sdv-manager/#sdv-sdc-activation-cps-property","title":"SDV SDC Activation CPS Property","text":"Property: SDV SDC Activation CPS Property Name: sdv.cicsTag.[cicsTag].SdcActivation Description: Should the SDV Manager configure and activate SDC, and all its pre-requisites?Done on a per-region basis and will remove all created resources at the end of the test (minus the SRR logstream).Will configure the SDC service to listen on the port specified via property <code>sdv.cicsTag.[cicsTag].port</code>.Should be considered when using temporarily provisioned CICS regions for test. Required: No Default value: false Valid values: true, false Examples: <code>sdv.cicsTag.A.SdcActivation=true</code>"},{"location":"docs/managers/test-tool-managers/sdv-manager/#sdv-srr-logstream-removal-cps-property","title":"SDV SRR Logstream Removal CPS Property","text":"Property: SDV SRR Logstream Removal CPS Property Name: sdv.cicsTag.[cicsTag].SrrLogstreamRemoval Description: Should the SDV Manager delete the SRR Journal and model at the end of a test?Done on a per-region basis. Should be considered when using temporarily provisioned CICS regions for test. Required: No Default value: false Valid values: true, false Examples: <code>sdv.cicsTag.A.SrrLogstreamRemoval=true</code>"},{"location":"docs/managers/test-tool-managers/selenium-manager/","title":"Selenium Manager","text":"<p>This Manager is at Beta level. You can view the Javadoc documentation for the Manager.</p>"},{"location":"docs/managers/test-tool-managers/selenium-manager/#overview","title":"Overview","text":"<p>This Manager enables the test to run Selenium WebDrivers in order to drive Web Browsers during the test. Browsers can have actions performed against them  to navigate WebPages and extract information about the current page.</p> <p>As an absolute minimum, the CPS property <code>selenium.instance.PRIMARY.gecko.path</code> must be provided as the Manager will default to using a GECKO WebDriver if no WebDriver is provided.</p> <p>The CPS property <code>selenium.instance.PRIMARY.web.driver</code> can be used to set a different WebDriver. This will also require the corresponding driver path to be set.</p> <p>eg. <code>selenium.instance.PRIMARY.web.driver=CHROME</code> requires <code>selenium.instance.PRIMARY.chrome.path=...</code></p>"},{"location":"docs/managers/test-tool-managers/selenium-manager/#limitations","title":"Limitations","text":"<p>The Selenium Manager only supports GECKO, CHROME, EDGE and IE WebDrivers.</p>"},{"location":"docs/managers/test-tool-managers/selenium-manager/#code-snippets","title":"Code snippets","text":"<p>Use the following code snippets to help you get started with the Selenium Manager.</p>"},{"location":"docs/managers/test-tool-managers/selenium-manager/#create-the-selenium-manager","title":"Create the Selenium Manager","text":"<p>The following snippet shows the minimum code that is required to request the Selenium Manager in a test:</p> <pre><code>@SeleniumManager\npublic ISeleniumManager seleniumManager;\n</code></pre> <p>The code creates an interface to the Selenium Manager which will allow the tester to provision web pages to test against.</p>"},{"location":"docs/managers/test-tool-managers/selenium-manager/#open-a-web-page","title":"Open a Web Page","text":"<pre><code>IWebPage page = seleniumManager.allocateWebPage(\"https://galasa.dev/\");\n</code></pre> <p>The code opens a Web Page with a Selenium WebDriver controlling the browser. This object provides an interface for the tester to perform actions on the page to navigate around, check the page content and switch between windows.</p> <p>At the end of the test, the Selenium Manager automatically closes the WebDriver which removes the WebPage.</p> <p>There is no limit in Galasa on how many Selenium WebPages can be used within a single test. The only limit is the ability of the Galasa Ecosystem they are running on to support the number of Selenium WebDrivers ensuring that they do not time out.</p>"},{"location":"docs/managers/test-tool-managers/selenium-manager/#navigating-around-a-web-page-browser","title":"Navigating around a web page browser","text":"<pre><code>page.clearElementByCssSelector(\"input.js-search-input.search__input--adv\");\npage.sendKeysToElementByClass(\"js-search-input.search__input--adv\", \"Galasa\");\npage.clickElementById(\"search_button_homepage\");\n</code></pre> <p>The code showcases different actions which can be performed on a web page interface to interact with different WebElements on the Browser. These WebElements are selected using a range of different techniques which allows the tester flexibility in how they are selected.</p>"},{"location":"docs/managers/test-tool-managers/selenium-manager/#extracting-web-page-information","title":"Extracting web page information","text":"<pre><code>WebElement element = page.findElementById(\"search_button_homepage\");\nString pageTitle = page.getTitle();\nString pageSource = page.getPageSource();\n</code></pre> <p>The code shows different ways of gaining information about the web page to be tested against. Extracting the title is a very simple way of checking if the WebDriver is on the correct page and making sure that a WebElement is found.</p>"},{"location":"docs/managers/test-tool-managers/selenium-manager/#configuration-properties","title":"Configuration Properties","text":"<p>The following are properties used to configure the Selenium Manager.</p>"},{"location":"docs/managers/test-tool-managers/selenium-manager/#selenium-available-drivers-cps-property","title":"Selenium Available Drivers CPS Property","text":"Property: Selenium Available Drivers CPS Property Name: selenium.driver.type Description: Describes the selenium driver types that can be selected. Required: No Default value: $default Valid values: A valid String the describes any of the supported drivers: FIREFOX,CHROME,OPERA,EDGE Examples: <code>selenium.available.drivers=CHROME,FIREFOX,OPERA,EDGE</code>"},{"location":"docs/managers/test-tool-managers/selenium-manager/#selenium-default-driver-cps-property","title":"Selenium Default Driver CPS Property","text":"Property: Selenium Default Driver CPS Property Name: selenium.default.driver.type Description: If set, describes the default the selenium driver that will be used. Required: No Default value: $default Valid values: A valid String representation of a type. Available choices: local, docker, kubernetes, grid Examples: <code>selenium.default.driver=FIREFOX</code>"},{"location":"docs/managers/test-tool-managers/selenium-manager/#selenium-driver-version-for-containerised-node","title":"Selenium Driver Version for Containerised Node","text":"Property: Selenium Driver Version for Containerised Node Name: selenium.image.node.version Description: Provides the version number for the docker image that will be used for both the provisioning of docker and kubernetes selenium nodes. Required: no Default value: $default Valid values: 4.0.0-beta-2-20210317 Examples: <code>selenium.image.node.version=4.0.0-beta-2-20210317</code>"},{"location":"docs/managers/test-tool-managers/selenium-manager/#selenium-driver-max-slots-cps-property","title":"Selenium Driver Max Slots CPS Property","text":"Property: Selenium Driver Max Slots CPS Property Name: selenium.driver.max.slots Description: Allows number of concurrent drivers to be limited. If docker selected, the docker slot limit will also be enforced Required: No Default value: $default Valid values: Int value for number of congruent drivers Examples: <code>selenium.driver.max.slots=3</code>"},{"location":"docs/managers/test-tool-managers/selenium-manager/#selenium-gecko-preferences-cps-property","title":"Selenium Gecko Preferences CPS Property","text":"Property: Selenium Gecko Preferences CPS Property Name: selenium.local.gecko.preferences Description: Provides extra preferences to use when using the gecko driver for extensions Required: No Default value: $default Valid values: A comma seperated list of key value pairs for the preferences Examples: <code>selenium.local.gecko.preferences=app.update.silent=false,dom.popup_maximum=0</code>"},{"location":"docs/managers/test-tool-managers/selenium-manager/#selenium-gecko-profile-cps-property","title":"Selenium Gecko Profile CPS Property","text":"Property: Selenium Gecko Profile CPS Property Name: selenium.local.gecko.profile Description: Provides a profile to use when using the gecko driver for extensions Required: No Default value: $default Valid values: A valid String name of a profile Examples: <code>selenium.local.gecko.profile=default</code>"},{"location":"docs/managers/test-tool-managers/selenium-manager/#selenium-grid-endpoint-cps-property","title":"Selenium Grid Endpoint CPS Property","text":"Property: Selenium Grid Endpoint CPS Property Name: selenium.grid.endpoint Description: States the grid endpoint Required: No Default value: $default Valid values: ip's and hostnames for a selenium grid Examples: <code>selenium.grid.endpoint=127.0.0.1:4444</code>"},{"location":"docs/managers/test-tool-managers/selenium-manager/#selenium-kubernetes-namespace","title":"Selenium Kubernetes Namespace","text":"Property: Selenium Kubernetes Namespace Name: selenium.kubernetes.namespace Description: Provides the name of the namespace for the nodes to be provisioned on Required: Yes Default value: $default Valid values: A valid String representation an available namespace on your k8's cluster Examples: <code>selenium.kubernetes.namespace=galasa</code>"},{"location":"docs/managers/test-tool-managers/selenium-manager/#selenium-node-selector-cps-property","title":"Selenium Node Selector CPS Property","text":"Property: Selenium Node Selector CPS Property Name: selenium.kubernetes.node.selector Description: Node Selector tags to be added to the pod yaml that runs the Selenium Grid inside a k8's cluster. Multiple selectors can be passed comma seperated Required: No Default value: $default Valid values: Comma seperated list of any node selectors: beta.kubernetes.io/arch: amd64, platform: myplatform Examples: <code>selenium.kubernetes.node.selector=beta.kubernetes.io/arch: amd64</code>"},{"location":"docs/managers/test-tool-managers/selenium-manager/#selenium-driver-path-cps-property","title":"Selenium Driver Path CPS Property","text":"Property: Selenium Driver Path CPS Property Name: selenium.local.driver.BROWSER.path Description: Provides a path to a local webdriver on the system being tested Required: Yes Default value: $default Valid values: A valid String representation of a path Examples: <code>selenium.local.driver.CHROME.path=/usr/bin/chromedriver</code>"},{"location":"docs/managers/test-tool-managers/selenium-manager/#selenium-screenshot-failure-cps-property","title":"Selenium Screenshot Failure CPS Property","text":"Property: Selenium Screenshot Failure CPS Property Name: selenium.screenshot.failure Description: Takes a screenshot on a test method failing Required: No Default value: $default Valid values: true or false Examples: <code>selenium.screenshot.failure=true</code>"},{"location":"docs/managers/test-tool-managers/selenium-manager/#selenium-driver-type-cps-property","title":"Selenium Driver Type CPS Property","text":"Property: Selenium Driver Type CPS Property Name: selenium.driver.type Description: Describes the selenium runtime that will be used. Required: No Default value: $default Valid values: A valid String representation of a type. Available choices: local, docker, kubernetes, grid Examples: <code>selenium.driver.type=docker</code>"},{"location":"docs/managers/test-tool-managers/vtp-manager/","title":"VTP Manager","text":"<p>This Manager is at Release level.</p>"},{"location":"docs/managers/test-tool-managers/vtp-manager/#overview","title":"Overview","text":"<p>Create an automated integration test in Galasa and use the VTP Manager to transparently record the interactions between the test and your CICS programs. Play back the recorded file by using IBM Z Virtual Test Platform (ZVTP). Playing back the recording in ZVTP means that you can test a change to your application code without running the test inside CICS. Run the recorded tests as part of your regression testing strategy before and after code changes to detect any anomalies. </p> <p>The VTP Manager can configure ZVTP by using CICS transactions to start and stop recording on a CICS region. After all recordings are complete, the VTP recording is exported as a sequence of flat files to the specified HLQ.  </p> <p>Recordings are saved in the format <code>&lt;HLQ_FROM_CPS&gt;.&lt;RUNID&gt;.R&lt;number&gt;</code> where <code>number</code> is the number of the recorded test method. For example <code>CTS.JBLOGGS.VTP.R1234.R1</code>.</p> <p>The RAS is updated with a file that details the recordings that were made. For example:</p> <pre><code>Method: test1 exported as: CTS.JBLOGGS.VTP.L877.R1\nMethod: test2 exported as: CTS.JBLOGGS.VTP.L877.R2\n</code></pre>"},{"location":"docs/managers/test-tool-managers/vtp-manager/#prerequisites","title":"Prerequisites","text":"<p>IBM Virtual Test Platform must be installed and configured in the target CICS region. </p> <p>To use the VTP Manager, VTP recording must be enabled and the test class must contain @CicsRegion annotations. A high-level qualifier (HLQ) must be defined in the CPS in order to write the recording. </p> <p>To enable VTP recording, set <code>vtp.recording.enable</code> to true in the CPS properties file.</p> <p>If VTP recording is enabled but no fields annotated with @CICSRegion are contained in the test class, the following message is returned VTP Recording enabled but test class contains no CICS TS fields - recording will not be attempted.</p>"},{"location":"docs/managers/test-tool-managers/vtp-manager/#configuration-properties","title":"Configuration Properties","text":"<p>The following properties are used to configure the VTP Manager.</p>"},{"location":"docs/managers/test-tool-managers/vtp-manager/#vtp-playback-hlq-cps-property","title":"VTP Playback HLQ CPS Property","text":"Property: VTP Playback HLQ CPS Property Name: vtp.playback.hlq Description: The HLQ that is used to create VTP recording files Required: Yes Default value: None Valid values: VTP.RECORD Examples: <code>vtp.playback.hlq=VTP.RECORD</code>"},{"location":"docs/managers/test-tool-managers/vtp-manager/#vtp-cics-transactions-cps-property","title":"VTP CICS Transactions CPS Property","text":"Property: VTP CICS Transactions CPS Property Name: vtp.cics.[instanceid].transactions Description: A list of transactions to record in this CICS region Required: No Default value: None Valid values: trx1,trx2 Examples: <code>vtp.cics.PRIMARY.transactions=TSQT,TSQD</code>"},{"location":"docs/managers/test-tool-managers/vtp-manager/#enable-vtp-recording-cps-property","title":"Enable VTP Recording CPS Property","text":"Property: Enable VTP Recording CPS Property Name: vtp.recording.enable Description: Should the VTP Manager be activated for this run Required: No Default value: false Valid values: true, false Examples: <code>vtp.recording.enable=true</code>"},{"location":"docs/managers/unix-managers/","title":"Unix Managers","text":"Linux Manager <p>Connect to a Linux image and run commands on that image via the command shell. Drive provisioning of images by using other Managers, for example, the OpenStack Manager. The Linux Manager depends on the IP Network Manager to provide the IP connection to the Linux image.</p>"},{"location":"docs/managers/unix-managers/linux-manager/","title":"Linux Manager","text":"<p>This Manager is at Alpha level. You can view the Javadoc documentation for the Manager.</p>"},{"location":"docs/managers/unix-managers/linux-manager/#overview","title":"Overview","text":"<p>This Manager provides the tester with the capability to connect to a Linux image as part of a test and to access the command shell. Standard commands can then be run on the image. The Linux Manager has a dependency on the IP Network Manager, which establishes an IP connection to the image.</p>"},{"location":"docs/managers/unix-managers/linux-manager/#configuration-properties","title":"Configuration Properties","text":"<p>The following are properties used to configure the Linux Manager.</p>"},{"location":"docs/managers/unix-managers/linux-manager/#retain-the-run-directory-after-the-test-is-complete-for-diagnostic-purposes","title":"Retain the run directory after the test is complete, for diagnostic purposes","text":"Property: Retain the run directory after the test is complete, for diagnostic purposes Name: <code>linux.image.[imageid].retain.run.directory</code> Description: Informs the Linux Manager that you would like the retain the run directory after the test run is complete Required: No Default value: false Valid values: true or false Examples: <code>linux.image.UBT.retain.run.directory=true</code>"},{"location":"docs/managers/workflow-managers/","title":"Workflow Managers","text":"GitHub Manager <p>Use the GitHub Manager to help analyze test results. Identify test classes and test methods that have failed as the result of a known problem which is documented in an open GitHub issue, avoiding spending time investigating the cause of a failure of which the reason is known.</p>"},{"location":"docs/managers/workflow-managers/github-manager/","title":"GitHub Manager","text":"<p>This Manager is at Release level. You can view the Javadoc documentation for the Manager."},{"location":"docs/managers/workflow-managers/github-manager/#overview","title":"Overview","text":"<p>If there is an open issue in a GitHub repository that tracks a known problem which is expected to cause a test class or test method to fail, you can add the @GitHubIssue annotation to a test class or test method so that the expected failure is recorded as\u00a0Failed with Defects\u00a0 in the test report. </p> <p>Using this annotation on a test class or test method means that the expected failure is clearly identifiable in the test report, making it easier to spot any unexpected test failures and saving time by avoiding the\u00a0investigation of a known issue.\u00a0</p>"},{"location":"docs/managers/workflow-managers/github-manager/#including-the-manager-in-a-test","title":"Including the Manager in a test","text":"<p>To use the GitHub Manager in a test you must import the @GitHubIssue annotation into the test, as shown in the following example: </p> <pre><code>import dev.galasa.githubissue.GitHubIssue;\n//...\n</code></pre> <p>You also need to add the Manager dependency into the pom.xml file if you are using Maven, or into the build.gradle file if you are using Gradle. </p> <p>If you are using Maven, add the following dependencies into the pom.xml in the dependencies section:</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;dev.galasa&lt;/groupId&gt;\n    &lt;artifactId&gt;dev.galasa.githubissue.manager&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre> <p>If you are using Gradle, add the following dependencies into <code>build.gradle</code> in the dependencies closure:</p> <pre><code>dependencies {\n    compileOnly 'dev.galasa:dev.galasa.githubissue.manager'\n}\n</code></pre> <p>Finally, use the annotation that is provided by the Manager in the test. The annotation calls the Manager at runtime. In this example, the provided annotation is @GitHubIssue. </p>"},{"location":"docs/managers/workflow-managers/github-manager/#using-the-manager","title":"Using the Manager","text":"<p>The GitHub Manager is activated at runtime if there is a @GitHubIssue annotation on the test class or any of its test methods. The presence of the @GitHubIssue annotation means that there is a known problem which is expected to affect the result of the test. </p> <p>If the issue is expected to affect one or more specific test methods, add the annotation on the test method. If the scope of the issue is larger and might affect the whole test class, add the annotation at the class level.</p> <p>Use the following examples, which are based on BatchAccountsOpenTest to understand how to add the @GitHubIssue annotation for GitHub issue number 1178 to a test method and to a test class.</p>"},{"location":"docs/managers/workflow-managers/github-manager/#examples","title":"Examples","text":"<p>GitHub issue 1178 has a status of open on GitHub in the galasa-dev/projectmanagement repository. Issue 1178 tracks a known problem with the behaviour of the  Z/OS Batch Manager. The issue causes the test class BatchAccountsOpenTest to fail.</p> <p>The following example adds the @GitHubIssue annotation on the test method:</p> <pre><code>@Test\n@GitHubIssue(issue = \"1178\", repo = \"galasa-dev/projectmanagement\")\npublic void batchOpenAccountsTest() throws TestBundleResourceException, IOException, ZosBatchException {\n    // Create a list of accounts to create\n    List&lt;String&gt; accountList = new LinkedList&lt;&gt;();\n    accountList.add(\"901000001,20-40-60,1000\");\n\n    //...\n</code></pre> <p>The following example adds the @GitHubIssue annotation on the test class:</p> <pre><code>@Test\n@GitHubIssue(issue = \"1178\", repo = \"galasa-dev/projectmanagement\")\npublic class BatchAccountsOpenTest {\n    //...\n</code></pre> <p>Once the GitHub issue is closed, remove the @GitHubIssue annotation from the test class or test method.</p>"},{"location":"docs/managers/workflow-managers/github-manager/#using-regex","title":"Using regex","text":"<p>To ensure that the failing exception is due to the known problem that is identified in the GitHub issue, use regex in the annotation\u00a0to check\u00a0that the recorded test failure matches the string that is specified in regex. </p> <p>For example, GitHub issue 1179 describes a problem in source code that results in a HttpServerErrorException message being returned when a test is run. You can add the following annotation to your test to ensure that it is failing because of this exception, and not for a different reason:</p> <pre><code>@GitHubIssue(issue = \"1179\", repo = \"galasa-dev/projectmanagement\",\n    regex = \"HttpServerErrorException\")\n</code></pre> <p>If the failing exception does not match the regex, the test has failed for a different or unknown reason. If no regex is provided in the annotation, any failing exception is accepted.</p>"},{"location":"docs/managers/workflow-managers/github-manager/#setting-overrides","title":"Setting overrides","text":"<p>You can override the result of a test method or a test class by using the @GitHubIssue annotation in conjunction with the @ContinueOnTestFailure annotation to return a test result for all test methods within a test class.</p>"},{"location":"docs/managers/workflow-managers/github-manager/#overriding-a-test-method-result","title":"Overriding a test method result","text":"<p>If a test method is annotated with @GitHubIssue, and the initial result of the method is Failed, the GitHub Manager uses the GitHub API to retrieve the current state of the GitHub issue from the annotation. If the issue is in open status, the result of the test method is overridden from Failed to Failed With Defects. If the issue is in closed status, the result is not overridden, as that issue is supposedly fixed and is not expected to affect the test method anymore. In the latter scenario, further investigation into the cause of the failure is required.</p>"},{"location":"docs/managers/workflow-managers/github-manager/#overriding-a-test-class-result","title":"Overriding a test class result","text":"<p>At the end of a test class run, the results of each individual test method are combined to determine whether the result of the test class should be overridden. </p> <p>Use the following scenarios and examples to understand the expected test class result and what to do next. In each scenario, the issue is in an open state.</p>"},{"location":"docs/managers/workflow-managers/github-manager/#scenario-1","title":"Scenario 1","text":"<p>Scenario 1 uses the @GitHubIssue annotation on the test method testNotNull with the @ContinueOnTestFailure annotation:</p> <pre><code>@Test\n@ContinueOnTestFailure\npublic class SimBankIVT {\n\n    @GitHubIssue(issue = \"1178\")\n    @Test\n    public void testNotNull() {\n        // Failing test\n    }\n\n    @Test\n    public void checkBankIsAvailable() {\n        // Failing test\n    }\n}\n</code></pre> <p>Results:</p> <ul> <li>Test method <code>testNotNull()</code> result:  Failed with defects</li> <li>Test method <code>checkBankIsAvailable()</code> result:  Failed</li> <li>Test class <code>SimBankIVT</code> result:  Failed</li> </ul> <p>Next steps:</p> <p>Test method testNotNull returned a result of Failed With Defects. Test method checkBankIsAvailable returned a result of Failed for an unknown reason. Further investigation is required to understand why test method checkBankIsAvailable failed.</p>"},{"location":"docs/managers/workflow-managers/github-manager/#scenario-2","title":"Scenario 2:","text":"<p>Scenario 2 uses the @GitHubIssue annotation on the test method testNotNull with the @ContinueOnTestFailure annotation:</p> <pre><code>@Test\n@ContinueOnTestFailure\npublic class SimBankIVT {\n\n    @GitHubIssue(issue = \"1178\")\n    @Test\n    public void testNotNull() {\n        // Failing test\n    }\n\n    @Test\n    public void checkBankIsAvailable() {\n        // Passing test\n    }\n}\n</code></pre> <p>Results:</p> <ul> <li>Test method <code>testNotNull()</code> result:  Failed with defects</li> <li>Test method <code>checkBankIsAvailable()</code> result:  Passed</li> <li>Test class <code>SimBankIVT</code> result:  Passed with defects</li> </ul> <p>Next steps:</p> <p>The first method, testNotNull, returned a result of Failed With Defects.  As the ContinueOnTestFailure annotation is used, the test continued to run and the following method checkBankIsAvailable returned a result of Passed. All methods that are expected to pass returned a result of Passed, so the overall result of the test is Passed With Defects. No further investigation is required.</p>"},{"location":"docs/managers/workflow-managers/github-manager/#scenario-3","title":"Scenario 3:","text":"<p>Scenario 3 uses the @GitHubIssue annotation on the test method checkBankIsAvailable without the @ContinueOnTestFailure annotation:</p> <pre><code>@Test\npublic class SimBankIVT {\n\n    @Test\n    public void testNotNull() {\n        // Passing test\n    }\n\n    @Test\n    @GitHubIssue(issue = \"1178\")\n    public void checkBankIsAvailable() {\n        // Failing test\n    }\n}\n</code></pre> <p>Results:</p> <ul> <li>Test method <code>testNotNull()</code> result:  Passed</li> <li>Test method <code>checkBankIsAvailable()</code> result:  Failed with defects</li> <li>Test class <code>SimBankIVT</code> result:  Passed with defects</li> </ul> <p>Next steps:</p> <p>The method checkBankIsAvailable returned a result of Failed With Defects. As the test did not use the ContinueOnTestFailure annotation, the test would have ended prematurely. However, as the checkBankIsAvailable method was the last test method, the results of all test methods in the class are known. All methods that are expected to pass returned a result of Passed, so the overall result of the test is Passed With Defects. No further investigation required.</p>"},{"location":"docs/managers/workflow-managers/github-manager/#scenario-4","title":"Scenario 4:","text":"<p>Scenario 4 uses the @GitHubIssue annotation on the test method testNotNull without the @ContinueOnTestFailure annotation:</p> <pre><code>@Test\npublic class SimBankIVT {\n\n    @Test\n    @GitHubIssue(issue = \"1178\")\n    public void testNotNull() {\n        // Failing test\n    }\n\n    @Test\n    public void checkBankIsAvailable() {\n        // ...\n    }\n}\n</code></pre> <p>Results:</p> <ul> <li>Test method <code>testNotNull()</code> result:  Failed with defects</li> <li>Test method <code>checkBankIsAvailable()</code> result: Unknown</li> <li>Test class <code>SimBankIVT</code> result:  Failed with defects</li> </ul> <p>Next steps:</p> <p>The testNotNull method returned a status of Failed With Defects. As the ContinueOnTestFailure annotation is not used, the results of the following methods \u2013 in this example checkBankIsAvailable \u2013 are not known. The overall result returned is Failed With Defects. To check the result of all methods, add the @ContinueOnTestFailure annotation for future test runs.</p>"},{"location":"docs/managers/workflow-managers/github-manager/#configuration-properties","title":"Configuration Properties","text":"<p>You must configure your CPS properties so that the GitHub Manager knows the GitHub instance in which to look for the specified issue. The GitHub Manager converts the GitHub instance URL that is provided in the CPS to the correct URL for the GitHub API, removing the need to manually supply a URL for the GitHub API. Alternatively, you can set the GitHub repository in the @GitHubIssue annotation. The value in the annotation takes precedence over the value in the CPS.</p> <p>The following are properties used to configure the GitHub Manager:</p>"},{"location":"docs/managers/workflow-managers/github-manager/#github-instance-url-cps-property","title":"GitHub Instance URL CPS Property","text":"Property: GitHub Instance URL CPS Property Name: githubissue.instance.url Description: The GitHub instance for the issue Required: No Default value: https://github.com Valid values: A valid GitHub instance, for example, https://github.acompany.com Examples: <code>githubissue.instance.DEFAULT.url=https://github.com</code>"},{"location":"docs/managers/workflow-managers/github-manager/#github-instance-credentials-cps-property","title":"GitHub Instance Credentials CPS Property","text":"Property: GitHub Instance Credentials CPS Property Name: githubissue.instance.credentials Description: The credentials ID to use for the GitHub instance Required: No Default value: GITHUB Valid values: GITHUB, DEFAULT, IBM Examples: <code>githubissue.instance.DEFAULT.credentials=GITHUB</code>"},{"location":"docs/managers/workflow-managers/github-manager/#github-instance-repository-cps-property","title":"GitHub Instance Repository CPS Property","text":"Property: GitHub Instance Repository CPS Property Name: githubissue.instance.repository Description: The GitHub repository that contains the GitHub issue Required: No, can be provided in the annotation Default value: N/A Valid values: A valid repository, for example, galasa-dev/projectmanagement Examples: <code>githubissue.instance.DEFAULT.repository=galasa-dev/projectmanagement</code> <p>Note: You must provide credentials for your GitHub Enterprise instances in the credentials store, so that the request to the GitHub API is authenticated.</p> <p>For example, if you set the GitHub Instance Credentials CPS Property to:</p> <pre><code>githubissue.instance.url=https://github.com\n</code></pre> <p>then you need to edit the credentials.properties file in the .galasa folder to set the username and password for the GitHub instance. For example: </p> <pre><code>secure.credentials.GITHUB.username=COMPANYUSER\nsecure.credentials.GITHUB.password=Password123\n</code></pre>"},{"location":"docs/managers/workflow-managers/github-manager/#annotations-provided-by-the-manager","title":"Annotations provided by the Manager","text":"<p>The following annotation is provided by the GitHub Manager:</p>"},{"location":"docs/managers/workflow-managers/github-manager/#github-issue","title":"GitHub Issue","text":"Name: GitHub Issue Name: @GitHubIssue Description: If present on a method or class, this annotation will tell the GitHub Manager to influence the result of the method or class based on the known problem in the GitHub issue. Syntax: @GitHubIssue( githubId = \"DEFAULT\", issue = \"1178\", repo = \"galasa-dev/projectmanagement\") Attribute <code>issue</code>: The number of the issue. Required. Attribute <code>githubId</code>: Optional. Default value is \"DEFAULT\". Attribute <code>repo</code>: Optional. If not present in the annotation, the CPS is checked. If a value is not present in the CPS, the Manager logs a warning message. Attribute <code>regex</code>: Optional. Use to narrow down the failing exception. <p>The annotation can be used at the class or method level.</p> <p>Use of the @ContinueOnTestFailure annotation alongside the @GitHubIssue annotation can affect the test result. For examples, see the Overrides section.</p>"},{"location":"docs/managers/workflow-managers/github-manager/#code-snippets-and-examples","title":"Code snippets and examples","text":""},{"location":"docs/managers/workflow-managers/github-manager/#add-the-githubissue-and-continueontestfailure-annotation-on-a-test-class","title":"Add the @GitHubIssue and @ContinueOnTestFailure annotation on a test class","text":"<p>Use the following code to add GitHub issue 1178 in the galasa-dev/projectmanagement repository on the SimBank ProvisionedAccountCreditTest test class. Ensure all test methods in the test class are run by using the @ContinueOnTestFailure annotation:</p> <pre><code>@Test\n@GitHubIssue( issue = \"1178\", repo = \"galasa-dev/projectmanagement\" )\n@ContinueOnTestFailure\npublic class ProvisionedAccountCreditTest {\n    //...\n</code></pre>"},{"location":"docs/managers/workflow-managers/github-manager/#add-the-githubissue-annotation-on-a-test-method","title":"Add the @GitHubIssue annotation on a test method","text":"<p>Use the following code to add GitHub issue 1178 in the galasa-dev/projectmanagement repository on the updateAccountWebServiceTest method in the ProvisionedAccountCreditTest test class:</p> <pre><code>@Test\n@GitHubIssue( issue = \"1178\", repo = \"galasa-dev/projectmanagement\" )\npublic void updateAccountWebServiceTest() throws Exception {\n    // Obtain the initial balance\n    BigDecimal userBalance = account.getBalance();\n\n    //...\n</code></pre>"},{"location":"docs/managers/zos-managers/","title":"z/OS Managers","text":"RSE API Manager <p>Provides tests and Managers with access to RSE API functions.</p> z/OS 3270 Manager <p>Provides tests and Managers with a 3270 client.</p> z/OS Batch z/OS MF Manager <p>Provides the default implementation of the z/OS Batch Manager using z/OS MF. Can only be used via the z/OS Batch Manager interface.       </p> z/OS Batch RSE API Manager <p>Provides an implementation of the z/OS Batch Manager using the RSE API. Can only be used via the z/OS Batch Manager interface.</p> z/OS Console oeconsol Manager <p>Provides an implementation of the z/OS Console by using the z/OS UNIX oeconsol command. Can only be used via the z/OS Console Manager interface.                                                                               </p> z/OS Console z/OS MF Manager <p>Provides the default implementation of the z/OS Console by using z/OS MF. Can only be used via the z/OS Console Manager interface.</p> z/OS File RSE API Manager <p>Provides an implementation of the z/OS File Manager by using RSE API. Can only be used via the z/OS File Manager interface.</p> z/OS File z/OS MF Manager <p>Provides the default implementation of the z/OS File Manager using z/OS MF. Can only be used via the z/OS File Manager interface.                        </p> z/OS Manager <p>Provides tests and Managers with access to z/OS images, sysplexes and log information. Additionally, the z/OS Manager contributes annotations which allow you to run batch jobs, issue console commands, transfer files and securely access z/OS systems via TSO or UNIX commands.</p> z/OS MF Manager <p>Provides tests and Managers with access to z/OS MF functions.</p> z/OS Program Manager <p>Compiles test programs from source embedded in the Galasa test bundle at test start. The executable load module is then available for use in the test.</p> z/OS TSO Command SSH Manager <p>Provides the default implementation of the z/OS TSO Command Manager using SSH. Can only be used via the z/OS TSO Command Manager interface.</p> z/OS UNIX Command SSH Manager <p>Provides the default implementation of the z/OS UNIX Command Manager using SSH. Can only be used via the z/OS UNIX Command Manager interface.</p>"},{"location":"docs/managers/zos-managers/rse-api-manager/","title":"RSE API Manager","text":"<p>This Manager is at Alpha level. You can view the Javadoc documentation for the Manager.</p>"},{"location":"docs/managers/zos-managers/rse-api-manager/#overview","title":"Overview","text":"<p>This Manager provides Galasa tests with access to a RSE API server.</p>"},{"location":"docs/managers/zos-managers/rse-api-manager/#provided-annotations","title":"Provided annotations","text":"<p>The following annotations are available with the RSE API Manager</p>"},{"location":"docs/managers/zos-managers/rse-api-manager/#rse-api","title":"RSE API","text":"Annotation: RSE API Name: @Rseapi Description: The <code>@Rseapi</code> annotation requests the RSE API Manager to provide a RSE API server instance associated with a z/OS image.  The test can request multiple RSE API instances, with the default being associated with the primary zOS image. Attribute: <code>imageTag</code> The tag of the zOS Image this variable is to be populated with Syntax: <pre>@ZosImage(imageTag=\"A\")public IZosImage zosImageA;@Rseapi(imageTag=\"A\")public IRseapi rseapiA;</pre> Notes: The <code>IRseapi</code> interface has a number of methods to issue requests to the RSE API REST API. See Rseapi and IRseapi to find out more."},{"location":"docs/managers/zos-managers/rse-api-manager/#configuration-properties","title":"Configuration Properties","text":"<p>The following are properties used to configure the RSE API Manager.</p>"},{"location":"docs/managers/zos-managers/rse-api-manager/#rse-api-server-port-is-https","title":"RSE API Server port is https","text":"Property: RSE API Server port is https Name: rseapi.server.[imageid].https Description: Use https (SSL) for RSE API server Required: No Default value: true Valid values: true or false Examples: <code>rseapi.server.https=true</code><code>rseapi.server.RSESYSA.https=true</code>"},{"location":"docs/managers/zos-managers/rse-api-manager/#rse-api-image-servers","title":"RSE API Image Servers","text":"Property: RSE API Image Servers Name: rseapi.image.IMAGEID.servers Description: The RSE API servers for use with z/OS Image, the RSE API do not need to be running the actual z/OS Image Required: No Default value: None Valid values: Comma separated RSE API server IDs Examples: <code>rseapi.image.MYLPAR.servers=RSESYSA,RSESYSB</code>"},{"location":"docs/managers/zos-managers/rse-api-manager/#rse-api-server-retry-request","title":"RSE API Server retry request","text":"Property: RSE API Server retry request Name: rseapi.server.[SERVERID].request.retry Description: The number of times to retry when RSE API request fails Required: No Default value: 3 Valid values: numerical value &gt; 0 Examples: <code>rseapi.server.request.retry=5</code><code>rseapi.server.RSESYSA.request.retry=5</code>"},{"location":"docs/managers/zos-managers/rse-api-manager/#rse-api-server-credentials","title":"RSE API Server Credentials","text":"Property: RSE API Server Credentials Name: rseapi.server.[SERVERID].credentials Description: The z/OS credentials to use when accessing the RSE API server Required: No Default value: None, however the RSE API Manager will use the default z/OS image credentials Valid values: Valid credential ID Examples: <code>rseapi.server.RSESYSA.credentials=ZOS</code>"},{"location":"docs/managers/zos-managers/rse-api-manager/#rse-api-server-image","title":"RSE API Server Image","text":"Property: RSE API Server Image Name: rseapi.server.SERVERID.image Description: The z/OS image ID this RSE API server lives on Required: No Default value: The SERVERID value is used as the z/OS image ID Valid values: z/OS image IDs Examples: <code>rseapi.server.RSESYSA.image=SYSA</code>"},{"location":"docs/managers/zos-managers/rse-api-manager/#rse-api-server-port","title":"RSE API Server port","text":"Property: RSE API Server port Name: rseapi.server.[serverid].port Description: The port number of the RSE API server Required: no Default value: 6800 Valid values: A valid port number Examples: <code>rseapi.server.port=6800</code><code>rseapi.server.RSESYSA.port=6800</code>"},{"location":"docs/managers/zos-managers/rse-api-manager/#rse-api-sysplex-servers","title":"RSE API Sysplex Servers","text":"Property: RSE API Sysplex Servers Name: rseapi.sysplex.[SYSPLEXID].default.servers Description: The RSE API servers active on the supplied sysplex Required: No Default value: None Valid values: Comma separated RSE API server IDs Examples: <code>rseapi.sysplex.default.servers=RSASYSA,RSASYSB</code><code>rseapi.sysplex.PLEXA.default.servers=RSASYSA,RSASYSB</code>"},{"location":"docs/managers/zos-managers/zos-batch-rse-api-manager/","title":"z/OS Batch RSE API Manager","text":"<p>This Manager is at Alpha level. You can view the Javadoc documentation for the Manager.</p>"},{"location":"docs/managers/zos-managers/zos-batch-rse-api-manager/#overview","title":"Overview","text":"<p>This Manager is an internal implementation of the z/OS Batch Manager using RSE API. The RSE API Batch Manager is used in conjunction with the z/OS Manager. The z/OS Manager provides the interface for the z/OS batch function and pulls in the RSE API Batch Manager to provide the implementation of the interface. If your test needs to submit or monitor a batch job or retrieve output from a batch job, you can call the z/OS Manager in your test code and the z/OS Manager will call the RSE API Batch Manager to provide the implementation via the z/OS batch  function. For example, the BatchAccountsOpenTest  uses the z/OS Manager (which in the background, invokes RSE API) to add a set of accounts to the Galasa SimBank  system via a z/OS batch job.</p> <p>The zOS Batch RSE API Manager is enabled by setting the CPS property: <code>zos.bundle.extra.batch.manager=dev.galasa.zosbatch.rseapi.manager</code></p> <p>See the zOS Manager for details of the z/OS Batch annotations and code snippets.</p>"},{"location":"docs/managers/zos-managers/zos-batch-zos-mf-manager/","title":"z/OS Batch z/OS MF Manager","text":"<p>This Manager is at Beta level. You can view the Javadoc documentation for the Manager.</p>"},{"location":"docs/managers/zos-managers/zos-batch-zos-mf-manager/#overview","title":"Overview","text":"<p>This Manager is an internal implementation of the z/OS Batch Manager using z/OS MF. The z/OS MF Batch Manager is used in conjunction with the z/OS Manager. The z/OS Manager provides the interface for the z/OS batch function and pulls in the z/OS MF Batch Manager to provide the implementation of the interface. If your test needs to submit or monitor a batch job or retrieve output from a batch job, you can call the z/OS Manager in your test code and the z/OS Manager will call the z/OS MF Batch Manager to provide the implementation via the z/OS batch  function. For example, the BatchAccountsOpenTest uses the z/OS Manager (which in the background, invokes z/OS MF) to add a set of accounts to the Galasa SimBank  system via a z/OS batch job.</p> <p>The zOS Batch z/OS MF Manager is enabled by setting the CPS property: <code>zos.bundle.extra.batch.manager=dev.galasa.zosbatch.zosmf.manager</code>. Galasa sets this property by default.</p> <p>See the zOS Manager for details of the z/OS Batch annotations and code snippets.</p>"},{"location":"docs/managers/zos-managers/zos-console-oeconsol-manager/","title":"zOS Console oeconsol Manager","text":"<p>This Manager is at Alpha level. You can view the Javadoc documentation for the Manager.</p>"},{"location":"docs/managers/zos-managers/zos-console-oeconsol-manager/#overview","title":"Overview","text":"<p>This Manager is the internal implementation of the z/OS Console Manager using oeconsol. The oeconsol z/OS Console Manager is used in conjunction  with the z/OS UNIX Command Manager. The z/OS Manager provides the interface for the z/OS console function and pulls in the oeconsol Console Manager  to provide the implementation of the interface. If your test needs to request a z/OS console instance, issue a console command or retrieve the console  command, you can call the z/OS Manager in your test code and the z/OS Manager will call the oeconsol Console Manager to provide the implementation  via the z/OS console function. Multiple z/OS console images can be requested by a test.</p> <p>See the zOS Manager for details of the z/OS Console Annotations.</p> <p>This implementation is less rich than the zOS/MF implementation due to the restricted functionallity of oeconsol:</p> <ul> <li> <p>oeconsol does not directly support console name.</p> <p>Console name can be used to avoid clashes with other consoles that the user has open, e.g. in another Galsa test, in a TSO or SDSF session. When supplying console name via <code>IZosConsole#issueCommand(String command, String consoleName)</code> the Manager attempts to obtain credentials from the CPS, i.e. <code>secure.credentials.[consoleName].username</code>. The credentials are used to logon to z/OS UNIX and execute oeconsol with the supplied command.</p> </li> <li> <p>oeconsol does not support retrieving delayed responses.</p> <p>A <code>ZosConsoleException</code> is will be thrown when the <code>IZosConsoleCommand#requestResponse()</code> method is called.</p> </li> </ul> <p>See oeconsol for documentation and download.</p>"},{"location":"docs/managers/zos-managers/zos-console-oeconsol-manager/#configuration-properties","title":"Configuration Properties","text":"<p>The following are properties used to configure the zOS Console oeconsol Manager.</p>"},{"location":"docs/managers/zos-managers/zos-console-oeconsol-manager/#the-oeconsol-path","title":"The oeconsol path","text":"Property: The oeconsol path Name: zosconsole.oeconsole.[imageid].command.path Description: The path to the oeconsol command Required: No Default value: oeconsol Valid values: A valid PATH environment variable or a full path name Examples: <code>zosconsole.oeconsole.command.path=oeconsol</code><code>zosconsole.MFSYSA.oeconsol.command.path=/tools/oeconsol</code>where <code>/tools/oeconsol</code> is the locations of the oeconsol executable"},{"location":"docs/managers/zos-managers/zos-console-zos-mf-manager/","title":"zOS Console zOS MF Manager","text":"<p>This Manager is at Beta level. You can view the Javadoc documentation for the Manager.</p>"},{"location":"docs/managers/zos-managers/zos-console-zos-mf-manager/#overview","title":"Overview","text":"<p>This Manager is the internal implementation of the z/OS Console Manager using zOS/MF. The z/OS MF Console Manager is used in conjunction with the z/OS Manager. The z/OS Manager provides the interface for the z/OS console function and pulls in the z/OS MF Console Manager to provide the implementation of the interface. If your test needs to request a z/OS console instance, issue a console command or retrieve the console command, you can call the z/OS Manager in your test code and the z/OS Manager will call the z/OS MF Console Manager to provide the implementation via the z/OS console function. Multiple z/OS console images can be requested by a test.</p> <p>See the zOS Manager for details of the z/OS Console Annotations.</p>"},{"location":"docs/managers/zos-managers/zos-file-rse-api-manager/","title":"z/OS File RSE API Manager","text":"<p>This Manager is at Alpha level. You can view the Javadoc documentation for the Manager.</p>"},{"location":"docs/managers/zos-managers/zos-file-rse-api-manager/#overview","title":"Overview","text":"<p>This Manager is an internal implementation of the z/OS File Manager using RSE API. The RSE API File Manager is used in conjunction with the z/OS Manager. The z/OS Manager provides the interface for the z/OS file function and pulls in the RSE API File Manager to provide the implementation of the interface. If your test needs to instantiate a UNIX file, dataset, or VSAM data set, write and retrieve content from it, or configure and manipulate it then you can call the z/OS Manager in your test code and the z/OS Manager will call the RSE API File Manager to provide the implementation via the z/OS file function.  </p> <p>See the zOS Manager for details of the z/OS File Annotations.</p>"},{"location":"docs/managers/zos-managers/zos-file-rse-api-manager/#including-the-manager-in-a-test","title":"Including the Manager in a test","text":"<p>To use the z/OS File RSE API Manager in a test you must import the @ZosImage annotation into the test, as shown in the following example: </p> <pre><code>@ZosImage\npublic IZosImage imagePrimary;\n</code></pre> <p>You also need to add the Manager dependency into the pom.xml file if you are using Maven, or into the build.gradle file if you are using Gradle. </p> <p>If you are using Maven, add the following dependencies into the pom.xml in the dependencies section:</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;dev.galasa&lt;/groupId&gt;\n    &lt;artifactId&gt;dev.galasa.zosfile.rseapi.manager&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre> <p>If you are using Gradle, add the following dependencies into <code>build.gradle</code> in the dependencies closure:</p> <pre><code>dependencies {\n    compileOnly 'dev.galasa:dev.galasa.zosfile.rseapi.manager'\n}\n</code></pre>"},{"location":"docs/managers/zos-managers/zos-file-zos-mf-manager/","title":"zOS File zOS MF Manager","text":"<p>This Manager is at Beta level. You can view the Javadoc documentation for the Manager.</p>"},{"location":"docs/managers/zos-managers/zos-file-zos-mf-manager/#overview","title":"Overview","text":"<p>This Manager is the internal implementation of the zOS File Manager using zOS/MF. The z/OS MF File Manager is used in conjunction with the z/OS Manager. The z/OS Manager provides the interface for the z/OS file function and pulls in the z/OS MF File Manager to provide the implementation of the interface. If your test needs to instantiate a UNIX file, dataset, or VSAM data set, write and retrieve content from it, or configure and manipulate it then you can call the z/OS Manager in your test code and the z/OS Manager will call the z/OS MF File Manager to provide the implementation via the z/OS file function.</p> <p>See the zOS Manager for details of the z/OS File Annotations.</p>"},{"location":"docs/managers/zos-managers/zos-manager/","title":"z/OS Manager","text":"<p>This Manager is at Beta level. You can view the Javadoc documentation for the Manager.</p>"},{"location":"docs/managers/zos-managers/zos-manager/#overview","title":"Overview","text":"<p>This Manager provides tests and Managers with access to and configuration information about z/OS images and Sysplexes. It offers services such as APF, DUMP, SMF and Log access.</p> <p>Additionally, the z/OS Manager provides tests with interfaces to the following z/OS functions which are implemented by other Managers:</p> <ul> <li> <p><code>z/OS Batch</code> which enables tests and Managers to submit, monitor and retrieve the output of z/OS batch jobs. See BatchAccountsOpenTest for a walkthrough of a test that employs this Manager.</p> </li> <li> <p><code>z/OS Console</code> which allows tests and Managers to issue and retrieve the responses from z/OS console commands.</p> </li> <li> <p><code>z/OS File</code> which provides tests and Managers with the ability to manage and transfer files to and from z/OS. Supported file types include Sequential, PDS, PDSE, KSDS, ESDS or RRDS and z/OS UNIX files.</p> </li> <li> <p><code>z/OS TSO Command</code> which enables tests and Managers to issue and retrieve the responses from z/OS TSO commands. </p> </li> <li> <p><code>z/OS UNIX Command</code> which enables tests and Managers to issue and retrieve the responses from z/OS UNIX commands.</p> </li> </ul> <p>You can view the Javadoc documentation for the Manager.</p>"},{"location":"docs/managers/zos-managers/zos-manager/#including-the-manager-in-a-test","title":"Including the Manager in a test","text":"<p>The z/OS Manager is not instantiated directly. To use the z/OS Manager in a test, import one or more of the following annotations into the test, as shown in the following examples: </p> <pre><code>@ZosImage\npublic IZosImage imagePrimary;\n</code></pre> <pre><code>@ZosIpHost\npublic IIpHost hostPrimary;\n</code></pre> <pre><code>@ZosIpPort\npublic IIpPort portPrimary;\n</code></pre> <p>You also need to add the Manager dependency into the pom.xml file if you are using Maven, or into the build.gradle file if you are using Gradle. </p> <p>If you are using Maven, add the following dependencies into the pom.xml in the dependencies section:</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;dev.galasa&lt;/groupId&gt;\n    &lt;artifactId&gt;dev.galasa.zos.manager&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre> <p>If you are using Gradle, add the following dependencies into <code>build.gradle</code> in the dependencies closure:</p> <pre><code>dependencies {\n    compileOnly 'dev.galasa:dev.galasa.zos.manager'\n}\n</code></pre>"},{"location":"docs/managers/zos-managers/zos-manager/#testing-in-cics-regions-or-ims-tm-systems-on-zos","title":"Testing in CICS Regions or IMS TM Systems on z/OS","text":"<p>To connect your Galasa test to a developer supplied environment with a provisioned CICS region or IMS TM system as a minimum you need to configure the following properties, even if you do not reference a <code>@ZosImage</code> in your Galasa test. This is because CICS regions and IMS TM systems sit on a z/OS LPAR, and so to provision and connect to a CICS region or IMS TM system in a test, you also need access to the z/OS image that it sits within to make requests on the CICS region or IMS TM system. You might need to configure additional z/OS-related CPS properties, depending on your test.  </p> <pre><code>zos.dse.tag.[tag].imageid=[IMAGEID]\n    OR zos.tag.[tag].imageid=[IMAGEID] \n    OR zos.cluster.[CLUSTERID].images=[IMAGEID] (AND zos.dse.tag.[tag].clusterid=[CLUSTERID] if [CLUSTERID] is not DEFAULT)\nzos.image.[IMAGEID].ipv4.hostname=[IP ADDRESS]\nzos.image.[IMAGEID].credentials=[CREDENTIALID]\n</code></pre> <p>You also need to configure the following properties for the CICS TS Manager:</p> <pre><code>cicsts.provision.type=dse\ncicsts.dse.tag.[TAG].applid=[APPLID]\n</code></pre> <p>or the following property for the IMS TM Manager:</p> <pre><code>imstm.dse.tag.[TAG].applid=[APPLID]\n</code></pre>"},{"location":"docs/managers/zos-managers/zos-manager/#configuration-properties","title":"Configuration Properties","text":"<p>The following properties are used to configure the z/OS Manager.</p>"},{"location":"docs/managers/zos-managers/zos-manager/#hostname-of-a-zos-system","title":"Hostname of a z/OS system","text":"Property: Hostname of a z/OS system Name: zos.image.[imageId].ipv4.hostname Description: A physical TCP/IP hostname value for a z/OS system Required: Yes, if connecting to a z/OS image Default value: None Valid values: A valid TCP/IP hostname Examples: <code>zos.image.SYSA.ipv4.hostname=dev.galasa.system1</code><code>zos.image.SIMBANK.ipv4.hostname=127.0.0.1</code>"},{"location":"docs/managers/zos-managers/zos-manager/#credentials-tag-for-logging-onto-a-zos-system","title":"Credentials tag for logging onto a z/OS system","text":"Property: Credentials tag for logging onto a z/OS system Name: zos.image.[imageId].credentials Description: Tag of the credentials that are stored in the CREDS and used to log onto a z/OS system Required: Yes, if connecting to a z/OS image Default value: None Valid values: Valid characters are A-Z, a - z, 0-9 Examples: <code>zos.image.SYSA.credentials=KEY_TO_CREDS_STORE</code><code>zos.image.SIMBANK.credentials=SIMBANK</code>"},{"location":"docs/managers/zos-managers/zos-manager/#extra-bundle-required-to-implement-the-zos-batch-manager","title":"Extra bundle required to implement the z/OS Batch Manager","text":"Property: Extra bundle required to implement the zOS Batch Manager Name: zos.bundle.extra.batch.manager Description: The name of the Bundle that implements the z/OS Batch Manager Required: No Default value: dev.galasa.common.zosbatch.zosmf.manager Valid values: A 1 - 8 length character name. A name containing more than 8 characters must be segmented by periods; 1 to 8 characters can be specified between periods. Valid characters are A-Z, a - z, 0-9, special characters. Examples: <code>zos.bundle.extra.batch.manager=dev.galasa.common.zosbatch.zosmf.manager</code>"},{"location":"docs/managers/zos-managers/zos-manager/#the-zos-cluster-id","title":"The z/OS Cluster ID","text":"Property: The zOS Cluster ID Name: zos.tag.[tag].clusterid Description: The z/OS Cluster ID for the specified tag Required: No Default value: None Valid values: Valid value is a character string with a maximum length of 32 Examples: <code>zos.tag.PLX1.clusterid=PLEXA</code>"},{"location":"docs/managers/zos-managers/zos-manager/#the-images-for-a-zos-cluster","title":"The images for a z/OS Cluster","text":"Property: The images for a zOS Cluster Name: zos.cluster.[clusterId].images Description: The z/OS Images for the specified cluster. Specify more than one image by using commas. Required: No Default value: None Valid values: Valid value is a character string with a maximum length of 32 Examples: <code>zos.cluster.PLEX1.images=SYSA,SYSB,SYSC</code>"},{"location":"docs/managers/zos-managers/zos-manager/#extra-bundle-required-to-implement-the-zos-console-manager","title":"Extra bundle required to implement the z/OS Console Manager","text":"Property: Extra bundle required to implement the zOS Console Manager Name: zos.bundle.extra.console.manager Description: The name of the Bundle that implements the z/OS Console Manager Required: No Default value: dev.galasa.common.zosconsole.zosmf.manager Valid values: A 1 - 8 length character name. A name containing more than 8 characters must be segmented by periods; 1 to 8 characters can be specified between periods. Valid characters are A-Z, a - z, 0-9, special characters. Examples: <code>zos.bundle.extra.console.manager=dev.galasa.common.zosconsole.zosmf.manager</code>"},{"location":"docs/managers/zos-managers/zos-manager/#developer-supplied-environment-zos-image-cluster-id","title":"Developer Supplied Environment z/OS Image Cluster ID","text":"Property: Developer Supplied Environment zOS Image Cluster ID Name: zos.dse.tag.[tag].clusterid Description: The Cluster ID for the specified tag Required: No Default value: None Valid values: A 1 - 8 length character name Examples: <code>zos.dse.tag.PLX1.clusterid=PLEXA</code>"},{"location":"docs/managers/zos-managers/zos-manager/#developer-supplied-environment-zos-image","title":"Developer Supplied Environment z/OS Image","text":"Property: Developer Supplied Environment zOS Image Name: zos.dse.tag.[tag].imageid Description: The image ID of the Developer Supplied Environment for the specified tag Required: No Default value: None Valid values: A valid image ID Examples: <code>zos.dse.tag.MVS1.imageid=SYSA</code>"},{"location":"docs/managers/zos-managers/zos-manager/#extra-bundle-required-to-implement-the-zos-file-manager","title":"Extra bundle required to implement the z/OS File Manager","text":"Property: Extra bundle required to implement the zOS File Manager Name: zos.bundle.extra.file.manager Description: The name of the Bundle that implements the z/OS File Manager Required: No Default value: dev.galasa.common.zosfile.zosmf.manager Valid values: A 1 - 8 length character name. A name containing more than 8 characters must be segmented by periods; 1 to 8 characters can be specified between periods. Valid characters are A-Z, a - z, 0-9, special characters. Examples: <code>zos.bundle.extra.file.manager=dev.galasa.common.zosfile.zosmf.manager</code>"},{"location":"docs/managers/zos-managers/zos-manager/#ip-host-id-of-the-zos-image","title":"IP Host ID of the z/OS Image","text":"Property: IP Host ID of the zOS Image Name: zos.image.[imageId].iphostid Description: The IP Host ID of the z/OS Image for the supplied tag.  If CPS property zos.image.[imageId].iphostid exists, then that is returned, otherwise the z/OS Image ID is returned Required: No Default value: None Valid values: A valid IP Host ID Examples: <code>zos.image.SYSA.iphostid=sysa.example.com</code>"},{"location":"docs/managers/zos-managers/zos-manager/#the-zos-image","title":"The z/OS Image","text":"Property: The zOS Image Name: zos.tag.[tag].imageid Description: The image ID for the specified tag Required: No Default value: None Valid values: A valid z/OS image ID Examples: <code>zos.tag.MVS1.imageid=SYSA</code>"},{"location":"docs/managers/zos-managers/zos-manager/#maximum-slots-for-zos-image","title":"Maximum slots for z/OS Image","text":"Property: Maximum slots for zOS Image Name: zos.image.[imageId].max.slots Description: The maximum slots available on a z/OS Image for the specified tag Required: No Default value: 2 Valid values: 1 to 255 Examples: <code>zos.image.SYSA.max.slots=2</code>"},{"location":"docs/managers/zos-managers/zos-manager/#code-page-for-zos-image","title":"Code page for z/OS Image","text":"Property: Code page for zOS Image Name: zos.image.[imageId].codepage Description: The EBCDIC code page used on a z/OS image for the specified tag. EBCDIC features a variety of code pages, and a subset of characters, including square brackets and currency symbols, are encoded differently between code pages. Setting the correct code page for a z/OS image can resolve issues with displaying these characters. Required: No Default value: 037 Valid values: A valid java.nio.charset EBCDIC character encoding Examples: <code>zos.image.SYSA.codepage=1047</code>"},{"location":"docs/managers/zos-managers/zos-manager/#the-sysname-for-zos-image","title":"The SYSNAME for z/OS Image","text":"Property: The SYSNAME for zOS Image Name: zos.image.[imageId].sysname Description: The SYSNAME for the z/OS image Required: No Default value: The image ID of the image Valid values: The name must be 1-8 characters long; the valid characters are A-Z, 0-9, $, @, and #. Examples: <code>zos.image.SYSA.sysname=SYSA</code>"},{"location":"docs/managers/zos-managers/zos-manager/#the-vtam-logon-command-template-for-the-zos-image","title":"The VTAM logon command template for the z/OS Image","text":"Property: The VTAM logon command template for the zOS Image Name: zos.image.vtam.logonzos.image.[imageId].vtam.logon Description: A template for the command to log on to an application running on the zOS Image. The {0} argument in the template will be replaced with the VTAM application identifier for the requested application. Required: No Default value: LOGON APPLID({0}) Valid values: A valid java.text.MessageFormat pattern with precisely one FormatElement Examples: <code>zos.image.vtam.logon=LOGON APPLID {0}</code><code>zos.image.SYSA.vtam.logon={0}</code>"},{"location":"docs/managers/zos-managers/zos-manager/#the-logon-initial-text-for-the-zos-image","title":"The logon initial text for the z/OS Image","text":"Property: The logon initial text for the z/OS Image Name: zos.image.logon.initial.textzos.image.[imageId].logon.initial.text Description: A text string that is expected to be present on a 3270 terminal that has been connected to the z/OS image but before logon to any application system has been attempted. Required: No Default value: None Valid values: Any text string Examples: <code>zos.image.logon.initial.text=VAMP</code><code>zos.image.SYSA.logon.initial.text=SYSA MAIN MENU</code>"},{"location":"docs/managers/zos-managers/zos-manager/#the-run-data-set-hlq-for-the-zos-image","title":"The run data set HLQ for the z/OS Image","text":"Property: The run data set HLQ for the zOS Image Name: zos.run.[imageId].dataset.hlq Description: The data set HLQ(s) for temporary data sets created on z/OS Image.  If CPS property zos.run.[imageId].dataset.hlq exists, then that is returned Required: No Default value: runuser.GALASA Valid values: A data set name can be one name segment, or a series of joined name segments. Segments are limited to eight characters, the first of which must be alphabetic (A to Z) or special (# @ $). The remaining seven characters are either alphabetic, numeric (0 - 9), special, a hyphen (-). Name segments are separated by a period (.). Examples: <code>zos.run.SYSA.dataset.hlq=USERID.GALASA</code>"},{"location":"docs/managers/zos-managers/zos-manager/#the-run-data-unix-path-prefix-for-the-zos-image","title":"The run data UNIX path prefix for the z/OS Image","text":"Property: The run data UNIX path prefix for the zOS Image Name: zos.run.[imageId].unix.path.prefix Description: The UNIX path prefix for temporary data sets created on z/OS Image.  If CPS property zos.run.[image].unix.path.prefix exists, then that is returned Required: No Default value: /u/runuser/Galasa Valid values: A valid path Examples: <code>zos.run.SYSA.unix.path.prefix=/u/userid/Galasa</code>"},{"location":"docs/managers/zos-managers/zos-manager/#extra-bundle-required-to-implement-the-zos-tso-command-manager","title":"Extra bundle required to implement the z/OS TSO Command Manager","text":"Property: Extra bundle required to implement the zOS TSO Command Manager Name: zos.bundle.extra.tsocommand.manager Description: The name of the Bundle that implements the z/OS TSO Command Manager Required: No Default value: dev.galasa.zostsocommand.ssh.manager Valid values: A 1 - 8 length character name. A name containing more than 8 characters must be segmented by periods; 1 to 8 characters can be specified between periods. Valid characters are A-Z, a - z, 0-9, special characters. Examples: <code>zos.bundle.extra.tsocommand.manager=dev.galasa.zostsocommand.ssh.manager</code>"},{"location":"docs/managers/zos-managers/zos-manager/#extra-bundle-required-to-implement-the-zos-unix-command-manager","title":"Extra bundle required to implement the z/OS UNIX Command Manager","text":"Property: Extra bundle required to implement the zOS UNIX Command Manager Name: zos.bundle.extra.unixcomand.manager Description: The name of the Bundle that implements the z/OS UNIX Command Manager Required: No Default value: dev.galasa.zosunixcommand.ssh.manager Valid values: A 1 - 8 length character name. A name containing more than 8 characters must be segmented by periods; 1 to 8 characters can be specified between periods. Valid characters are A-Z, a - z, 0-9, special characters. Examples: <code>zos.bundle.extra.unix.manager=dev.galasa.zosunixcommand.ssh.manager</code>"},{"location":"docs/managers/zos-managers/zos-manager/#zos-batch-restrict-processing-to-the-server-on-the-specified-image","title":"z/OS Batch restrict processing to the server on the specified image","text":"Property: zOS Batch restrict processing to the server on the specified image Name: zosbatch.batchjob.[imageId].restrict.to.image Description: Use only the server (e.g. zOSMF, RSE API, etc) running on the image associated with the z/OS Batch job Required: No Default value: false Valid values: true or false Examples: <code>zosbatch.batchjob.SYSA.restrict.to.image=true</code><code>zosbatch.batchjob.default.restrict.to.image=false</code>"},{"location":"docs/managers/zos-managers/zos-manager/#zos-batch-default-input-class","title":"z/OS Batch default input class","text":"Property: zOS Batch default input class Name: zosbatch.default.input.classzosbatch.default.[imageId].input.class Description: The default input class to set on the job card for submitted jobs Required: No Default value: A Valid values: a valid JES input class literal Examples: <code>zosbatch.default.SYSA.input.class=S</code><code>zosbatch.default.input.class=A</code>"},{"location":"docs/managers/zos-managers/zos-manager/#zos-batch-job-execution-wait-timeout","title":"z/OS Batch job execution wait timeout","text":"Property: zOS Batch job execution wait timeout Name: zosbatch.batchjob.[imageId].timeout Description: The value in seconds to wait for the z/OS Batch job execution to complete when submitted via zOSMF Required: No Default value: 350 Valid values: 0 to Examples: <code>zosbatch.batchjob.SYSA.timeout=350</code><code>zosbatch.batchjob.default.timeout=60</code>"},{"location":"docs/managers/zos-managers/zos-manager/#zos-batch-jobname-prefix","title":"z/OS Batch jobname prefix","text":"Property: zOS Batch jobname prefix Name: zosbatch.jobname.[imageId].prefix Description: The z/OS Batch jobname prefix when submitted via zOSMF Required: No Default value: GAL Valid values: 1-7 characters Examples: <code>zosbatch.jobname.SYSA.prefix=JOB</code><code>zosbatch.jobname.default.prefix=XXX</code>"},{"location":"docs/managers/zos-managers/zos-manager/#zos-batch-default-msgclass","title":"z/OS Batch default MSGCLASS","text":"Property: zOS Batch default MSGCLASS Name: zosbatch.default.classzosbatch.default.[imageId].message.class Description: The default message class to set on the job card for submitted jobs Required: No Default value: A Valid values: a valid JES message class literal Examples: <code>zosbatch.default.SYSA.message.class=S</code><code>zosbatch.default.message.class=A</code>"},{"location":"docs/managers/zos-managers/zos-manager/#zos-batch-default-message-level","title":"z/OS Batch default message level","text":"Property: zOS Batch default message level Name: zosbatch.default.message.levelzosbatch.default.[imageId].message.level Description: The default message level to set on the job card for submitted jobs Required: No Default value: (1,1) Valid values: a valid JES message level Examples: <code>zosbatch.default.SYSA.message.level=(1,1)</code><code>zosbatch.default.message.level=(2,0)</code>"},{"location":"docs/managers/zos-managers/zos-manager/#zos-batch-job-truncate-jcl","title":"z/OS Batch job truncate JCL","text":"Property: zOS Batch job truncate JCL Name: zosbatch.batchjob.[imageId].truncate.jcl.records Description: The z/OSMF submit job will fail if supplied with JCL records greater than 80 characters. Setting this property to true will truncate any records to 80 characters and issue a warning message. Required: No Default value: true Valid values: true or false Examples: <code>zosbatch.batchjob.SYSA.truncate.jcl.records=true</code><code>zosbatch.batchjob.default.truncate.jcl.records=false</code>"},{"location":"docs/managers/zos-managers/zos-manager/#zos-batch-job-use-sysaff","title":"z/OS Batch job use SYSAFF","text":"Property: zOS Batch job use SYSAFF Name: zosbatch.batchjob.[imageId].use.sysaff Description: Use the run the z/OS Batch job on the specified image by specifying Required: No Default value: true Valid values: true or false Examples: <code>zosbatch.batchjob.SYSA.use.sysaff=true</code><code>zosbatch.batchjob.default.use.sysaff=false</code>"},{"location":"docs/managers/zos-managers/zos-manager/#restrict-zos-console-processing-to-the-zosmf-server-on-the-specified-image","title":"Restrict z/OS console processing to the zOSMF server on the specified image","text":"Property: Restrict zOS console processing to the zOSMF server on the specified image Name: zosconsole.console.restrict.to.imagezosconsole.console.[imageId].restrict.to.image Description: Use only the zOSMF server running on the image associated with the z/OS Console Required: No Default value: false Valid values: true or false Examples: <code>zosconsole.console.restrict.to.image=true</code><code>zosconsole.console.SYSA.restrict.to.image=true</code>"},{"location":"docs/managers/zos-managers/zos-manager/#zos-file-the-maximum-number-of-items-from-a-unix-directory-list","title":"z/OS File the maximum number of items from a UNIX directory list","text":"Property: zOS File the maximum number of items from a UNIX directory list Name: zosfile.unix.[imageId].directory.list.max.items Description: The maximum number of items the server (e.g. zOSMF, RSE API, etc) returns when listing the content of a UNIX directory Required: No Default value: 1000 Valid values: 0 to 65535 Examples: <code>zosfile.unix.SYSA.directory.list.max.items=1000</code>"},{"location":"docs/managers/zos-managers/zos-manager/#zos-file-restrict-processing-to-the-server-on-the-specified-image","title":"z/OS File restrict processing to the server on the specified image","text":"Property: zOS File restrict processing to the server on the specified image Name: zosfile.file.restrict.to.imagezosfile.file.[imageId].restrict.to.image Description: Use only the server (e.g. zOSMF, RSE API, etc) running on the image associated with the z/OS data set or file Required: No Default value: false Valid values: true or false Examples: <code>zosfile.file.restrict.to.image=true</code><code>zosfile.file.SYSA.restrict.to.image=true</code>"},{"location":"docs/managers/zos-managers/zos-manager/#zos-file-unix-permission-bits-to-be-used-in-creating-the-file-or-directory","title":"z/OS File UNIX permission bits to be used in creating the file or directory","text":"Property: zOS File UNIX permission bits to be used in creating the file or directory Name: zosfile.[imageId].unix.file.permissionzosfile.[imageId].unix.file.permission Description: The UNIX file or directory permission bits to be used in creating the file or directory Required: No Default value: None Valid values: Valid values are r,w,x,s,- Examples: <code>zosfile.unix.file.permission=rwxrwx---</code><code>zosfile.SYSA.unix.file.permission=rwxrwxrrx</code>"},{"location":"docs/managers/zos-managers/zos-manager/#annotations-provided-by-the-manager","title":"Annotations provided by the Manager","text":"<p>The following annotations are available with the z/OS Manager</p>"},{"location":"docs/managers/zos-managers/zos-manager/#zos-batch","title":"z/OS Batch","text":"Annotation: z/OS Batch Name: @ZosBatch Description: The <code>@ZosBatch</code> annotation requests the z/OS Manager to provide a z/OS Batch instance associated with a z/OS image.  The test can request multiple z/OS Batch instances, with the default being associated with the primary z/OS image. At test end, the Manager stores the job output with the test results archive and removes jobs from the JES queue. Attribute: <code>imageTag</code> The <code>imageTag</code> is used to identify the z/OS image. Syntax: <pre>@ZosImage(imageTag=\"A\")public IZosImage zosImageA;@ZosBatch(imageTag=\"A\")public IZosBatch zosBatchA;</pre> Notes: The <code>IZosBatch</code> interface has a single method, {@link IZosBatch#submitJob(String, IZosBatchJobname)} to submit a JCL  as a <code>String</code> and returns a <code>IZosBatchJob</code> instance. See ZosBatch, IZosBatch and IZosBatchJob to find out more."},{"location":"docs/managers/zos-managers/zos-manager/#zos-console","title":"z/OS Console","text":"Annotation: z/OS Console Name: @ZosConsole Description: The <code>@ZosConsole</code> annotation requests the z/OS Manager to provide a z/OS Console instance associated with a z/OS image.  The test can request multiple z/OS Console instances, with the default being associated with the primary z/OS image. Attribute: <code>imageTag</code> The tag of the z/OS Image this variable is to be populated with Syntax: <pre>@ZosImage(imageTag=\"A\")public IZosImage zosImageA;@ZosConsole(imageTag=\"A\") public IZosConsole zosConsoleA;</pre> Notes: The <code>IZosConsole</code> interface has two methods, {@link IZosConsole#issueCommand(String)} and {@link IZosConsole#issueCommand(String, String)} to issue a command to the z/OS console and returns a <code>IZosConsoleCommand</code> instance. See ZosConsole, IZosConsole and IZosConsoleCommand to find out more."},{"location":"docs/managers/zos-managers/zos-manager/#zos-file","title":"z/OS File","text":"Annotation: z/OS File Name: @ZosFileHandler Description: The <code>@ZosFileHandler</code> annotation requests the z/OS Manager to provide a handler instance to manage data sets and UNIX files on a z/OS image.  A single z/OS File Handler instance can manage multiple z/OS data sets and UNIX files on multiple z/OS images. Syntax: <pre>@ZosFileHandlerpublic IZosFileHandler zosFileHandler;</pre> Notes: The <code>IZosFileHandler</code> interface has three methods supplying file name and z/OS image: {@link IZosFileHandler#newDataset(String, dev.galasa.zos.IZosImage)}  {@link IZosFileHandler#newVSAMDataset(String, dev.galasa.zos.IZosImage)} {@link IZosFileHandler#newUNIXFile(String, dev.galasa.zos.IZosImage)} returning an object representing the type of file requested. This can be an existing file or can be created via a method on the file object. See ZosFileHandler, IZosFileHandler, IZosDataset, IZosVSAMDataset and IZosUNIXFile to find out more."},{"location":"docs/managers/zos-managers/zos-manager/#zos-tso-command","title":"z/OS TSO Command","text":"Annotation: z/OS TSO Command Name: @ZosTSOCommand Description: The <code>@ZosTSOCommand</code> annotation requests the z/OS Manager to provide a z/OS TSO Command instance associated with a z/OS image.  The test can request multiple z/OS TSO Command instances, with the default being associated with the primary z/OS image. Attribute: <code>imageTag</code> The tag of the z/OS Image this variable is to be populated with Syntax: <pre>@ZosImage(imageTag=\"A\")public IZosImage zosImageA;@ZosTSOCommand(imageTag=\"A\") public IZosTSOCpmmand zosTSOA;</pre> Notes: The <code>IZosTSOCommand</code> interface provides the methods {@link IZosTSOCommand#issueCommand(String)} and {@link IZosTSOCommand#issueCommand(String, long)} to issue a command to z/OS TSO Command and returns a <code>String</code>. See IZosTSOCommand to find out more."},{"location":"docs/managers/zos-managers/zos-manager/#zos-unix-command","title":"z/OS UNIX Command","text":"Annotation: z/OS UNIX Command Name: @ZosUNIXCommand Description: The <code>@ZosUNIXCommand</code> annotation requests the z/OS Manager to provide a z/OS UNIX instance associated with a z/OS image.  The test can request multiple z/OS UNIX Command instances, with the default being associated with the primary z/OS image. Attribute: <code>imageTag</code> The tag of the z/OS Image this variable is to be populated with Syntax: <pre>@ZosImage(imageTag=\"A\")public IZosImage zosImageA;@ZosUNIXCommand(imageTag=\"A\") public IZosUNIXCommand zosUNIXCommandA;</pre> Notes: The <code>IZosUNIXCommand</code> interface provides the methods {@link IZosUNIXCommand#issueCommand(String)} and {@link IZosUNIXCommand#issueCommand(String, long)} to issue a command to z/OS UNIX and returns a String response. See IZosUNIXCommand to find out more."},{"location":"docs/managers/zos-managers/zos-manager/#code-snippets-and-examples","title":"Code snippets and examples","text":"<p>Use the following code snippets to help you get started with the z/OS Manager.</p>"},{"location":"docs/managers/zos-managers/zos-manager/#request-a-zos-tso-command-instance","title":"Request a z/OS TSO Command instance","text":"<p>The following snippet shows the code that is required to request a z/OS TSO Command instance in a Galasa test:</p> <pre><code>@ZosImage(imageTag=\"A\")\npublic IZosImage zosImageA;\n\n@ZosTSOCommand(imageTag=\"A\")\npublic IZosTSOCommand tsoCommand;\n</code></pre> <p>The code creates a z/OS TSO Command instance associated with the z/OS Image allocated in the zosImageA field.</p>"},{"location":"docs/managers/zos-managers/zos-manager/#issue-a-zos-tso-command-and-retrieve-the-immediate-response","title":"Issue a z/OS TSO Command and retrieve the immediate response","text":"<p>Issue the z/OS TSO <code>TIME</code> Command and retrieve the response:</p> <pre><code>String tsoCommandString = \"TIME\";\nString tsoResponse = tsoCommand.issueCommand(tsoCommandString);\n</code></pre> <p>The String <code>tsoResponse</code>  contains the output of the TSO TIME command, e.g. </p> <pre><code>IKJ56650I TIME-12:01:00 PM. CPU-00:00:00 SERVICE-290 SESSION-00:00:00 APRIL 1,2020\n</code></pre>"},{"location":"docs/managers/zos-managers/zos-manager/#request-a-zos-unix-command-instance","title":"Request a z/OS UNIX Command instance","text":"<p>The following snippet shows the code that is required to request a z/OS UNIX Command instance in a Galasa test:</p> <pre><code>@ZosImage(imageTag=\"A\")\npublic IZosImage zosImageA;\n\n@ZosUNIXCommand(imageTag=\"A\")\npublic IZosUNIXCommand unixCommand;\n</code></pre> <p>The code creates a z/OS UNIX Command instance associated with the z/OS Image allocated in the zosImageA field.</p>"},{"location":"docs/managers/zos-managers/zos-manager/#issue-a-zos-unix-command-and-retrieve-response","title":"Issue a z/OS UNIX Command and retrieve response","text":"<p>Issue the z/OS UNIX <code>date</code> Command and retrieve the response:</p> <pre><code>String unixCommandString = \"date\";\nString unixResponse = unixCommand.issueCommand(unixCommandString);\n</code></pre> <p>The String <code>unixResponse</code>  contains the output of the UNIX TIME command, e.g. </p> <pre><code>Wed Apr 1 12:01:00 BST 2020\n</code></pre>"},{"location":"docs/managers/zos-managers/zos-manager/#request-a-zos-console-instance","title":"Request a z/OS Console instance","text":"<p>The following snippet shows the code that is required to request a z/OS Console instance in a Galasa test:</p> <pre><code>@ZosImage(imageTag=\"A\")\npublic IZosImage zosImageA;\n\n@ZosBatch(imageTag=\"A\")\npublic IZosConsole zosConsole;\n</code></pre> <p>The code creates a z/OS Console instance associated with the z/OS Image allocated in the zosImageA field.</p>"},{"location":"docs/managers/zos-managers/zos-manager/#issue-a-zos-console-command-and-retrieve-the-immediate-response","title":"Issue a z/OS Console command and retrieve the immediate response","text":"<p>Issue a z/OS Console command and retrieve the immediate console command response:</p> <pre><code>String command = \"D A,L\";\nIZosConsoleCommand consoleCommand = zosConsole.issueCommand(command);\nString immediateResponse = consoleCommand.getResponse();\n</code></pre>"},{"location":"docs/managers/zos-managers/zos-manager/#issue-a-zos-console-command-and-retrieve-the-delayed-response","title":"Issue a z/OS Console command and retrieve the delayed response","text":"<p>Issue a z/OS Console command and retrieve the delayed console command response:</p> <pre><code>String command = \"D A,L\";\nIZosConsoleCommand consoleCommand = zosConsole.issueCommand(command);\nString delayedResponse = consoleCommand.requestResponse();\n</code></pre>"},{"location":"docs/managers/zos-managers/zos-manager/#request-a-zos-batch-instance","title":"Request a z/OS Batch instance","text":"<p>The following snippet shows the code that is required to request a z/OS Batch instance in a Galasa test:</p> <pre><code>@ZosImage(imageTag=\"A\")\npublic IZosImage zosImageA;\n\n@ZosBatch(imageTag=\"A\")\npublic IZosBatch zosBatch;\n</code></pre> <p>The code creates a z/OS Batch instance associated with the allocated with the z/OS Image allocated in the zosImageA field.</p>"},{"location":"docs/managers/zos-managers/zos-manager/#submit-a-zos-batch-job","title":"Submit a z/OS Batch Job","text":"<p>Submit a z/OS Batch Job using the supplied JCL and a Galasa allocated Job Name:</p> <pre><code>String jcl = \"//STEP1    EXEC PGM=IEFBR14\";\nIZosBatchJob batchJob = zosBatch.submitJob(jcl, null);\n</code></pre>"},{"location":"docs/managers/zos-managers/zos-manager/#submit-a-zos-batch-job-with-job-card-parameters","title":"Submit a z/OS Batch Job with job card parameters","text":"<p>Submit a z/OS Batch Job using the supplied JCL, a Galasa allocated Job Name and overidding the default input and message class:</p> <pre><code>String jcl = \"//STEP1    EXEC PGM=IEFBR14\";\nZosBatchJobcard jobcard = new ZosBatchJobcard().\n                          .setInputClass(\"B\")\n                          .setMsgClass(\"X\");\nIZosBatchJob batchJob = zosBatch.submitJob(jcl, null, jobcard);\n</code></pre>"},{"location":"docs/managers/zos-managers/zos-manager/#wait-for-zos-batch-job-to-complete","title":"Wait for z/OS Batch Job to complete","text":"<p>Wait for z/OS Batch job to complete and check maximum return code:</p> <pre><code>if (batchJob.waitForJob() &gt; 0) {\n    logger.info(\"Batch job failed RETCODE=\" + batchJob.getRetcode();\n}\n</code></pre> <p>prints, for example:</p> <pre><code>Batch job failed RETCODE=CC 0020\n</code></pre> <p>or</p> <pre><code>Batch job failed RETCODE=ABEND S0C4\n</code></pre>"},{"location":"docs/managers/zos-managers/zos-manager/#retrieve-the-job-output","title":"Retrieve the job output","text":"<p>Use the following code to retrieve the output from a z/OS Batch Job:</p> <pre><code>IZosBatchJobOutput jobOutput = batchJob.retrieveOutput();\nList&lt;IZosBatchJobOutputSpoolFile&gt; spoolFiles = jobOutput.getSpoolFiles();\nfor (IZosBatchJobOutputSpoolFile spoolFile : spoolFiles) {\n    String ddName = spoolFile.getDdname();\n    String output = spoolFile.getRecords();\n    //...\n}\n</code></pre>"},{"location":"docs/managers/zos-managers/zos-manager/#obtain-a-list-of-active-jobs","title":"Obtain a list of active jobs","text":"<p>Use the following code to obtain a list of active jobs called MYJOB1 with an owner of USERID:</p> <pre><code>List&lt;IZosBatchJob&gt; jobs = zosBatch.getJobs(\"MYJOB1\", \"USERID\");\nfor (IZosBatchJob job : jobs) {\n    if (job.getStatus().equals(\"ACTIVE\")) {\n        //...\n    }\n}\n</code></pre>"},{"location":"docs/managers/zos-managers/zos-manager/#retrieve-the-content-of-a-specific-spool-file-from-an-active-cics-region","title":"Retrieve the content of a specific spool file from an active CICS region","text":"<p>Use the following code to retrieve and process the output from the MSGUSR spool file:</p> <pre><code>List&lt;IZosBatchJob&gt; jobs = zosBatch.getJobs(\"CICSRGN\", \"CICSUSR\");\nfor (IZosBatchJob job : jobs) {\n    if (job.getStatus().equals(\"ACTIVE\")) {\n        String msgusr = cicsJob.getSpoolFile(\"MSGUSR\");\n        if (msgusr.contains(\"DFHAC2236\")) {\n            //...\n        }\n        break;\n    }\n}\n</code></pre> <p>The code retrieves a list of CICS regions named CICSRGN with and owner of CICSUSR. It then loops through until it finds the first active region. The content of the MSGUSR spool file is obtained and checked for the string DFHAC2236.</p> <p>In this example, we assume there will only one spool file with the ddname of MSGUSR. If this were not the case, the following code could be used:</p> <pre><code>List&lt;IZosBatchJob&gt; jobs = zosBatch.getJobs(\"CICSRGN\", \"CICSUSR\");\nfor (IZosBatchJob job : jobs) {\n    List&lt;IZosBatchJobOutputSpoolFile&gt; spoolFiles = job.retrieveOutput().getSpoolFiles();\n    for (IZosBatchJobOutputSpoolFile spoolFile : spoolFiles) {\n        if (spoolFile.getDdname().equals(\"SYSOUT\") &amp;&amp;\n            spoolFile.getStepname().equals(\"STEP2\")) {\n            String output = spoolFile.getRecords();\n            //...\n        }\n    }\n}\n</code></pre> <p>Here, the code retrieves the content of the SYSOUT spool file for job step STEP2.</p>"},{"location":"docs/managers/zos-managers/zos-manager/#request-a-zos-file-handler-instance","title":"Request a z/OS File Handler instance","text":"<p>The following snippet shows the code that is required to request a z/OS File Handler instance in a Galasa test:</p> <pre><code>@ZosFileHandler\npublic IZosFileHandler zosFileHandler;\n</code></pre>"},{"location":"docs/managers/zos-managers/zos-manager/#read-the-content-of-an-existing-sequential-data-set","title":"Read the content of an existing sequential data set","text":"<p>Create a new IZosDataset object representing an existing sequential data set. If the data set exists, retrieve the content in text mode:</p> <pre><code>@ZosImage(imageTag=\"A\")\npublic IZosImage zosImage;\n\n@ZosFileHandler\npublic IZosFileHandler zosFileHandler;\n//...\nIZosDataset dataSet = zosFileHandler.newDataset(\"GALASA.EXISTING.DATASET.SEQ\", zosImage);\nif (dataSet.exists()) {\n    String content = dataSet.retrieveAsText();\n    //...\n}\n</code></pre>"},{"location":"docs/managers/zos-managers/zos-manager/#read-the-content-of-an-existing-partitioned-data-set-member","title":"Read the content of an existing partitioned data set member","text":"<p>Create a new IZosDataset object representing an existing partitioned data set (PDS). If the PDS exists, check if the member exists and retrieve it's content in text mode:</p> <pre><code>@ZosImage(imageTag=\"A\")\npublic IZosImage zosImage;\n\n@ZosFileHandler\npublic IZosFileHandler zosFileHandler;\n//...\nIZosDataset dataSet = zosFileHandler.newDataset(\"GALASA.EXISTING.DATASET.SEQ, zosImage);\n    String memberName = \"MEMBER1\";\n    if (dataSet.exists() &amp;&amp; dataSet.memberExists(memberName)) {\n        String content = dataSet.memberRetrieveAsText(memberName);\n        //...\n    }\n</code></pre>"},{"location":"docs/managers/zos-managers/zos-manager/#create-a-new-sequential-data-set","title":"Create a new sequential data set","text":"<p>Create a new IZosDataset object representing a new sequential data set. If the data set does not exist, allocate the data set with attributes to the equivalent of the following JCL:</p> <p><pre><code>//NEWDS    DD DSN=GALASA.NEW.DATASET.SEQ,DISP=(NEW,CATLG),\n//            DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=32720,\n//            UNIT=SYSDA,SPACE=(TRK,(1,1))\n</code></pre> Finally, content is written to the data set in text mode:</p> <pre><code>@ZosImage(imageTag=\"A\")\npublic IZosImage zosImage;\n\n@ZosFileHandler\npublic IZosFileHandler zosFileHandler;\n//...\nIZosDataset dataSet = zosFileHandler.newDataset(\"GALASA.NEW.DATASET.SEQ\", zosImage);\n    if (!dataSet.exists()) {\n        dataSet.setDatasetOrganization(DatasetOrganization.SEQUENTIAL);\n        dataSet.setRecordFormat(RecordFormat.FIXED_BLOCKED);\n        dataSet.setRecordlength(80);\n        dataSet.setBlockSize(32720);\n        dataSet.setUnit(\"SYSDA\");\n        dataSet.setSpace(SpaceUnit.TRACKS, 1, 1);\n        dataSet.create();\n    }\n    List&lt;String&gt; records = new ArrayList&lt;&gt;();\n    records.add(\"RECORD 1\");\n    records.add(\"RECORD 2\");\n    records.add(\"RECORD 3\");\n    dataSet.storeText(String.join(\"\\n\", records));\n</code></pre>"},{"location":"docs/managers/zos-managers/zos-manager/#create-a-new-partitioned-data-set-member","title":"Create a new partitioned data set member","text":"<p>Create a new IZosDataset object representing a new partitioned data (PDS) set member. If the data set does not exist, allocate the PDS with attributes to the equivalent of the following JCL:</p> <p><pre><code>//NEWPDS   DD DSN=GALASA.NEW.DATASET.PDS,DISP=(NEW,CATLG),\n//            DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=32720,\n//            UNIT=SYSDA,SPACE=(TRK,(1,1,15))\n</code></pre> Finally, content is written to a member in the PDS in text mode:</p> <pre><code>@ZosImage(imageTag=\"A\")\npublic IZosImage zosImage;\n\n@ZosFileHandler\npublic IZosFileHandler zosFileHandler;\n//...\nIZosDataset dataSet = zosFileHandler.newDataset(\"GALASA.NEW.DATASET.PDS\", zosImage);\nif (!dataSet.exists()) {\n    dataSet.setDatasetOrganization(DatasetOrganization.SEQUENTIAL);\n    dataSet.setRecordFormat(RecordFormat.FIXED_BLOCKED);\n    dataSet.setRecordlength(80);\n    dataSet.setBlockSize(32720);\n    dataSet.setUnit(\"SYSDA\");\n    dataSet.setSpace(SpaceUnit.TRACKS, 1, 1);\n    dataSet.setDirectoryBlocks(15);\n    dataSet.create();\n}\nString memberName = \"MEMBER1\";\nList&lt;String&gt; records = new ArrayList&lt;&gt;();\n    records.add(\"RECORD 1\");\n    records.add(\"RECORD 2\");\n    records.add(\"RECORD 3\");\n    dataSet.memberStoreText(memberName, String.join(\"\\n\", records));\n}\n</code></pre> <p>To create a PDS/E, i.e. the JCL equivalent of</p> <pre><code>DSNTYPE=LIBRARY\n</code></pre> <p>use</p> <pre><code>dataSet.setDatasetType(DSType.LIBRARY);\n</code></pre> <p>instead of setting the number of directory blocks.</p>"},{"location":"docs/managers/zos-managers/zos-manager/#create-a-new-vsam-ksds","title":"Create a new VSAM KSDS","text":"<p>Create a new IZosVSAMDataset object representing a new VSAM KSDS data set. If the data set is allocated with a minimum set of attributes:</p> <pre><code>IZosVSAMDataset vsamDataSet = zosFileHandler.newVSAMDataset(\"ROBERTD.GALASA.TEST.DS.ANOTHER.KSDS\", zosImage);\nvsamDataSet.setSpace(VSAMSpaceUnit.CYLINDERS, 1, 1);\nvsamDataSet.setRecordSize(50, 101);\nvsamDataSet.create();\n</code></pre>"},{"location":"docs/managers/zos-managers/zos-manager/#read-the-contents-of-a-zos-unix-file","title":"Read the contents of a z/OS UNIX File","text":"<p>Create a new IZosDataset object representing a UNIX file. If the file exists, retrieve the content in text mode:</p> <pre><code>IZosUNIXFile unixFile = zosFileHandler.newUNIXFile(\"/tmp/Galasa/existingFile\", zosImage);\nif (unixFile.exists()) {\n    unixFile.setDataType(UNIXFileDataType.TEXT);\n    String content = unixFile.retrieve();\n}\n</code></pre>"},{"location":"docs/managers/zos-managers/zos-manager/#read-the-contents-of-a-zos-unix-file_1","title":"Read the contents of a z/OS UNIX File","text":"<p>Create a new IZosDataset object representing a new UNIX file. If UNIX file does not exist, create it. Write to the file in binary mode:</p> <pre><code>IZosUNIXFile unixFile = zosFileHandler.newUNIXFile(\"/tmp/Galasa/newFile\", zosImage);\nif (!unixFile.exists()) {\n    unixFile.create();\n}\nList&lt;String&gt; properties = new ArrayList&lt;&gt;();\nproperties.add(\"dev.galasa.property1=value1\");\nproperties.add(\"dev.galasa.property2=value2\");\nproperties.add(\"dev.galasa.property3=value3\");\nunixFile.setDataType(UNIXFileDataType.BINARY);\nunixFile.store(String.join(\"\\n\", properties));\n</code></pre>"},{"location":"docs/managers/zos-managers/zos-manager/#list-the-contents-of-a-zos-unix-directory","title":"List the contents of a z/OS UNIX Directory","text":"<p>Create a new IZosDataset object representing a new UNIX directory. If UNIX directory exists, list its contents:</p> <pre><code>IZosUNIXFile unixDirectory = zosFileHandler.newUNIXFile(\"/tmp/Galasa/\", zosImage);\nif (unixDirectory.exists())\n{\n    Map&lt;String, String&gt; dir = unixDirectory.directoryListRecursive();\n    for (Map.Entry&lt;String, String&gt; entry : dir.entrySet()) {\n        logger.info(String.format(\"%2$-9s: %1$s\", entry.getKey(), entry.getValue()));\n   }\n}\n</code></pre> <p>Example output:</p> <pre><code>directory: /tmp/Galasa/dira\nfile     : /tmp/Galasa/dira/file1\nfile     : /tmp/Galasa/dira/file2\nfile     : /tmp/Galasa/existingFile\nfile     : /tmp/Galasa/newFile\n</code></pre>"},{"location":"docs/managers/zos-managers/zos-mf-manager/","title":"zOS MF Manager","text":"<p>This Manager is at Beta level. You can view the Javadoc documentation for the Manager.</p>"},{"location":"docs/managers/zos-managers/zos-mf-manager/#overview","title":"Overview","text":"<p>This Manager provides Galasa tests with access to a zOS/MF server. Use the z/OS MF Manager to simplify areas of z/OS system management. The z/OS MF Manager can be called from a test or from other Managers. For example, the z/OS Manager calls the z/OS MF Manager to implement z/OS file, console and batch functions via the relevant interface.</p>"},{"location":"docs/managers/zos-managers/zos-mf-manager/#provided-annotations","title":"Provided annotations","text":"<p>The following annotations are available with the zOS MF Manager</p>"},{"location":"docs/managers/zos-managers/zos-mf-manager/#zos-mf","title":"z/OS MF","text":"Annotation: z/OS MF Name: @Zosmf Description: The <code>@Zosmf</code> annotation requests the z/OSMF Manager to provide a z/OSMF instance associated with a z/OS image.  The test can request multiple z/OSMF instances, with the default being associated with the primary zOS image. Attribute: <code>imageTag</code> The tag of the zOS Image this variable is to be populated with Syntax: <pre>@ZosImage(imageTag=\"A\")public IZosImage zosImageA;@Zosmf(imageTag=\"A\")public IZosmf zosmfA;</pre> Notes: The <code>IZosmf</code> interface has a number of methods to issue requests to the zOSMF REST API. See Zosmf and IZosmf to find out more."},{"location":"docs/managers/zos-managers/zos-mf-manager/#configuration-properties","title":"Configuration Properties","text":"<p>The following are properties used to configure the zOS MF Manager.</p>"},{"location":"docs/managers/zos-managers/zos-mf-manager/#zosmf-server-port-is-https","title":"zOSMF Server port is https","text":"Property: zOSMF Server port is https Name: zosmf.server.[imageid].https Description: Use https (SSL) for zOSMF server Required: No Default value: true Valid values: true or false Examples: <code>zosmf.server.https=true</code><code>zosmf.server.SYSA.https=true</code>"},{"location":"docs/managers/zos-managers/zos-mf-manager/#zosmf-image-servers","title":"zOSMF Image Servers","text":"Property: zOSMF Image Servers Name: zosmf.image.IMAGEID.servers Description: The zOSMF servers for use with z/OS Image, the zOS/MF do not need to be running the actual z/OS Image Required: No Default value: None Valid values: Comma separated zOS/MF server IDs Examples: <code>zosmf.image.MYLPAR.servers=MFSYSA,MFSYSB</code>"},{"location":"docs/managers/zos-managers/zos-mf-manager/#zosmf-server-retry-request","title":"zOSMF Server retry request","text":"Property: zOSMF Server retry request Name: zosmf.server.[SERVERID].request.retry Description: The number of times to retry when zOSMF request fails Required: No Default value: 3 Valid values: numerical value &gt; 0 Examples: <code>zosmf.server.request.retry=5</code><code>zosmf.server.MFSYSA.request.retry=5</code>"},{"location":"docs/managers/zos-managers/zos-mf-manager/#zosmf-server-credentials","title":"zOSMF Server Credentials","text":"Property: zOSMF Server Credentials Name: zosmf.server.[SERVERID].credentials Description: The z/OS credentials to use when accessing the zOS/MF server Required: No Default value: None, however the zOS/MF Manager will use the default z/OS image credentials Valid values: Valid credential ID Examples: <code>zosmf.server.MFSYSA.credentials=ZOS</code>"},{"location":"docs/managers/zos-managers/zos-mf-manager/#zosmf-server-image","title":"zOSMF Server Image","text":"Property: zOSMF Server Image Name: zosmf.server.SERVERID.image Description: The z/OS image ID this zOS/MF server lives on Required: No Default value: The SERVERID value is used as the z/OS image ID Valid values: z/OS image IDs Examples: <code>zosmf.server.MFSYSA.image=SYSA</code>"},{"location":"docs/managers/zos-managers/zos-mf-manager/#zosmf-server-port","title":"zOSMF Server port","text":"Property: zOSMF Server port Name: zosmf.server.[serverid].port Description: The port number of the zOS/MF server Required: No Default value: 443 Valid values: A valid IP port number Examples: <code>zosmf.server.port=443</code><code>zosmf.server.MFSYSA.port=443</code>"},{"location":"docs/managers/zos-managers/zos-mf-manager/#zosmf-sysplex-servers","title":"zOSMF Sysplex Servers","text":"Property: zOSMF Sysplex Servers Name: zosmf.sysplex.[SYSPLEXID].default.servers Description: The zOSMF servers active on the supplied sysplex Required: No Default value: None Valid values: Comma separated zOS/MF server IDs Examples: <code>zosmf.sysplex.default.servers=MFSYSA,MFSYSB</code><code>zosmf.sysplex.PLEXA.default.servers=MFSYSA,MFSYSB</code>"},{"location":"docs/managers/zos-managers/zos-program-manager/","title":"zOS Program Manager","text":"<p>This Manager is at Alpha level. </p>"},{"location":"docs/managers/zos-managers/zos-program-manager/#overview","title":"Overview","text":"<p>This Manager allows Galasa tests to compile and link z/OS programs.</p> <p>The <code>@ZosProgram</code> annotation defines the program to the Galasa test. Program attributes, for example, program name, programming language and source location are specified by using the annotation  elements.</p> <p>The source for the program is stored as a resource, along with the test. The z/OS Program Manager processes  each <code>@ZosProgram</code> annotation before any of the test methods are executed. </p> <p>The Manager retrieves the source from the test bundle, builds and submits the relevant compile and link JCL based on  the programs attributes and CPS properties. The batch job is saved with the test run archive. The  program can be executed in the test by retrieving the library containing the load module by using  the <code>getLoadLibrary()</code> method.  </p> <p>You can view the Javadoc documentation for the Manager.</p>"},{"location":"docs/managers/zos-managers/zos-program-manager/#including-the-manager-in-a-test","title":"Including the Manager in a test","text":"<p>To use the z/OS program Manager in a test you must import the @ZosProgram annotation into the test, as shown in the following example: </p> <pre><code>@ZosProgram\npublic IZosProgram zosProgramA;\n</code></pre> <p>You also need to add the Manager dependency into the pom.xml file if you are using Maven, or into the build.gradle file if you are using Gradle. </p> <p>If you are using Maven, add the following dependencies into the pom.xml in the dependencies section:</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;dev.galasa&lt;/groupId&gt;\n    &lt;artifactId&gt;dev.galasa.zosprogram.manager&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre> <p>If you are using Gradle, add the following dependencies into <code>build.gradle</code> in the dependencies closure:</p> <pre><code>dependencies {\n    compileOnly 'dev.galasa:dev.galasa.zosprogram.manager'\n}\n</code></pre>"},{"location":"docs/managers/zos-managers/zos-program-manager/#configuration-properties","title":"Configuration Properties","text":"<p>The following properties are used to configure the z/OS Program Manager.</p>"},{"location":"docs/managers/zos-managers/zos-program-manager/#zos-cics-data-set-prefix","title":"z/OS CICS data set Prefix","text":"Property: zOS CICS data set Prefix Name: zosprogram.cics.[imageid].dataset.prefix Description: The prefix of the CICS z/OS data sets that contain load modules (SDFHLOAD) and source copybooks, macros, link SYSIN (SDFHC370, SDFHCOB, SDFHPL1, SDFHMAC, SDFHSAMP) that are used in program compile and link JCL. Required: Yes, for CICS programs only. The property is not used in non CICS programs Default value: 'CICS' Valid values: A comma separated list of one or more valid z/OS data set prefixes Examples: <code>zosprogram.cics.MVSA.dataset.prefix=CICS</code><code>zosprogram.cics.default.dataset.prefix=SYS1,CICS</code>"},{"location":"docs/managers/zos-managers/zos-program-manager/#zos-language-environment-data-set-prefix","title":"z/OS Language Environment data set prefix","text":"Property: zOS Language Environment data set prefix Name: zosprogram.le.[imageid].dataset.prefix Description: The prefix of the Language Environment z/OS data sets that contain load modules (SCEERUN, SCEERUN2) and source copybooks, macros, link SYSIN etc (SCEESAMP) that are used in program compile and link JCL. Required: Yes Default value: 'CEE' Valid values: A comma separated list of one or more valid zOS data set prefixess Examples: <code>zosprogram.le.MVSA.dataset.prefix=CEE</code><code>zosprogram.le.dataset.prefix=SYS1.LE,CEE</code>"},{"location":"docs/managers/zos-managers/zos-program-manager/#zos-program-language-compile-syslibs","title":"z/OS Program Language compile SYSLIBs","text":"Property: zOS Program Language compile SYSLIBs Name: zosprogram.[language].[imageid].compile.syslibs Description: The site specific and language specific (COBOL, C, PL1, ASSEMBLER) custom z/OS data sets that contain source copybooks and macros that are used in the compile SYSLIB concatenation in the z/OS program compile and link JCL. Required: No Default value: None Valid values: A comma separated list of one or more valid zOS data sets Examples: <code>zosprogram.cobol.MVSA.compile.syslibs=TEAM.COPYBOOK</code><code>zosprogram.cobol.compile.syslibs=COMPANY.COPYBOOK,TEAM.COPYBOOK</code>"},{"location":"docs/managers/zos-managers/zos-program-manager/#zos-program-language-data-set-prefix","title":"z/OS Program Language data set prefix","text":"Property: zOS Program Language data set prefix Name: zosprogram.[language].[imageid].dataset.prefix Description: The prefix of the language specific z/OS data sets that contain STEPLIB load modules that are used in program compile and link JCL, for example, in COBOL - SIGYCOMP, in C - SCCNCMP, in PL1 - SIBMZCMP Required: An entry is required for each language used, for example, COBOL, C, PL1, ASSEMBLER Default value: None Valid values: A comma separated list of one or more valid zOS data set prefixes Examples: <code>zosprogram.cobol.MVSA.dataset.prefix=IGY.V6R3M0</code><code>zosprogram.cobol.dataset.prefix=SYS1.COBOL,IGY.V6R3M0</code>"},{"location":"docs/managers/zos-managers/zos-program-manager/#zos-program-language-link-syslibs","title":"z/OS Program Language link SYSLIBs","text":"Property: zOS Program Language link SYSLIBs Name: zosprogram.[language].[imageid].link.syslibs Description: The site specific and language specific (COBOL, C, PL1, ASSEMBLER) custom z/OS data sets that contain load modules that are used in the link SYSLIB concatenation in the z/OS program compile and link JCL. Required: No Default value: None Valid values: A comma separated list of zOS data sets Examples: <code>zosprogram.cobol.MVSA.link.syslibs=TEAM.LOADLIB</code><code>zosprogram.cobol.link.syslibs=COMPANY.LOADLIB,TEAM.LOADLIB</code>"},{"location":"docs/managers/zos-managers/zos-program-manager/#annotations-provided-by-the-manager","title":"Annotations provided by the Manager","text":"<p>The following annotations are available with the z/OS Program Manager</p>"},{"location":"docs/managers/zos-managers/zos-program-manager/#zos-program","title":"z/OS Program","text":"Annotation: z/OS Program Name: @ZosProgram Description: The <code>@ZosProgram</code> annotation requests the z/OS Program Manager to Compile and Bind a program on a z/OS image.  The test can request multiple z/OS Program instances Attribute: <code>name</code> The program name. Required. Attribute: <code>location</code> Path to the location of the program source in the Galasa test bundle. This can be either the full path including the file name or the directory containing the source with the name specified in the name attribute with the extension specified in the language attribute. Optional. The default value is \"resources\". Attribute: <code>language</code> The programming language. Required. See ZosProgram.Language.  Attribute: <code>cics</code> Is a CICS program and requires the CICS translator. Optional. The default value is false. Attribute: <code>loadlib</code> The load module data set name. Optional. The default value is \"\". Attribute: <code>imageTag</code> The <code>imageTag</code> is used to identify the z/OS image. Optional. The default value is \"primary\". Attribute: <code>compile</code> Compile this zOS program. Optional. The default value is true. Syntax: <pre>@ZosImage(imageTag=\"A\")public IZosImage zosImageA;@ZosProgram(imageTag=\"A\")public IZosProgram zosProgramA;</pre> Notes: The <code>IZosProgram</code> interface has a number of methods to manage the z/OS Program. See ZosProgram and IZosProgram to find out more."},{"location":"docs/managers/zos-managers/zos-program-manager/#code-snippets-and-examples","title":"Code snippets and examples","text":"<p>Use the following code snippets to help you get started with the z/OS Program Manager.</p>"},{"location":"docs/managers/zos-managers/zos-program-manager/#compile-and-link-a-cobol-program","title":"Compile and Link a COBOL program","text":"<p>The following snippet shows the code that is required to compile and link a COBOL program called MYPROG in a Galasa test:</p> <pre><code>@ZosProgram(name = \"MYPROG\",\n    location = \"source\",\n    language = Language.COBOL,\n    imageTag = \"A\")\npublic IZosProgram myprog;\n</code></pre> <p>The program source is stored in a file named MYPROG.cbl in a folder named source in the test bundle resources folder.  The manager builds the JCL to compile and link the source code and submits it on the zOS Image allocated in the zosImageA field.</p>"},{"location":"docs/managers/zos-managers/zos-program-manager/#run-the-compiled-program","title":"Run the compiled program","text":"<p>The following snippet shows the code required to run the compiled program in a batch job:</p> <pre><code>@ZosImage(imageTag = \"A\")\npublic IZosImage image;\n\n@ZosBatch(imageTag = \"A\")\npublic IZosBatch zosBatch;\n\n//...\n\nStringBuilder jcl = new StringBuilder();\njcl.append(\"//STEP1   EXEC PGM=\");\njcl.append(myprog.getName());\njcl.append(\"\\n\");\njcl.append(\"//STEPLIB DD DSN=\");\njcl.append(myprog.getLoadlib().getName());\njcl.append(\",DISP=SHR\\n\");\njcl.append(\"//SYSOUT  DD SYSOUT=*\");\nIZosBatchJob job = zosBatch.submitJob(jcl.toString(), null);\n//...\n</code></pre> <p>The manager created a load library for MYPROG because the @ZosProgram annotation did not specify one. The name of the library is obtained using the getLoadlib() method on the field so that it can be added to the STEPLIB in the JCL. </p>"},{"location":"docs/managers/zos-managers/zos-tso-command-ssh-manager/","title":"zOS TSO Command SSH Manager","text":"<p>This Manager is at Beta level. You can view the Javadoc documentation for the Manager.</p>"},{"location":"docs/managers/zos-managers/zos-tso-command-ssh-manager/#overview","title":"Overview","text":"<p>This Manager is the internal implementation of the zOS TSO Command Manager using SSH.</p> <p>See the zOS Manager for details of the z/OS TSO annotations and code snippets.</p>"},{"location":"docs/managers/zos-managers/zos-tso-command-ssh-manager/#configuration-properties","title":"Configuration Properties","text":"<p>The following are properties used to configure the zOS TSO Command SSH Manager.</p>"},{"location":"docs/managers/zos-managers/zos-tso-command-ssh-manager/#the-tsocmd-path","title":"The tsocmd path","text":"Property: The tsocmd path Name: zostsocommand.[imageid].tsocmd.command.path Description: The path to the tsocmd command Required: No Default value: tsocmd Valid values: A valid PATH environment variable or a full path name Examples: <code>zostsocommand.command.tsocmd.path=tsocmd</code><code>zostsocommand.MFSYSA.tsocmd.command.path=/tools/tsocmd</code>"},{"location":"docs/managers/zos-managers/zos-unix-command-ssh-manager/","title":"zOS UNIX Command SSH Manager","text":"<p>This Manager is at Beta level. You can view the Javadoc documentation for the Manager.</p>"},{"location":"docs/managers/zos-managers/zos-unix-command-ssh-manager/#overview","title":"Overview","text":"<p>This Manager is the internal implementation of the z/OS UNIX Command Manager using SSH.  See the zOS Manager for details of the z/OS UNIX annotations and  code snippets.</p> <p>You can view the Javadoc  documentation for the Manager.</p>"},{"location":"docs/managers/zos-managers/zos3270terminal-manager/","title":"Zos3270Terminal Manager","text":"<p>This Manager is at Beta level. You can view the Javadoc documentation for the Manager.</p>"},{"location":"docs/managers/zos-managers/zos3270terminal-manager/#overview","title":"Overview","text":"<p>The zos3270Terminal Manager enables 3270 terminal interactions with back-end application programs and subsystems. </p> <p>Colour and highlight validation is supported. Use the <code>retrieveHighlightAtCursor</code> method to check that a field is highlighted as expected. Use the <code>retrieveColourAtCursor</code> method to check that the text colour in a specified field is as expected. You can check for the following colours: blue, red, pink, green, turquoise, yellow, neutral, and default. Use the <code>terminal.reportExtendedScreen</code> method to send colour output to the log. Support is also provided for diffent screen sizes. Screen sizes can be specified on the <code>@Zos3270Terminal</code> annotation.</p> <p>The <code>ConfidentialTextFiltering</code> service enables confidential information such as passwords to be replaced with a numbered shield in these generated logs. </p> <p>Examples of using colour support and screen sizing are available in the Code snippets and examples section.</p> <p>When running a Galasa test with the Galasa CLI, terminal images are logged to the run log and PNG representations of the terminal screens can also be saved to the Result Archive Store (RAS) as the outputs are now controlled by the <code>zos3270.terminal.output</code> CPS property.</p> <p>The zos3270Terminal Manager supports Gherkin keywords. </p> <p>Note: The feature for saving PNG representations of the terminal screens to the RAS is available in the current release as experimental code only.</p>"},{"location":"docs/managers/zos-managers/zos3270terminal-manager/#including-the-manager-in-a-test","title":"Including the Manager in a test","text":"<p>To use the Zos3270Terminal Manager in a test you must import the @Zos3270Terminal annotation into the test, as shown in the following example: </p> <pre><code>@Zos3270Terminal(imageTag = \"PRIMARY\")\npublic ITerminal terminal;\n</code></pre> <p>To use the colour and highlight features in a test, import the following components into the test:</p> <pre><code>import dev.galasa.zos3270.spi.Colour;\nimport dev.galasa.zos3270.spi.Highlight;\n</code></pre> <p>You also need to add the Manager dependency into the pom.xml file if you are using Maven, or into the build.gradle file if you are using Gradle. </p> <p>If you are using Maven, add the following dependencies into the pom.xml in the dependencies section:</p> <pre><code>&lt;dependency&gt;\n&lt;groupId&gt;dev.galasa&lt;/groupId&gt;\n&lt;artifactId&gt;dev.galasa.zos3270.manager&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre> <p>If you are using Gradle, add the following dependencies into <code>build.gradle</code> in the dependencies closure:</p> <pre><code>dependencies {\ncompileOnly 'dev.galasa:dev.galasa.zos3270.manager'\n}\n</code></pre>"},{"location":"docs/managers/zos-managers/zos3270terminal-manager/#configuration-properties","title":"Configuration Properties","text":"<p>The following properties are used to configure the Zos3270Terminal Manager:</p>"},{"location":"docs/managers/zos-managers/zos3270terminal-manager/#apply-confidential-text-filtering-to-screen-records","title":"Apply Confidential Text Filtering to screen records","text":"Property: ConfidentialTextFiltering CPS Property Name: zos3270.apply.ctf Description: Logs and screen recordings are passed through the Confidential Text Filtering services, to hide text, for example, passwords Required: No Default value: true Valid values: true, false Examples: <code>zos3270.apply.ctf=true</code>"},{"location":"docs/managers/zos-managers/zos3270terminal-manager/#extra-bundles-required-to-implement-the-cics-ts-manager","title":"Extra bundles required to implement the CICS TS Manager","text":"Property: ExtraBundles CPS Property Name: cicsts.extra.bundles Description: The symbolic names of any bundles that need to be loaded with the CICS TS Manager Required: No Default value: dev.galasa.cicsts.ceci.manager, dev.galasa.cicsts.ceda.manager, dev.galasa.cicsts.cemt.manager Valid values: Bundle-symbolic names in a comma separated list Examples: <code>cicsts.extra.bundles=org.example.cicsts.provisioning</code>"},{"location":"docs/managers/zos-managers/zos3270terminal-manager/#select-the-http-server-to-view-live-updates","title":"Select the HTTP server to view live updates","text":"Property: LiveTerminalUrl CPS Property Name: zos3270.live.terminal.images Description: Set the URL to send live terminal updates for displaying in Eclipse. Eclipse sets this property in the overrides to indicate that the z/OS 3270 is to place the terminal images ready for live viewing in the Eclipse UI Required: No Default value: There is no default, an empty value means that no live recording is done Valid values: A valid URL Examples: <code>zos3270.console.terminal.images=example.url</code>"},{"location":"docs/managers/zos-managers/zos3270terminal-manager/#send-terminal-images-to-the-console-or-run-log","title":"Send terminal images to the console or run log","text":"Property: LogConsoleTerminals CPS Property Name: zos3270.console.terminal.images Description: Enables terminal images to be logged to the console or run log Required: No Default value: true Valid values: true, false Examples: <code>zos3270.console.terminal.images=true</code>"},{"location":"docs/managers/zos-managers/zos3270terminal-manager/#add-custom-3270-device-types","title":"Add custom 3270 device types","text":"Property: 3270DeviceTypes CPS Property Name: zos3270.image.xxxxxx.device.types Description: Allows for custom terminal device types Required: No Default value: IBM-DYNAMIC, IBM-3278-2 Valid values: Valid 3270 device types in a comma separated list Examples: <code>zos3270.image.custom.device.types=IBM-DYNAMIC,IBM-3278-2</code>"},{"location":"docs/managers/zos-managers/zos3270terminal-manager/#select-3270-terminal-outputs","title":"Select 3270 terminal outputs","text":"Property: 3270TerminalOutput CPS Property Name: zos3270.terminal.output Description: Experimental: Selects the representations of 3270 terminal screens to be saved to the RAS Required: No Default value: JSON Valid values: JSON, PNG Examples: <code>zos3270.terminal.output=json,png</code>"},{"location":"docs/managers/zos-managers/zos3270terminal-manager/#annotations-provided-by-the-manager","title":"Annotations provided by the Manager","text":"<p>The following annotations are provided by the Zos3270Terminal Manager:</p>"},{"location":"docs/managers/zos-managers/zos3270terminal-manager/#zos-3270-terminal","title":"z/OS 3270 Terminal","text":"Annotation: z/OS 3270 Terminal Name: @Zos3270Terminal Description: The <code>@Zos3270Terminal</code> annotation requests the z/OS 3270 Terminal Manager to provide a 3270 terminal associated with a z/OS image. Attribute: <code>imageTag</code> The <code>imageTag</code> is used to identify the z/OS image. Optional. The default value is \"primary\". Attribute: <code>autoConnect</code> Allows a user to choose if the terminal automatically connects in the provision start stage. Optional. The default value is true. Syntax: <pre>@ZosImage(imageTag=\"A\")public IZosImage zosImageA;@Zos3270Terminal(imageTag=\"A\")public ITerminal zosTerminalA;</pre> Notes: The <code>ITerminal</code> interface has a number of methods to issue commands to the 3270 client. See ITerminal to find out more."},{"location":"docs/managers/zos-managers/zos3270terminal-manager/#code-snippets-and-examples","title":"Code snippets and examples","text":""},{"location":"docs/managers/zos-managers/zos3270terminal-manager/#check-that-the-correct-screen-is-displayed-and-available","title":"Check that the correct screen is displayed and available","text":"<p>The following example checks that the logon screen is displayed and that the keyboard is available for input: </p> <pre><code>terminal.waitForKeyboard().waitForTextInField(\"SIMPLATFORM LOGON SCREEN\");\n</code></pre>"},{"location":"docs/managers/zos-managers/zos3270terminal-manager/#log-on-to-the-system","title":"Log on to the system","text":"<p>The following example positions the cursor on the correct field and logs on to the system with User ID 'TESTER1' and password 'SYS1': </p> <pre><code>terminal.positionCursorToFieldContaining(\"Userid\").tab().type(\"TESTER1\")\n        .positionCursorToFieldContaining(\"Password\").tab().type(\"SYS1\").enter();\n</code></pre>"},{"location":"docs/managers/zos-managers/zos3270terminal-manager/#select-an-application","title":"Select an application","text":"<p>The following example checks that the expected text \"SIMBANK MAIN MENU\" is displayed, positions the cursor to the correct field, and selects the \"BANKTEST\" application : </p> <pre><code>terminal.waitForKeyboard().waitForTextInField(\"SIMBANK MAIN MENU\").positionCursorToFieldContaining(\"===&gt;\")\n        .tab().type(\"BANKTEST\").enter();\n</code></pre>"},{"location":"docs/managers/zos-managers/zos3270terminal-manager/#check-that-value-of-a-field-is-displayed-in-the-expected-colour","title":"Check that value of a field is displayed in the expected colour","text":"<p>The following example checks that the value in the customer number field is the colour turquoise: </p> <pre><code>terminal.positionCursorToFieldContaining(\"CUSTOMER NUMBER\").cursorRight();\nassertThat(terminal.retrieveColourAtCursor()).isEqualTo(Colour.TURQUOISE);\n</code></pre>"},{"location":"docs/managers/zos-managers/zos3270terminal-manager/#check-that-value-in-a-specified-screen-position-is-in-the-expected-colour","title":"Check that value in a specified screen position is in the expected colour","text":"<p>The following example checks that the text in a specified screen position is the colour blue: </p> <pre><code>assertThat(terminal.retrieveColourAtPosition(5, 3)).isEqualTo(Colour.BLUE);\n</code></pre>"},{"location":"docs/managers/zos-managers/zos3270terminal-manager/#customise-screen-size","title":"Customise screen size","text":"<p>You can define your terminal size in your test code by setting the primary rows and columns:</p> <pre><code>@Zos3270Terminal(primaryColumns = 80, primaryRows = 24)\n        public ITerminal t2;\n</code></pre>"},{"location":"docs/managers/zos-managers/zos3270terminal-manager/#customise-logging","title":"Customise logging","text":"<p>The following example sends all field attributes to the log: </p> <pre><code>terminal.reportExtendedScreen(true, true, true, true, true, true, true);\n</code></pre> <p>where the attributes are printCursor, printColour, printHighlight, printIntensity, printProtected, printNumeric, and printModified.</p>"},{"location":"docs/reference/","title":"Reference","text":"<p>Galasa provides Javadoc for the Galasa Managers, syntax information for the Galasa command line interface (Galasa CLI) commands, and a REST API for the Galasa Ecosystem.</p>"},{"location":"docs/reference/galasa-javadoc/","title":"Javadoc for the Galasa Managers","text":"<p>You can find the links to the Javadoc API documentation for all the Galasa Managers on the overview page.</p> <p>You can view the installation verification tests (IVTs) for the Managers in GitHub.</p>"},{"location":"docs/reference/galasa-rest-api-docs/","title":"Ecosystem REST API documentation","text":"<p>The Galasa Ecosystem features a REST API that you can use to interact with your ecosystem and perform several tasks, for example, retrieving test artifacts, configuring CPS properties, and submitting test runs, allowing you to create integrations with your own applications.</p> <p>The REST API documentation can be found on the Galasa Ecosystem API documentation page.</p>"},{"location":"docs/reference/cli-syntax/","title":"Command line interface commands","text":"<p>Syntax information for the Galasa command line interface (Galasa CLI) commands is generated from the CLI code in the Galasa GitHub repository.</p>"},{"location":"docs/reference/cli-syntax/errors-list/","title":"Errors on the command line","text":""},{"location":"docs/reference/cli-syntax/errors-list/#errors","title":"Errors","text":"<p>The <code>galasactl</code> tool can generate the following errors:</p> <ul> <li>GAL1001E: Unsupported bootstrap URL {}. Acceptable values start with 'http' or 'https'. Use the --help flag for more information, or refer to the documentation at https://galasa.dev/docs/reference</li> <li>GAL1002E: Bootstrap url does not end in '/bootstrap'. Bootstrap url is '{}'. Use the --help flag for more information, or refer to the documentation at https://galasa.dev/docs/reference</li> <li>GAL1003E: Bootstrap contents is badly formed. Bootstrap is at {}. Reason is: {}</li> <li>GAL1004E: Failed to load the bootstrap from {}. Reason is {}. If the URL is not resolving, try adding the hostname to your /etc/hosts file. This might especially be needed if communicating over a VPN connection.</li> <li>GAL1005E: Failed to write to 'throttle' file {}. Reason is {}</li> <li>GAL1006E: The submit command does not support mixing of the test selection flags and a portfolio. Use the --help flag for more information, or refer to the documentation at https://galasa.dev/docs/reference</li> <li>GAL1007E: Failed to create report yaml file {}. Reason is {}</li> <li>GAL1008E: Failed to check if group {} exists already. Reason is {}</li> <li>GAL1009E: The submit command requires either test selection flags (eg: --stream, --class, --bundle, --package, --tag, --regex, --test, --gherkin) or --portfolio flag to be specified. Use the --help flag for more information, or refer to the documentation at https://galasa.dev/docs/reference</li> <li>GAL1010E: Invalid override '{}'</li> <li>GAL1011E: Failed to encode the yaml file {}. Reason is {}</li> <li>GAL1012E: Failed to prepare test report for writing to json file {}. Reason is {}</li> <li>GAL1013E: Failed to write test report json file {}. Reason is {}</li> <li>GAL1014E: Failed to prepare test report for writing to the junit results file {}. Reason is {}</li> <li>GAL1015E: Failed to  write test report junit results file {}. Reason is {}</li> <li>GAL1016E: There are no tests in the test porfolio {}</li> <li>GAL1017E: Not all runs passed. {} failed.</li> <li>GAL1018E: No tests were selected.</li> <li>GAL1019E: Invalid override '{}'</li> <li>GAL1020E: Failed to open log file '{}' for writing. Reason is {}</li> <li>GAL1021E: Failed to open portfolio file '{}' for reading. Reason is {}</li> <li>GAL1022E: Failed to read portfolio file '{}' because the content is in the wrong format. Reason is {}</li> <li>GAL1023E: Failed to read portfolio file '{}' because the content are not using format '{}'.</li> <li>GAL1024E: Failed to read portfolio file '{}' because the content are not a resource of type '{}'.</li> <li>GAL1025E: Unable to locate test stream '{}' catalog location</li> <li>GAL1026E: Failed to find location of tests in stream '{}'. Reason is {}</li> <li>GAL1027E: Failed to copy test catalog from REST reply for property '{}', stream '{}'. Reason is {}</li> <li>GAL1028E: Failed to unmarshal test catalog from REST reply for property '{}', stream '{}'. Reason is {}</li> <li>GAL1029E: Stream '{}' is not found in the ecosystem. There are no streams set up. Ask your Galasa system administrator to add a new stream with the desired name.</li> <li>GAL1030E: Stream '{}' is not found in the ecosystem. Valid streams are:{}. Try again using a valid stream, or ask your Galasa system administrator to add a new stream with the desired name.</li> <li>GAL1031E: Invalid flags. --bundle, --package, --test, --tag, and --class flags can only be specified if --stream is provided. Use the --help flag for more information, or refer to the documentation at https://galasa.dev/docs/reference</li> <li>GAL1032E: Invalid select regex '{}'. Reason is {}</li> <li>GAL1033E: Invalid select quoted regex '{}'. Reason is {}</li> <li>GAL1034E: Class '{}' is not format 'bundle/class'</li> <li>GAL1035E: Class '{}' is not format. Name is blank</li> <li>GAL1036E: File '{}' exists. Use the --force flag to overwrite it.</li> <li>GAL1037E: Invalid Java package name '{}' should not contain the '{}' character. Use the --help flag for more information, or refer to the documentation at https://galasa.dev/docs/reference</li> <li>GAL1038E: Invalid Java package name '{}' should not start with the '{}' character. Use the --help flag for more information, or refer to the documentation at https://galasa.dev/docs/reference</li> <li>GAL1039E: Invalid Java package name '{}' should not end with the '{}' character. Use the --help flag for more information, or refer to the documentation at https://galasa.dev/docs/reference</li> <li>GAL1040E: Invalid Java package name. Package name should not be blank. Use the --help flag for more information, or refer to the documentation at https://galasa.dev/docs/reference</li> <li>GAL1041E: Failed to create folders '{}'. Reason is '{}'. Check that you have permissions to write to that folder, and that there is enough disk space available and try again.</li> <li>GAL1042E: Failed to open file '{}' for writing. Reason is '{}'. Check that you have permissions to write to that folder and file, and that there is enough disk space available and try again.</li> <li>GAL1043E: Failed to open file '{}' for reading. Reason is '{}'. Check that you have permissions to read the file and try again.</li> <li>GAL1044E: Invalid Java package name. Package name '{}' contains the reserved java keyword '{}'.</li> <li>GAL1045E: Invalid feature name. Feature name '{}' cannot be used as a java package name. '{}'</li> <li>GAL1046E: Failed to determine the home folder of this user. '{}'</li> <li>GAL1047E: Cannot create the yaml report in file '{}' as that file already exists.</li> <li>GAL1048E: Failed to read from 'throttle' file '{}'. Reason is '{}'</li> <li>GAL1049E: Invalid value '{}' read from 'throttle' file '{}'. Reason is '{}'. Use the --help flag for more information, or refer to the documentation at https://galasa.dev/docs/reference</li> <li>GAL1050E: JAVA_HOME environment variable is not set. It must be for when --local flag is used.</li> <li>GAL1051E: Failed to determine if folder '{}' exists. Reason is '{}'</li> <li>GAL1052E: Folder '{}' is missing. JAVA_HOME environment variable should refer to a folder which contains a 'bin' folder.</li> <li>GAL1053E: Failed to determine if '{}' exists. Reason is '{}'</li> <li>GAL1054E: Program '{}' should exist. JAVA_HOME has been set incorrectly.</li> <li>GAL1055E: Failed to read bootstrap file '{}'. Reason is '{}'</li> <li>GAL1056E: The RAS folder path could not be detected in trace output for runId '{}'</li> <li>GAL1057E: The run identifier could not be detected in trace output of the child process</li> <li>GAL1058E: Failed to load bootstrap file '{}'. Reason is '{}'</li> <li>GAL1059E: Failed to load overrides file '{}'. Reason is '{}'</li> <li>GAL1060E: Badly formed OBR parameter '{}'. Expected it to be of the form mvn:///obr with 4 parts separated by slash characters. <li>GAL1061E: Badly formed OBR parameter '{}'. Expected it to be of the form mvn:///obr with 4 parts separated by slash characters. <li>GAL1062E: Badly formed OBR parameter '{}'. Expected it to be of the form mvn:///obr with a 'mvn:' prefix. <li>GAL1063E: Badly formed OBR parameter '{}'. Expected it to be of the form mvn:///obr with an '/obr' suffix. <li>GAL1064E: Badly formed Class parameter '{}'. Expected it to be of the form / with no .class suffix. No slash found. <li>GAL1065E: Badly formed Class parameter '{}'. Expected it to be of the form / with no .class suffix. Too many slashes found. <li>GAL1066E: Badly formed Class parameter '{}'. Expected it to be of the form / with no .class suffix. Unwanted .class suffix detected. <li>GAL1067E: Unsupported value '{}' for parameter --format. Supported values are: {}. Use the --help flag for more information, or refer to the documentation at https://galasa.dev/docs/reference</li> <li>GAL1068E: Could not query run results. Reason: '{}'</li> <li>GAL1069E: Could not open log file for writing. '{}' is a directory, the --log parameter should refer to a file path (existing or not), or '-' (the console)</li> <li>GAL1070E: Invalid value '{}' detected for optional property '{}' in bootstrap properties. Valid values are 'listen' or 'attach'. Only used when --debug flag is set. Defaults to 'listen'. Can be overridden with the --debugMode flag.</li> <li>GAL1071E: Invalid value '{}' detected for optional --debugMode argument. Valid values are 'listen' or 'attach'. Only used when --debug flag is set. Defaults to 'listen'. Default can be set with an optional property '{}' in bootstrap properties.</li> <li>GAL1072E: Invalid value '{}' detected for optional property '{}' in bootstrap properties. Valid values must be a non-zero positive integer, for a port number. Only used when --debug flag is set. Defaults to '{}'. Can be overridden with the --debugPort flag.</li> <li>GAL1073E: Could not get run artifacts. Reason: '{}'</li> <li>GAL1074E: Could not download artifact '{}'. Reason: '{}'</li> <li>GAL1075E: run name '{}' is invalid. Expected it to be in format starting with letters, and ending in a number with no non-alphanumeric characters.</li> <li>GAL1076E: Badly formed from or to value '{}' specified in the age parameter. The value could not be converted into an integer value.</li> <li>GAL1077E: Invalid value '{}' detected for age parameter. The 'from' value must be greater than the 'to' value.</li> <li>GAL1078E: Badly formed '--age' parameter value '{}' specified. Age of the test runs should be specified in the format '{FROM}{TIME-UNIT}:{TO}{TIME-UNIT}' or '{FROM}{TIME-UNIT}', where 'FROM' is a positive, non-zero integer, 'TO' is a non-negative integer, and 'TIME-UNIT' can be {}. 'FROM' must be greater than 'TO'. 'TO' defaults to 0 if not specified. Use the --help flag for more information, or refer to the documentation at https://galasa.dev/docs/reference</li> <li>GAL1079E: The --age, --name, or --group parameter must be used to identify which test run(s) you want see. Use the --help flag for more information, or refer to the documentation at https://galasa.dev/docs/reference</li> <li>GAL1080E: Invalid 'from' value '{}' in the '--age' parameter. Age of the test runs should be specified in the format '{FROM}{TIME-UNIT}:{TO}{TIME-UNIT}' or '{FROM}{TIME-UNIT}', where 'FROM' is a positive, non-zero integer, 'TO' is a non-negative integer, and 'TIME-UNIT' can be {}. 'FROM' must be greater than 'TO'. 'TO' defaults to 0 if not specified. Use the --help flag for more information, or refer to the documentation at https://galasa.dev/docs/reference</li> <li>GAL1081E: Unable use a negative value '{}' in the '--age' parameter. Age of the test runs should be specified in the format '{FROM}{TIME-UNIT}:{TO}{TIME-UNIT}' or '{FROM}{TIME-UNIT}', where 'FROM' is a positive, non-zero integer, 'TO' is a non-negative integer, and 'TIME-UNIT' can be {}. 'FROM' must be greater than 'TO'. 'TO' defaults to 0 if not specified. Use the --help flag for more information, or refer to the documentation at https://galasa.dev/docs/reference</li> <li>GAL1082E: Invalid time unit specified '{}' in the '--age' parameter. Age of the test runs should be specified in the format '{FROM}{TIME-UNIT}:{TO}{TIME-UNIT}' or '{FROM}{TIME-UNIT}', where 'FROM' is a positive, non-zero integer, 'TO' is a non-negative integer, and 'TIME-UNIT' can be {}. 'FROM' must be greater than 'TO'. 'TO' defaults to 0 if not specified. Use the --help flag for more information, or refer to the documentation at https://galasa.dev/docs/reference</li> <li>GAL1083E: No artifacts to download for run: '{}'</li> <li>GAL1084E: Communications failure while closing an HTTP response. '{}'</li> <li>GAL1085E: Programming logic error. ReadTextFile operation on embedded file system failed. Reason is {}</li> <li>GAL1086E: Communications problem between the command-line tool and the target Galasa Ecosystem. The tool could not retrieve the list of valid result names. Reason: '{}'</li> <li>GAL1087E: Invalid '--result' parameter value: {}. The possible result values currently in the Ecosystem Result Archive Store (RAS) are: {}</li> <li>GAL1088E: --active and --result must not be used at the same time, they are mutually exclusive. Use the --help flag for more information, or refer to the documentation at https://galasa.dev/docs/reference</li> <li>GAL1089E: Need to use --maven and/or --gradle parameter Use the --help flag for more information, or refer to the documentation at https://galasa.dev/docs/reference</li> <li>GAL1090E: Could not get username of current requestor. Reason is '{}'</li> <li>GAL1091E: '{}' is not a properly formed file URL Use the --help flag for more information, or refer to the documentation at https://galasa.dev/docs/reference</li> <li>GAL1092E: Galasa Ecosystem error: A test was submitted for launch. The galasa runtime is not reporting test progress. The test is lost and may execute but test progress cannot be monitored from this tool. (bundle: {}, class: {}).</li> <li>GAL1093E: Failed to submit test (bundle: {}, class: {}). Reason is: {}</li> <li>GAL1094E: User error: Cannot run test {} on a local JVM because no OBR information is available. Supply an OBR using the --obr parameter, or (if using a portfolio) ensure the portfolio contains an OBR for this test. Use the --help flag for more information, or refer to the documentation at https://galasa.dev/docs/reference</li> <li>GAL1095E: namespace '{}' is invalid. Expected it to be in a format starting with letters, and ending in a number with no non-alphanumeric characters. Use the --help flag for more information, or refer to the documentation at https://galasa.dev/docs/reference</li> <li>GAL1096E: Could not query namespace results. Reason: '{}'</li> <li>GAL1097E: Property --name cannot be set alongside --prefix, --suffix, or --infix. Use the --help flag for more information, or refer to the documentation at https://galasa.dev/docs/reference</li> <li>GAL1098E: Property '{}' could not be updated. Reason: '{}'</li> <li>GAL1099E: Property '{}' could not be deleted. Reason: '{}'</li> <li>GAL1100E: Property '{}' could not be created. Reason: '{}'</li> <li>GAL1101E: namespace '{}' is invalid. '--namespace' is a mandatory flag for this command. Use the --help flag for more information, or refer to the documentation at https://galasa.dev/docs/reference</li> <li>GAL1102E: name '{}' is invalid. '--name' is a mandatory flag for this command. Use the --help flag for more information, or refer to the documentation at https://galasa.dev/docs/reference</li> <li>GAL1103E: Could not query CPS results. Reason: '{}'</li> <li>GAL1104E: Unable to delete the bearer token file '{}'.</li> <li>GAL1105E: Invalid group name provided. Group names must only contain characters in the following ranges: 'a'-'z', 'A'-'Z', '0'-'9', '-' (dash), '_' (underscore).</li> <li>GAL1106E: Could not get security bearer token from API server. Reason: '{}'. Ensure you have allocated a personal access token and configured your client program by setting your GALASA_TOKEN as an environment variable or by storing it in your galasactl.properties file</li> <li>GAL1107E: Could not get security bearer token from file '{}'. Reason: '{}'. Ensure you are authenticated by running 'galasactl auth login' and that your personal access token has not expired or been revoked</li> <li>GAL1108E: Invalid bearer token. Ensure you are authenticated by running 'galasactl auth login' and that your personal access token has not expired or been revoked</li> <li>GAL1109E: Unable to access the file. Reason: '{}'</li> <li>GAL1110E: Could not retrieve the content of the file provided. Reason: '{}'</li> <li>GAL1111E: Error parsing the file '{}'. The file is not in the expected yaml format. Reason: '{}'. Invalid yaml:'{}'</li> <li>GAL1112E: Error converting the parsed yaml content into a json payload for the http request. Reason: '{}'</li> <li>GAL1113E: Failure reported by the Galasa Ecosystem. The Ecosystem believes there is a problem with this client program or the user input. Errors returned: '{}'</li> <li>GAL1114E: The resources operation failed due to a problem on the server. Collect a log with the --log option and contact your Galasa Ecosystem adminstrator.</li> <li>GAL1115E: An unexpected response was received from the Galasa Ecosystem. Collect a log with the --log option and contact your Galasa Ecosystem adminstrator.</li> <li>GAL1116E: Error reading the HTTP Response body. Reason: '{}'</li> <li>GAL1117E: The delete operation failed. Unable to process the error information returned from the server.</li> <li>GAL1118E: The resource operation failed. Unable to process the error information returned from the server. Reason: '{}'</li> <li>GAL1119E: The server thinks you are unauthorized to perform this operation.</li> <li>GAL1120E: Program logic error. Collect a log using the '--log' option and send to the Galasa development team.</li> <li>GAL1121E: Unable to retrieve rest api version. Reason is: {}. Try downloading the latest version of galasa or rebuilding a clean version.</li> <li>GAL1122E: Authentication property {} is not available, which is needed to connect to the Galasa Ecosystem. It either needs to be in a file '{}' or set as an environment variable.</li> <li>GAL1123E: Failed to read 3270 terminal JSON because the content is in the wrong format. Reason: {}</li> <li>GAL1124E: Internal Failure. Terminal image could not be encoded into PNG format. Reason: {}</li> <li>GAL1125E: Authentication property {} is invalid. Ensure that it the value is made up of two parts that are separated by a '{}'.</li> <li>GAL1132E: No active run found matching run name '{}'.</li> <li>GAL1133E: Error resetting run '{}'. Reason: '{}'</li> <li>GAL1134E: The runs reset operation failed. Unable to process the error information returned from the server.</li> <li>GAL1135E: Error cancelling run '{}'. Reason: '{}'</li> <li>GAL1136E: The runs cancel operation failed. Unable to process the error information returned from the server.</li> <li>GAL1137E: The gherkin URL supplied is invalid. '{}' does not end with the expected '.feature' extension.</li> <li>GAL1138E: Unsupported gherkin URL {}. Acceptable values start with 'file://'</li> <li>GAL1139E: Unable to compile the regex pattern for Galasa Property field 'namespace'. Reason: '{}'</li> <li>GAL1140E: The namespace, '{}', provided does not match formatting requirements. The namespace must start with a character in the 'a-z' range, followed by characters in the 'a'-'z' or '0'-'9' ranges only.</li> <li>GAL1141E: Unable to compile the regex pattern for Galasa Property field '{}'. Reason: '{}'</li> <li>GAL1142E: The {} field value, '{}', provided does not match formatting requirements. The {} field value must start with a character in the 'a-z' or 'A-Z' range, followed by any characters in the 'a'-'z', 'A'-'Z', '0'-'9', '.' (period), '-' (dash) or '_' (underscore) or '@' (at) ranges only.</li> <li>GAL1143E: Could not query run results. Server returned a non-200 code ({})</li> <li>GAL1144E: Could not use url '{}' to retrieve the contents of the test catalog from stream '{}'. Http error from the Galasa server is '{}'</li> <li> <p>GAL1145E: Failed to create folder for bearer tokens at '{}'</p> </li> <li> <p>GAL1146E: Could not get list of tokens from API server. Reason: '{}'. Ensure you have allocated a personal access token and configured your client program by setting your GALASA_TOKEN as an environment variable or by storing it in your galasactl.properties file</p> </li> <li>GAL1147E: The cache of access tokens contains a java web token (jwt) which is invalid or can't be parsed. File is '{}'. This could indicate a corruption in the file. To resolve, manually delete the file and authenticate against the server again with the 'galasactl auth login' command. If the problem persists, contact your Galasa system administrator. Detailed cause of this problem: '{}'</li> <li> <p>GAL1148E: The cache of access tokens contains a java web token (jwt) in file '{}', from which an expiration time could not be extracted. This could indicate a problem with the authentication configuration on the Galasa server. Contect your Galasa system administrator. Detailed problem : '{}'</p> </li> <li> <p>GAL1149E: Programming logic error: Cannot encrypt because the length of the key is too small.</p> </li> <li>GAL1150E: Programming logic error: Decryption of cached bearer token failed. Reason: {}</li> <li>GAL1151E: Programming logic error: Decryption of cached bearer token failed. Cipher is not long enough. Cipher size: {}, AES block size: {}</li> <li>GAL1152E: Programming logic error: Too much data passed to the encryption process. Please contact your Galasa systems administrator.</li> <li>GAL1153E: Failed to revoke the token with ID '{}'. Reason: '{}'.</li> <li>GAL1154E: The provided token ID, '{}', does not match formatting requirements. The token ID can contain any character in the 'a'-'z', 'A'-'Z', '0'-'9', '-' (dash), or '_' (underscore) ranges only.</li> <li>GAL1155E: The loginId provided by the --login-id field cannot be an empty string.</li> <li>GAL1156E: Could not get list of users from API server. Reason: '{}'. Ensure you have allocated a personal access token and configured your client program by setting your GALASA_TOKEN as an environment variable or by storing it in your galasactl.properties file</li> <li>GAL1157E: An attempt to delete a run named '{}' failed. Cause is {}</li> <li>GAL1158E: An attempt to delete a run named '{}' failed. Sending the delete request to the Galasa service failed. Cause is {}</li> <li>GAL1159E: An attempt to delete a run named '{}' failed. Unexpected http status code {} received from the server.</li> <li>GAL1160E: An attempt to delete a run named '{}' failed. Unexpected http status code {} received from the server. Error details from the server could not be read. Cause: {}</li> <li>GAL1161E: An attempt to delete a run named '{}' failed. Unexpected http status code {} received from the server. Error details from the server are not in a valid json format. Cause: '{}'</li> <li>GAL1162E: An attempt to delete a run named '{}' failed. Unexpected http status code {} received from the server. Error details from the server are: '{}'</li> <li>GAL1163E: The run named '{}' could not be deleted because it was not found by the Galasa service. Try listing runs using 'galasactl runs get' to identify the one you wish to delete</li> <li>GAL1164E: An attempt to delete a run named '{}' failed. Unexpected http status code {} received from the server. Error details from the server are not in the json format.</li> <li>GAL1165E: '{}' is not supported as a valid login ID. Login ID should not contain spaces.</li> <li>GAL1166E: The loginId provided by the --login-id field cannot be an empty string.</li> <li>GAL1167E: An attempt to delete a secret named '{}' failed. Unexpected http status code {} received from the server.</li> <li>GAL1168E: An attempt to delete a secret named '{}' failed. Unexpected http status code {} received from the server. Error details from the server could not be read. Cause: {}</li> <li>GAL1169E: An attempt to delete a secret named '{}' failed. Unexpected http status code {} received from the server. Error details from the server are not in a valid json format. Cause: '{}'</li> <li>GAL1170E: An attempt to delete a secret named '{}' failed. Unexpected http status code {} received from the server. Error details from the server are: '{}'</li> <li>GAL1171E: An attempt to delete a secret named '{}' failed. Unexpected http status code {} received from the server. Error details from the server are not in the json format.</li> <li>GAL1172E: Invalid secret name provided. The name provided with the --name flag cannot be empty and must only contain characters in the following ranges: 'a'-'z', 'A'-'Z', '0'-'9', '-' (dash), '_' (underscore).</li> <li>GAL1173E: An attempt to delete a secret named '{}' failed. Sending the delete request to the Galasa service failed. Cause is {}</li> <li>GAL1174E: An attempt to get a secret named '{}' failed. Unexpected http status code {} received from the server.</li> <li>GAL1175E: An attempt to get a secret named '{}' failed. Unexpected http status code {} received from the server. Error details from the server could not be read. Cause: {}</li> <li>GAL1176E: An attempt to get a secret named '{}' failed. Unexpected http status code {} received from the server. Error details from the server are not in a valid json format. Cause: '{}'</li> <li>GAL1177E: An attempt to get a secret named '{}' failed. Unexpected http status code {} received from the server. Error details from the server are: '{}'</li> <li>GAL1178E: An attempt to get a secret named '{}' failed. Unexpected http status code {} received from the server. Error details from the server are not in the json format.</li> <li>GAL1179E: An attempt to get a secret named '{}' failed. Sending the get request to the Galasa service failed. Cause is {}</li> <li>GAL1180E: Failed to get secrets. Unexpected http status code {} received from the server.</li> <li>GAL1181E: Failed to get secrets. Unexpected http status code {} received from the server. Error details from the server could not be read. Cause: {}</li> <li>GAL1182E: Failed to get secrets. Unexpected http status code {} received from the server. Error details from the server are not in a valid json format. Cause: '{}'</li> <li>GAL1183E: Failed to get secrets. Unexpected http status code {} received from the server. Error details from the server are: '{}'</li> <li>GAL1184E: Failed to get secrets. Unexpected http status code {} received from the server. Error details from the server are not in the json format.</li> <li>GAL1185E: Failed to get secrets. Sending the get request to the Galasa service failed. Cause is {}</li> <li>GAL1186E: Invalid secret type provided. Supported secret types are: {}. Check your provided command parameters and try again.</li> <li>GAL1187E: Failed to set a secret named '{}'. Unexpected http status code {} received from the server.</li> <li>GAL1188E: Failed to set a secret named '{}'. Unexpected http status code {} received from the server. Error details from the server could not be read. Cause: {}</li> <li>GAL1189E: Failed to set a secret named '{}'. Unexpected http status code {} received from the server. Error details from the server are not in a valid json format. Cause: '{}'</li> <li>GAL1190E: Failed to set a secret named '{}'. Unexpected http status code {} received from the server. Error details from the server are: '{}'</li> <li>GAL1191E: Failed to set a secret named '{}'. Unexpected http status code {} received from the server. Error details from the server are not in the json format.</li> <li>GAL1192E: Failed to set a secret named '{}'. Sending the put request to the Galasa service failed. Cause is {}</li> <li>GAL1193E: Invalid flag combination provided. --username cannot be provided with --base64-username, --password cannot be provided with --base64-password, and --token cannot be provided with --base64-token. Use the --help flag for more information, or refer to the documentation at https://galasa.dev/docs/reference</li> <li>GAL1194E: Invalid secret description provided. The description provided with the --description flag cannot be an empty string, and must only contain characters in the Latin-1 character set.</li> <li>GAL1195E: Failed to delete user from database by user number.</li> <li>GAL1196E: The user could not be deleted by login ID because it was not found by the Galasa service. Try listing users using 'galasactl users get' to identify the one you wish to delete</li> <li>GAL1197E: An attempt to delete a user failed. Sending the delete request to the Galasa service failed. Cause is {}</li> <li>GAL1198E: An attempt to delete a user '{}' failed. Unexpected http status code {} received from the server.</li> <li>GAL1199E: An attempt to delete a user '{}' failed. Unexpected http status code {} received from the server. Error details from the server could not be read. Cause: {}</li> <li>GAL1200E: An attempt to delete a user '{}' failed. Unexpected http status code {} received from the server. Error details from the server are not in a valid json format. Cause: '{}'</li> <li>GAL1201E: An attempt to delete a user '{}' failed. Unexpected http status code {} received from the server. Error details from the server are: '{}'</li> <li>GAL1202E: An attempt to delete a user '{}' failed. Unexpected http status code {} received from the server. Error details from the server are not in the json format.</li> <li>GAL1203E: Failed to get roles. Sending the get request to the Galasa service failed. Cause is {}</li> <li>GAL1204E: Failed to get roles. Unexpected http status code {} received from the server.</li> <li>GAL1205E: Failed to get roles. Unexpected http status code {} received from the server. Error details from the server could not be read. Cause: {}</li> <li>GAL1206E: Failed to get roles. Unexpected http status code {} received from the server. Error details from the server are not in a valid json format. Cause: '{}'</li> <li>GAL1207E: Failed to get roles. Unexpected http status code {} received from the server. Error details from the server are: '{}'</li> <li>GAL1208E: Failed to get roles. Unexpected http status code {} received from the server. Error details from the server are not in the json format.</li> <li>GAL1209E: Invalid role name provided. The name provided with the --name flag cannot be empty and must only contain characters in the following ranges: 'a'-'z', 'A'-'Z', '0'-'9', '-' (dash), '_' (underscore).</li> <li>GAL1210E: Role name {} is not known on the Galasa service.</li> <li>GAL1211E: User with login id {} is not known on the Galasa service.</li> <li>GAL1212E: Failed to update user record on the Galasa service.</li> <li>GAL1213E: An attempt to update a user '{}' failed. Unexpected http status code {} received from the server.</li> <li>GAL1214E: An attempt to update a user '{}' failed. Unexpected http status code {} received from the server. Error details from the server could not be read. Cause: {}</li> <li>GAL1215E: An attempt to update a user '{}' failed. Unexpected http status code {} received from the server. Error details from the server are not in a valid json format. Cause: '{}'</li> <li>GAL1216E: An attempt to update a user '{}' failed. Unexpected http status code {} received from the server. Error details from the server are: '{}'</li> <li>GAL1217E: An attempt to update a user '{}' failed. Unexpected http status code {} received from the server. Error details from the server are not in the json format.</li> <li>GAL1218E: Failed to get monitors. Sending the get request to the Galasa service failed. Cause is {}</li> <li>GAL1219E: Failed to get monitors. Unexpected http status code {} received from the server.</li> <li>GAL1220E: Failed to get monitors. Unexpected http status code {} received from the server. Error details from the server could not be read. Cause: {}</li> <li>GAL1221E: Failed to get monitors. Unexpected http status code {} received from the server. Error details from the server are not in a valid json format. Cause: '{}'</li> <li>GAL1222E: Failed to get monitors. Unexpected http status code {} received from the server. Error details from the server are: '{}'</li> <li>GAL1223E: Failed to get monitors. Unexpected http status code {} received from the server. Error details from the server are not in the json format.</li> <li>GAL1224E: Galasa Monitor named {} is not known on the Galasa service.</li> <li>GAL1225E: Invalid monitor name provided. The name provided with the --name flag cannot be empty and must only contain characters in the following ranges: 'a'-'z', 'A'-'Z', '0'-'9', '-' (dash), '_' (underscore).</li> <li>GAL1226E: Invalid '--is-enabled' value provided. Supported values are 'true' and 'false'. Check your command parameters and try again.</li> <li>GAL1227E: Failed to update a monitor named '{}'. Sending the put request to the Galasa service failed. Cause is {}</li> <li>GAL1228E: Failed to update a monitor named '{}'. Unexpected http status code {} received from the server.</li> <li>GAL1229E: Failed to update a monitor named '{}'. Unexpected http status code {} received from the server. Error details from the server could not be read. Cause: {}</li> <li>GAL1230E: Failed to update a monitor named '{}'. Unexpected http status code {} received from the server. Error details from the server are not in a valid json format. Cause: '{}'</li> <li>GAL1231E: Failed to update a monitor named '{}'. Unexpected http status code {} received from the server. Error details from the server are: '{}'</li> <li>GAL1232E: Failed to update a monitor named '{}'. Unexpected http status code {} received from the server. Error details from the server are not in the json format.</li> <li>GAL1233E: The stream name provided by the --name field cannot be an empty string.</li> <li>GAL1234E: Could not get list of test streams from API server. Reason: '{}'.</li> <li>GAL1235E: The name provided with the --name flag cannot be empty and must only contain characters in the following ranges: 'a'-'z', 'A'-'Z', '0'-'9', '-' (dash), '_' (underscore).</li> <li>GAL1236E: Failed to get streams. Unexpected http status code {} received from the server.</li> <li>GAL1237E: Failed to get streams. Unexpected http status code {} received from the server. Error details from the server could not be read. Cause: {}</li> <li>GAL1238E: Failed to get streams. Unexpected http status code {} received from the server. Error details from the server are not in a valid json format. Cause: '{}'</li> <li>GAL1239E: Failed to get streams. Unexpected http status code {} received from the server. Error details from the server are: '{}'</li> <li>GAL1240E: Failed to get streams. Unexpected http status code {} received from the server. Error details from the server are not in the json format.</li> <li>GAL12412E: Failed to delete test stream with the given name from the Galasa service</li> <li>GAL1242E: Failed to delete stream {}. Unexpected http status code {} received from the server.</li> <li>GAL1243E: Failed to delete stream {}. Unexpected http status code {} received from the server. Error details from the server could not be read. Cause: {}</li> <li>GAL1244E: Failed to delete stream {}. Unexpected http status code {} received from the server. Error details from the server are not in a valid json format. Cause: '{}'</li> <li>GAL1245E: Failed to delete stream {}. Unexpected http status code {} received from the server. Error details from the server are: '{}'</li> <li>GAL1246E: Failed to delete stream {}. Unexpected http status code {} received from the server. Error details from the server are not in the json format.</li> <li>GAL1247E: Error cancelling runs with group name '{}'. Reason: '{}'</li> <li>GAL2000W: Warning: Maven configuration file settings.xml should contain a reference to a Galasa repository so that the galasa OBR can be resolved. The official release repository is '{}', and 'pre-release' repository is '{}'</li> <li> <p>GAL2501I: Downloaded {} artifacts to folder '{}'</p> </li> <li> <p>GAL2503I: The request to reset run '{}' has been accepted by the server.</p> </li> <li> <p>GAL2504I: The request to cancel run '{}' has been accepted by the server.</p> </li> <li> <p>GAL2505I: The request to cancel runs with group name '{}' has been accepted by the server.</p> </li> <li> <p>GAL2506I: The request to cancel runs with group name '{}' has been handled successfully. However, no recent active (unfinished) test runs were found which are part of that group. Archived test runs may be part of that group, which can be queried separately from the Result Archive Store.</p> </li>"},{"location":"docs/reference/cli-syntax/galasactl/","title":"Galasactl","text":""},{"location":"docs/reference/cli-syntax/galasactl/#galasactl","title":"galasactl","text":"<p>CLI for Galasa</p>"},{"location":"docs/reference/cli-syntax/galasactl/#synopsis","title":"Synopsis","text":"<p>A tool for controlling Galasa resources using the command-line.</p>"},{"location":"docs/reference/cli-syntax/galasactl/#options","title":"Options","text":"<pre><code>      --galasahome string   Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -h, --help                Displays the options for the 'galasactl' command.\n  -l, --log string          File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl auth    - Manages authentication with a Galasa ecosystem</li> <li>galasactl local  - Manipulate local system</li> <li>galasactl monitors    - Manage monitors in the Galasa service</li> <li>galasactl project  - Manipulate local project source code</li> <li>galasactl properties    - Manages properties in an ecosystem</li> <li>galasactl resources  - Manages resources in an ecosystem</li> <li>galasactl roles  - Manage roles stored in the Galasa service</li> <li>galasactl runs    - Manage test runs in the ecosystem</li> <li>galasactl secrets  - Manage secrets stored in the Galasa service's credentials store</li> <li>galasactl streams  - Manages test streams in a Galasa service</li> <li>galasactl users  - Manages users in an ecosystem</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_auth/","title":"Galasactl auth","text":""},{"location":"docs/reference/cli-syntax/galasactl_auth/#galasactl-auth","title":"galasactl auth","text":"<p>Manages authentication with a Galasa ecosystem</p>"},{"location":"docs/reference/cli-syntax/galasactl_auth/#synopsis","title":"Synopsis","text":"<p>Manages authentication with a Galasa ecosystem using access tokens, enabling secure interactions with the ecosystem.</p>"},{"location":"docs/reference/cli-syntax/galasactl_auth/#options","title":"Options","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n  -h, --help                                  Displays the options for the 'auth' command.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_auth/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --galasahome string   Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string          File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_auth/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl  - CLI for Galasa</li> <li>galasactl auth login    - Log in to a Galasa ecosystem using an existing access token</li> <li>galasactl auth logout  - Log out from a Galasa ecosystem</li> <li>galasactl auth tokens  - Queries tokens in an ecosystem</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_auth/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_auth_login/","title":"Galasactl auth login","text":""},{"location":"docs/reference/cli-syntax/galasactl_auth_login/#galasactl-auth-login","title":"galasactl auth login","text":"<p>Log in to a Galasa ecosystem using an existing access token</p>"},{"location":"docs/reference/cli-syntax/galasactl_auth_login/#synopsis","title":"Synopsis","text":"<p>Log in to a Galasa ecosystem using an existing access token stored in the 'galasactl.properties' file in your GALASA_HOME directory. If you do not have an access token, request one through your ecosystem's web user interface and follow the instructions on the web user interface to populate the 'galasactl.properties' file.</p> <pre><code>galasactl auth login [flags]\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_auth_login/#options","title":"Options","text":"<pre><code>  -h, --help   Displays the options for the 'auth login' command.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_auth_login/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n      --galasahome string                     Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string                            File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_auth_login/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl auth    - Manages authentication with a Galasa ecosystem</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_auth_login/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_auth_logout/","title":"Galasactl auth logout","text":""},{"location":"docs/reference/cli-syntax/galasactl_auth_logout/#galasactl-auth-logout","title":"galasactl auth logout","text":"<p>Log out from a Galasa ecosystem</p>"},{"location":"docs/reference/cli-syntax/galasactl_auth_logout/#synopsis","title":"Synopsis","text":"<p>Log out from a Galasa ecosystem that you have previously logged in to</p> <pre><code>galasactl auth logout [flags]\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_auth_logout/#options","title":"Options","text":"<pre><code>  -h, --help   Displays the options for the 'auth logout' command.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_auth_logout/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n      --galasahome string                     Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string                            File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_auth_logout/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl auth    - Manages authentication with a Galasa ecosystem</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_auth_logout/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_auth_tokens/","title":"Galasactl auth tokens","text":""},{"location":"docs/reference/cli-syntax/galasactl_auth_tokens/#galasactl-auth-tokens","title":"galasactl auth tokens","text":"<p>Queries tokens in an ecosystem</p>"},{"location":"docs/reference/cli-syntax/galasactl_auth_tokens/#synopsis","title":"Synopsis","text":"<p>Allows interaction with a Galasa Ecosystem's auth store to query tokens and retrieve their details</p>"},{"location":"docs/reference/cli-syntax/galasactl_auth_tokens/#options","title":"Options","text":"<pre><code>  -h, --help   Displays the options for the 'auth tokens' command.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_auth_tokens/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n      --galasahome string                     Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string                            File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_auth_tokens/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl auth    - Manages authentication with a Galasa ecosystem</li> <li>galasactl auth tokens delete    - Revokes a personal access token</li> <li>galasactl auth tokens get  - Get a list of authentication tokens</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_auth_tokens/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_auth_tokens_delete/","title":"Galasactl auth tokens delete","text":""},{"location":"docs/reference/cli-syntax/galasactl_auth_tokens_delete/#galasactl-auth-tokens-delete","title":"galasactl auth tokens delete","text":"<p>Revokes a personal access token</p>"},{"location":"docs/reference/cli-syntax/galasactl_auth_tokens_delete/#synopsis","title":"Synopsis","text":"<p>Revokes a token used for authentication with the Galasa API server through the provided token id</p> <pre><code>galasactl auth tokens delete [flags]\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_auth_tokens_delete/#options","title":"Options","text":"<pre><code>  -h, --help             Displays the options for the 'auth tokens delete' command.\n      --tokenid string   The ID of the token to be revoked.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_auth_tokens_delete/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n      --galasahome string                     Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string                            File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_auth_tokens_delete/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl auth tokens  - Queries tokens in an ecosystem</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_auth_tokens_delete/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_auth_tokens_get/","title":"Galasactl auth tokens get","text":""},{"location":"docs/reference/cli-syntax/galasactl_auth_tokens_get/#galasactl-auth-tokens-get","title":"galasactl auth tokens get","text":"<p>Get a list of authentication tokens</p>"},{"location":"docs/reference/cli-syntax/galasactl_auth_tokens_get/#synopsis","title":"Synopsis","text":"<p>Get a list of tokens used for authentication with the Galasa API server</p> <pre><code>galasactl auth tokens get [flags]\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_auth_tokens_get/#options","title":"Options","text":"<pre><code>  -h, --help          Displays the options for the 'auth tokens get' command.\n      --user string   Optional. Retrieves a list of access tokens for the user with the given username.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_auth_tokens_get/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n      --galasahome string                     Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string                            File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_auth_tokens_get/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl auth tokens  - Queries tokens in an ecosystem</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_auth_tokens_get/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_local/","title":"Galasactl local","text":""},{"location":"docs/reference/cli-syntax/galasactl_local/#galasactl-local","title":"galasactl local","text":"<p>Manipulate local system</p>"},{"location":"docs/reference/cli-syntax/galasactl_local/#synopsis","title":"Synopsis","text":"<p>Manipulate local system</p>"},{"location":"docs/reference/cli-syntax/galasactl_local/#options","title":"Options","text":"<pre><code>  -h, --help   Displays the options for the 'local' command.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_local/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --galasahome string   Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string          File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_local/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl  - CLI for Galasa</li> <li>galasactl local init    - Initialises Galasa home folder</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_local/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_local_init/","title":"Galasactl local init","text":""},{"location":"docs/reference/cli-syntax/galasactl_local_init/#galasactl-local-init","title":"galasactl local init","text":"<p>Initialises Galasa home folder</p>"},{"location":"docs/reference/cli-syntax/galasactl_local_init/#synopsis","title":"Synopsis","text":"<p>Initialises Galasa home folder in home directory with all the properties files</p> <pre><code>galasactl local init [flags]\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_local_init/#options","title":"Options","text":"<pre><code>      --development   Use bleeding-edge galasa versions and repositories.\n  -h, --help          Displays the options for the 'local init' command.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_local_init/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --galasahome string   Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string          File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_local_init/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl local  - Manipulate local system</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_local_init/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_monitors/","title":"Galasactl monitors","text":""},{"location":"docs/reference/cli-syntax/galasactl_monitors/#galasactl-monitors","title":"galasactl monitors","text":"<p>Manage monitors in the Galasa service</p>"},{"location":"docs/reference/cli-syntax/galasactl_monitors/#synopsis","title":"Synopsis","text":"<p>The parent command for operations to manipulate monitors in the Galasa service</p>"},{"location":"docs/reference/cli-syntax/galasactl_monitors/#options","title":"Options","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n  -h, --help                                  Displays the options for the 'monitors' command.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_monitors/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --galasahome string   Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string          File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_monitors/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl  - CLI for Galasa</li> <li>galasactl monitors get    - Get monitors from the Galasa service</li> <li>galasactl monitors set    - Update a monitor in the Galasa service</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_monitors/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_monitors_get/","title":"Galasactl monitors get","text":""},{"location":"docs/reference/cli-syntax/galasactl_monitors_get/#galasactl-monitors-get","title":"galasactl monitors get","text":"<p>Get monitors from the Galasa service</p>"},{"location":"docs/reference/cli-syntax/galasactl_monitors_get/#synopsis","title":"Synopsis","text":"<p>Get a list of monitors or a specific monitor from the Galasa service</p> <pre><code>galasactl monitors get [flags]\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_monitors_get/#options","title":"Options","text":"<pre><code>      --format string   the output format of the returned monitors. Supported formats are: 'summary', 'yaml'. (default \"summary\")\n  -h, --help            Displays the options for the 'monitors get' command.\n      --name string     An optional flag that identifies the monitor to be retrieved by name.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_monitors_get/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n      --galasahome string                     Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string                            File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_monitors_get/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl monitors    - Manage monitors in the Galasa service</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_monitors_get/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_monitors_set/","title":"Galasactl monitors set","text":""},{"location":"docs/reference/cli-syntax/galasactl_monitors_set/#galasactl-monitors-set","title":"galasactl monitors set","text":"<p>Update a monitor in the Galasa service</p>"},{"location":"docs/reference/cli-syntax/galasactl_monitors_set/#synopsis","title":"Synopsis","text":"<p>Updates a monitor with the given name in the Galasa service</p> <pre><code>galasactl monitors set [flags]\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_monitors_set/#options","title":"Options","text":"<pre><code>  -h, --help                Displays the options for the 'monitors set' command.\n      --is-enabled string   A boolean flag that determines whether the given monitor should be enabled or disabled. Supported values are 'true' and 'false'.\n      --name string         A mandatory flag that identifies the monitor to be manipulated by name.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_monitors_set/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n      --galasahome string                     Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string                            File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_monitors_set/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl monitors    - Manage monitors in the Galasa service</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_monitors_set/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_project/","title":"Galasactl project","text":""},{"location":"docs/reference/cli-syntax/galasactl_project/#galasactl-project","title":"galasactl project","text":"<p>Manipulate local project source code</p>"},{"location":"docs/reference/cli-syntax/galasactl_project/#synopsis","title":"Synopsis","text":"<p>Creates and manipulates Galasa test project source code</p>"},{"location":"docs/reference/cli-syntax/galasactl_project/#options","title":"Options","text":"<pre><code>  -h, --help   Displays the options for the 'project' command.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_project/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --galasahome string   Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string          File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_project/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl  - CLI for Galasa</li> <li>galasactl project create    - Creates a new Galasa project</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_project/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_project_create/","title":"Galasactl project create","text":""},{"location":"docs/reference/cli-syntax/galasactl_project_create/#galasactl-project-create","title":"galasactl project create","text":"<p>Creates a new Galasa project</p>"},{"location":"docs/reference/cli-syntax/galasactl_project_create/#synopsis","title":"Synopsis","text":"<p>Creates a new Galasa test project with optional OBR project and build process files</p> <pre><code>galasactl project create [flags]\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_project_create/#options","title":"Options","text":"<pre><code>      --development       Use bleeding-edge galasa versions and repositories.\n      --features string   A comma-separated list of features you are testing. These must be able to form parts of a java package name. For example: \"payee,account\" (default \"feature1\")\n      --force             Force-overwrite files which already exist.\n      --gradle            Generate gradle build artifacts. Can be used in addition to the --maven flag.\n  -h, --help              Displays the options for the 'project create' command.\n      --maven             Generate maven build artifacts. Can be used in addition to the --gradle flag. If this flag is not used, and the gradle option is not used, then behaviour of this flag defaults to true.\n      --obr               An OSGi Object Bundle Resource (OBR) project is needed.\n      --package string    Java package name for tests we create. Forms part of the project name, maven/gradle group/artifact ID, and OSGi bundle name. It may reflect the name of your organisation or company, the department, function or application under test. For example: dev.galasa.banking.example\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_project_create/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --galasahome string   Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string          File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_project_create/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl project  - Manipulate local project source code</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_project_create/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_properties/","title":"Galasactl properties","text":""},{"location":"docs/reference/cli-syntax/galasactl_properties/#galasactl-properties","title":"galasactl properties","text":"<p>Manages properties in an ecosystem</p>"},{"location":"docs/reference/cli-syntax/galasactl_properties/#synopsis","title":"Synopsis","text":"<p>Allows interaction with the CPS to create, query and maintain properties in Galasa Ecosystem</p>"},{"location":"docs/reference/cli-syntax/galasactl_properties/#options","title":"Options","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n  -h, --help                                  Displays the options for the 'properties' command.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_properties/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --galasahome string   Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string          File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_properties/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl  - CLI for Galasa</li> <li>galasactl properties delete  - Delete a property in a namespace.</li> <li>galasactl properties get    - Get the details of properties in a namespace.</li> <li>galasactl properties namespaces  - Queries namespaces in an ecosystem</li> <li>galasactl properties set    - Set the details of properties in a namespace.</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_properties/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_properties_delete/","title":"Galasactl properties delete","text":""},{"location":"docs/reference/cli-syntax/galasactl_properties_delete/#galasactl-properties-delete","title":"galasactl properties delete","text":"<p>Delete a property in a namespace.</p>"},{"location":"docs/reference/cli-syntax/galasactl_properties_delete/#synopsis","title":"Synopsis","text":"<p>Delete a property and its value in a namespace</p> <pre><code>galasactl properties delete [flags]\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_properties_delete/#options","title":"Options","text":"<pre><code>  -h, --help               Displays the options for the 'properties delete' command.\n  -n, --name string        A mandatory field indicating the name of a property in the namespace.The first character of the name must be in the 'a'-'z' or 'A'-'Z' ranges, and following characters can be 'a'-'z', 'A'-'Z', '0'-'9', '.' (period), '-' (dash) or '_' (underscore)\n  -s, --namespace string   A mandatory flag that describes the container for a collection of properties.The first character of the namespace must be in the 'a'-'z' range, and following characters can be 'a'-'z' or '0'-'9'\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_properties_delete/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n      --galasahome string                     Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string                            File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_properties_delete/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl properties    - Manages properties in an ecosystem</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_properties_delete/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_properties_get/","title":"Galasactl properties get","text":""},{"location":"docs/reference/cli-syntax/galasactl_properties_get/#galasactl-properties-get","title":"galasactl properties get","text":"<p>Get the details of properties in a namespace.</p>"},{"location":"docs/reference/cli-syntax/galasactl_properties_get/#synopsis","title":"Synopsis","text":"<p>Get the details of all properties in a namespace, filtered with flags if present</p> <pre><code>galasactl properties get [flags]\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_properties_get/#options","title":"Options","text":"<pre><code>      --format string      output format for the data returned. Supported formats are: 'raw', 'summary', 'yaml'. (default \"summary\")\n  -h, --help               Displays the options for the 'properties get' command.\n      --infix string       Infix(es) that could be part of the property name within the namespace. Multiple infixes can be supplied as a comma-separated list without spaces.  Optional. Cannot be used in conjunction with the '--name' option. The first character of each infix must be in the 'a'-'z' or 'A'-'Z' ranges, and following characters can be 'a'-'z', 'A'-'Z', '0'-'9', '.' (period), '-' (dash) or '_' (underscore)\n  -n, --name string        An optional field indicating the name of a property in the namespace.The first character of the name must be in the 'a'-'z' or 'A'-'Z' ranges, and following characters can be 'a'-'z', 'A'-'Z', '0'-'9', '.' (period), '-' (dash) or '_' (underscore)\n  -s, --namespace string   A mandatory flag that describes the container for a collection of properties.The first character of the namespace must be in the 'a'-'z' range, and following characters can be 'a'-'z' or '0'-'9'\n      --prefix string      Prefix to match against the start of the property name within the namespace. Optional. Cannot be used in conjunction with the '--name' option. The first character of the prefix must be in the 'a'-'z' or 'A'-'Z' ranges, and following characters can be 'a'-'z', 'A'-'Z', '0'-'9', '.' (period), '-' (dash) or '_' (underscore)\n      --suffix string      Suffix to match against the end of the property name within the namespace. Optional. Cannot be used in conjunction with the '--name' option. The first character of the suffix must be in the 'a'-'z' or 'A'-'Z' ranges, and following characters can be 'a'-'z', 'A'-'Z', '0'-'9', '.' (period), '-' (dash) or '_' (underscore)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_properties_get/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n      --galasahome string                     Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string                            File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_properties_get/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl properties    - Manages properties in an ecosystem</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_properties_get/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_properties_namespaces/","title":"Galasactl properties namespaces","text":""},{"location":"docs/reference/cli-syntax/galasactl_properties_namespaces/#galasactl-properties-namespaces","title":"galasactl properties namespaces","text":"<p>Queries namespaces in an ecosystem</p>"},{"location":"docs/reference/cli-syntax/galasactl_properties_namespaces/#synopsis","title":"Synopsis","text":"<p>Allows interaction with the CPS to query namespaces in Galasa Ecosystem</p>"},{"location":"docs/reference/cli-syntax/galasactl_properties_namespaces/#options","title":"Options","text":"<pre><code>  -h, --help   Displays the options for the 'properties namespaces' command.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_properties_namespaces/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n      --galasahome string                     Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string                            File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_properties_namespaces/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl properties    - Manages properties in an ecosystem</li> <li>galasactl properties namespaces get  - Get a list of namespaces.</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_properties_namespaces/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_properties_namespaces_get/","title":"Galasactl properties namespaces get","text":""},{"location":"docs/reference/cli-syntax/galasactl_properties_namespaces_get/#galasactl-properties-namespaces-get","title":"galasactl properties namespaces get","text":"<p>Get a list of namespaces.</p>"},{"location":"docs/reference/cli-syntax/galasactl_properties_namespaces_get/#synopsis","title":"Synopsis","text":"<p>Get a list of namespaces within the CPS</p> <pre><code>galasactl properties namespaces get [flags]\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_properties_namespaces_get/#options","title":"Options","text":"<pre><code>      --format string   output format for the data returned. Supported formats are: 'raw', 'summary'. (default \"summary\")\n  -h, --help            Displays the options for the 'properties namespaces get' command.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_properties_namespaces_get/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n      --galasahome string                     Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string                            File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_properties_namespaces_get/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl properties namespaces  - Queries namespaces in an ecosystem</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_properties_namespaces_get/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_properties_set/","title":"Galasactl properties set","text":""},{"location":"docs/reference/cli-syntax/galasactl_properties_set/#galasactl-properties-set","title":"galasactl properties set","text":"<p>Set the details of properties in a namespace.</p>"},{"location":"docs/reference/cli-syntax/galasactl_properties_set/#synopsis","title":"Synopsis","text":"<p>Set the details of a property in a namespace. If the property does not exist, a new property is created, otherwise the value for that property will be updated.</p> <pre><code>galasactl properties set [flags]\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_properties_set/#options","title":"Options","text":"<pre><code>  -h, --help               Displays the options for the 'properties set' command.\n  -n, --name string        A mandatory field indicating the name of a property in the namespace.The first character of the name must be in the 'a'-'z' or 'A'-'Z' ranges, and following characters can be 'a'-'z', 'A'-'Z', '0'-'9', '.' (period), '-' (dash) or '_' (underscore)\n  -s, --namespace string   A mandatory flag that describes the container for a collection of properties.The first character of the namespace must be in the 'a'-'z' range, and following characters can be 'a'-'z' or '0'-'9'\n  -v, --value string       A mandatory flag indicating the value of the property you want to create. Empty values and values with spaces must be put in quotation marks.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_properties_set/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n      --galasahome string                     Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string                            File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_properties_set/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl properties    - Manages properties in an ecosystem</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_properties_set/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_resources/","title":"Galasactl resources","text":""},{"location":"docs/reference/cli-syntax/galasactl_resources/#galasactl-resources","title":"galasactl resources","text":"<p>Manages resources in an ecosystem</p>"},{"location":"docs/reference/cli-syntax/galasactl_resources/#synopsis","title":"Synopsis","text":"<p>Allows interaction with the Resources endpoint to create and maintain resources in the Galasa Ecosystem</p>"},{"location":"docs/reference/cli-syntax/galasactl_resources/#options","title":"Options","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n  -f, --file string                           The file containing yaml definitions of resources to be applied manipulated by this command. This can be a fully-qualified path or path relative to the current directory.Example: my_resources.yaml\n  -h, --help                                  Displays the options for the 'resources' command.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_resources/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --galasahome string   Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string          File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_resources/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl  - CLI for Galasa</li> <li>galasactl resources apply  - Apply file contents to the ecosystem.</li> <li>galasactl resources create    - Update Galasa Ecosystem resources.</li> <li>galasactl resources delete    - Delete Galasa Ecosystem resources.</li> <li>galasactl resources update    - Update Galasa Ecosystem resources.</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_resources/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_resources_apply/","title":"Galasactl resources apply","text":""},{"location":"docs/reference/cli-syntax/galasactl_resources_apply/#galasactl-resources-apply","title":"galasactl resources apply","text":"<p>Apply file contents to the ecosystem.</p>"},{"location":"docs/reference/cli-syntax/galasactl_resources_apply/#synopsis","title":"Synopsis","text":"<p>Create or Update resources from a given file in the Galasa Ecosystem</p> <pre><code>galasactl resources apply [flags]\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_resources_apply/#options","title":"Options","text":"<pre><code>  -h, --help   Displays the options for the 'resources apply' command.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_resources_apply/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n  -f, --file string                           The file containing yaml definitions of resources to be applied manipulated by this command. This can be a fully-qualified path or path relative to the current directory.Example: my_resources.yaml\n      --galasahome string                     Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string                            File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_resources_apply/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl resources  - Manages resources in an ecosystem</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_resources_apply/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_resources_create/","title":"Galasactl resources create","text":""},{"location":"docs/reference/cli-syntax/galasactl_resources_create/#galasactl-resources-create","title":"galasactl resources create","text":"<p>Update Galasa Ecosystem resources.</p>"},{"location":"docs/reference/cli-syntax/galasactl_resources_create/#synopsis","title":"Synopsis","text":"<p>Create Galasa Ecosystem resources from definitions held in a file.</p> <pre><code>galasactl resources create [flags]\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_resources_create/#options","title":"Options","text":"<pre><code>  -h, --help   Displays the options for the 'resources create' command.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_resources_create/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n  -f, --file string                           The file containing yaml definitions of resources to be applied manipulated by this command. This can be a fully-qualified path or path relative to the current directory.Example: my_resources.yaml\n      --galasahome string                     Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string                            File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_resources_create/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl resources  - Manages resources in an ecosystem</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_resources_create/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_resources_delete/","title":"Galasactl resources delete","text":""},{"location":"docs/reference/cli-syntax/galasactl_resources_delete/#galasactl-resources-delete","title":"galasactl resources delete","text":"<p>Delete Galasa Ecosystem resources.</p>"},{"location":"docs/reference/cli-syntax/galasactl_resources_delete/#synopsis","title":"Synopsis","text":"<p>Delete Galasa Ecosystem resources in a file.</p> <pre><code>galasactl resources delete [flags]\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_resources_delete/#options","title":"Options","text":"<pre><code>  -h, --help   Displays the options for the 'resources delete' command.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_resources_delete/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n  -f, --file string                           The file containing yaml definitions of resources to be applied manipulated by this command. This can be a fully-qualified path or path relative to the current directory.Example: my_resources.yaml\n      --galasahome string                     Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string                            File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_resources_delete/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl resources  - Manages resources in an ecosystem</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_resources_delete/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_resources_update/","title":"Galasactl resources update","text":""},{"location":"docs/reference/cli-syntax/galasactl_resources_update/#galasactl-resources-update","title":"galasactl resources update","text":"<p>Update Galasa Ecosystem resources.</p>"},{"location":"docs/reference/cli-syntax/galasactl_resources_update/#synopsis","title":"Synopsis","text":"<p>Update Galasa Ecosystem resources from definitions held in a file.</p> <pre><code>galasactl resources update [flags]\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_resources_update/#options","title":"Options","text":"<pre><code>  -h, --help   Displays the options for the 'resources update' command.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_resources_update/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n  -f, --file string                           The file containing yaml definitions of resources to be applied manipulated by this command. This can be a fully-qualified path or path relative to the current directory.Example: my_resources.yaml\n      --galasahome string                     Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string                            File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_resources_update/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl resources  - Manages resources in an ecosystem</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_resources_update/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_roles/","title":"Galasactl roles","text":""},{"location":"docs/reference/cli-syntax/galasactl_roles/#galasactl-roles","title":"galasactl roles","text":"<p>Manage roles stored in the Galasa service</p>"},{"location":"docs/reference/cli-syntax/galasactl_roles/#synopsis","title":"Synopsis","text":"<p>The parent command for operations to manipulate Roles in the Galasa service</p>"},{"location":"docs/reference/cli-syntax/galasactl_roles/#options","title":"Options","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n  -h, --help                                  Displays the options for the 'roles' command.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_roles/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --galasahome string   Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string          File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_roles/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl  - CLI for Galasa</li> <li>galasactl roles get  - Get Roles used in a Galasa service</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_roles/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_roles_get/","title":"Galasactl roles get","text":""},{"location":"docs/reference/cli-syntax/galasactl_roles_get/#galasactl-roles-get","title":"galasactl roles get","text":"<p>Get Roles used in a Galasa service</p>"},{"location":"docs/reference/cli-syntax/galasactl_roles_get/#synopsis","title":"Synopsis","text":"<p>Get a list of Roles from a Galasa service</p> <pre><code>galasactl roles get [flags]\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_roles_get/#options","title":"Options","text":"<pre><code>      --format string   the output format of the returned Roles. Supported formats are: 'summary', 'yaml'. (default \"summary\")\n  -h, --help            Displays the options for the 'roles get' command.\n      --name string     An optional flag that identifies the role to be retrieved by name.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_roles_get/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n      --galasahome string                     Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string                            File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_roles_get/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl roles  - Manage roles stored in the Galasa service</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_roles_get/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_runs/","title":"Galasactl runs","text":""},{"location":"docs/reference/cli-syntax/galasactl_runs/#galasactl-runs","title":"galasactl runs","text":"<p>Manage test runs in the ecosystem</p>"},{"location":"docs/reference/cli-syntax/galasactl_runs/#synopsis","title":"Synopsis","text":"<p>Assembles, submits and monitors test runs in Galasa Ecosystem</p>"},{"location":"docs/reference/cli-syntax/galasactl_runs/#options","title":"Options","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n  -h, --help                                  Displays the options for the 'runs' command.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_runs/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --galasahome string   Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string          File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_runs/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl  - CLI for Galasa</li> <li>galasactl runs cancel  - cancel an active run in the ecosystem</li> <li>galasactl runs delete  - Delete a named test run.</li> <li>galasactl runs download  - Download the artifacts of a test run which ran.</li> <li>galasactl runs get    - Get the details of a test runname which ran or is running.</li> <li>galasactl runs prepare    - prepares a list of tests</li> <li>galasactl runs reset    - reset an active run in the ecosystem</li> <li>galasactl runs submit  - submit a list of tests to the ecosystem</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_runs/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_runs_cancel/","title":"Galasactl runs cancel","text":""},{"location":"docs/reference/cli-syntax/galasactl_runs_cancel/#galasactl-runs-cancel","title":"galasactl runs cancel","text":"<p>cancel an active run in the ecosystem</p>"},{"location":"docs/reference/cli-syntax/galasactl_runs_cancel/#synopsis","title":"Synopsis","text":"<p>Cancel an active test run in the ecosystem if it is stuck or looping.</p> <pre><code>galasactl runs cancel [flags]\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_runs_cancel/#options","title":"Options","text":"<pre><code>      --group string   A flag indicating the name of the test group to cancel. Cannot be used with --name\n  -h, --help           Displays the options for the 'runs cancel' command.\n      --name string    A flag indicating the name of the test run to cancel. Cannot be used with --group\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_runs_cancel/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n      --galasahome string                     Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string                            File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_runs_cancel/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl runs    - Manage test runs in the ecosystem</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_runs_cancel/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_runs_delete/","title":"Galasactl runs delete","text":""},{"location":"docs/reference/cli-syntax/galasactl_runs_delete/#galasactl-runs-delete","title":"galasactl runs delete","text":"<p>Delete a named test run.</p>"},{"location":"docs/reference/cli-syntax/galasactl_runs_delete/#synopsis","title":"Synopsis","text":"<p>Delete a named test run.</p> <pre><code>galasactl runs delete [flags]\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_runs_delete/#options","title":"Options","text":"<pre><code>  -h, --help          Displays the options for the 'runs delete' command.\n      --name string   the name of the test run we want to delete.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_runs_delete/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n      --galasahome string                     Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string                            File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_runs_delete/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl runs    - Manage test runs in the ecosystem</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_runs_delete/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_runs_download/","title":"Galasactl runs download","text":""},{"location":"docs/reference/cli-syntax/galasactl_runs_download/#galasactl-runs-download","title":"galasactl runs download","text":"<p>Download the artifacts of a test run which ran.</p>"},{"location":"docs/reference/cli-syntax/galasactl_runs_download/#synopsis","title":"Synopsis","text":"<p>Download the artifacts of a test run which ran and store them in a directory within the current working directory</p> <pre><code>galasactl runs download [flags]\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_runs_download/#options","title":"Options","text":"<pre><code>      --destination string   The folder we want to download test run artifacts into. Sub-folders will be created within this location (default \".\")\n      --force                force artifacts to be overwritten if they already exist\n  -h, --help                 Displays the options for the 'runs download' command.\n      --name string          the name of the test run we want information about\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_runs_download/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n      --galasahome string                     Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string                            File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_runs_download/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl runs    - Manage test runs in the ecosystem</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_runs_download/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_runs_get/","title":"Galasactl runs get","text":""},{"location":"docs/reference/cli-syntax/galasactl_runs_get/#galasactl-runs-get","title":"galasactl runs get","text":"<p>Get the details of a test runname which ran or is running.</p>"},{"location":"docs/reference/cli-syntax/galasactl_runs_get/#synopsis","title":"Synopsis","text":"<p>Get the details of a test runname which ran or is running, displaying the results to the caller.</p> <pre><code>galasactl runs get [flags]\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_runs_get/#options","title":"Options","text":"<pre><code>      --active             parameter to retrieve runs that have not finished yet. Cannot be used in conjunction with --name or --result flag.\n      --age string         the age of the test run(s) we want information about. Supported formats are: 'FROM' or 'FROM:TO', where FROM and TO are each ages, made up of an integer and a time-unit qualifier. Supported time-units are 'w' (weeks), 'd' (days), 'h' (hours), 'm' (minutes). If missing, the TO part is defaulted to '0h'. Examples: '--age 1d', '--age 6h:1h' (list test runs which happened from 6 hours ago to 1 hour ago). The TO part must be a smaller time-span than the FROM part.\n      --format string      output format for the data returned. Supported formats are: 'details', 'raw', 'summary'. (default \"summary\")\n      --group string       the name of the group to return tests under that group. Cannot be used in conjunction with --name\n  -h, --help               Displays the options for the 'runs get' command.\n      --name string        the name of the test run we want information about. Cannot be used in conjunction with --requestor, --result or --active flags\n      --requestor string   the requestor of the test run we want information about. Cannot be used in conjunction with --name flag.\n      --result string      A filter on the test runs we want information about. Optional. Default is to display test runs with any result. Case insensitive. Value can be a single value or a comma-separated list. For example \"--result Failed,Ignored,EnvFail\". Cannot be used in conjunction with --name or --active flag.\n      --tags strings       the tags associated with test runs to be retrieved. Tags can be supplied in a comma-separated list (e.g. --tags tag1,tag2,tag3) or as separate '--tags' flags (e.g. --tags tag1 --tags tag2).\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_runs_get/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n      --galasahome string                     Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string                            File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_runs_get/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl runs    - Manage test runs in the ecosystem</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_runs_get/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_runs_prepare/","title":"Galasactl runs prepare","text":""},{"location":"docs/reference/cli-syntax/galasactl_runs_prepare/#galasactl-runs-prepare","title":"galasactl runs prepare","text":"<p>prepares a list of tests</p>"},{"location":"docs/reference/cli-syntax/galasactl_runs_prepare/#synopsis","title":"Synopsis","text":"<p>Prepares a list of tests from a test catalog providing specific overrides if required</p> <pre><code>galasactl runs prepare [flags]\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_runs_prepare/#options","title":"Options","text":"<pre><code>      --append             Append tests to existing portfolio\n      --bundle strings     bundles of which tests will be selected from, bundles are selected if the name contains this string, or if --regex is specified then matches the regex\n      --class strings      test class names to run from the specified stream or portfolio. The format of each entry is {osgi-bundle-name}/{java-class-name}.  Multiple values can be supplied using a comma-separated list of values, or by using multiple instances of the --class flag. Java class names are fully qualified. No .class suffix is needed.\n      --gherkin strings    Gherkin feature file URL. Should start with 'file://'. \n  -h, --help               Displays the options for the 'runs prepare' command.\n      --override strings   overrides to be sent with the tests (overrides in the portfolio will take precedence)\n      --package strings    packages of which tests will be selected from, packages are selected if the name contains this string, or if --regex is specified then matches the regex\n  -p, --portfolio string   portfolio to add tests to\n      --regex              Test selection is performed by using regex\n  -s, --stream string      test stream to extract the tests from\n      --tag strings        tags of which tests will be selected from, tags are selected if the name contains this string, or if --regex is specified then matches the regex\n      --test strings       test names which will be selected if the name contains this string, or if --regex is specified then matches the regex\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_runs_prepare/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n      --galasahome string                     Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string                            File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_runs_prepare/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl runs    - Manage test runs in the ecosystem</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_runs_prepare/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_runs_reset/","title":"Galasactl runs reset","text":""},{"location":"docs/reference/cli-syntax/galasactl_runs_reset/#galasactl-runs-reset","title":"galasactl runs reset","text":"<p>reset an active run in the ecosystem</p>"},{"location":"docs/reference/cli-syntax/galasactl_runs_reset/#synopsis","title":"Synopsis","text":"<p>Reset an active test run in the ecosystem if it is stuck or looping.</p> <pre><code>galasactl runs reset [flags]\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_runs_reset/#options","title":"Options","text":"<pre><code>  -h, --help          Displays the options for the 'runs reset' command.\n      --name string   the name of the test run to reset\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_runs_reset/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n      --galasahome string                     Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string                            File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_runs_reset/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl runs    - Manage test runs in the ecosystem</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_runs_reset/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_runs_submit/","title":"Galasactl runs submit","text":""},{"location":"docs/reference/cli-syntax/galasactl_runs_submit/#galasactl-runs-submit","title":"galasactl runs submit","text":"<p>submit a list of tests to the ecosystem</p>"},{"location":"docs/reference/cli-syntax/galasactl_runs_submit/#synopsis","title":"Synopsis","text":"<p>Submit a list of tests to the ecosystem, monitor them and wait for them to complete</p> <pre><code>galasactl runs submit [flags]\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_runs_submit/#options","title":"Options","text":"<pre><code>      --bundle strings             bundles of which tests will be selected from, bundles are selected if the name contains this string, or if --regex is specified then matches the regex\n      --class strings              test class names to run from the specified stream or portfolio. The format of each entry is {osgi-bundle-name}/{java-class-name}.  Multiple values can be supplied using a comma-separated list of values, or by using multiple instances of the --class flag. Java class names are fully qualified. No .class suffix is needed.\n      --gherkin strings            Gherkin feature file URL. Should start with 'file://'. \n  -g, --group string               the group name to assign the test runs to, if not provided, a psuedo unique id will be generated\n  -h, --help                       Displays the options for the 'runs submit' command.\n      --noexitcodeontestfailures   set to true if you don't want an exit code to be returned from galasactl if a test fails\n      --override strings           overrides to be sent with the tests (overrides in the portfolio will take precedence). Each override is of the form 'name=value'. Multiple instances of this flag can be used. For example --override=prop1=val1 --override=prop2=val2\n      --overridefile strings       path to a properties file containing override properties. Defaults to overrides.properties in galasa home folder if that file exists. Overrides from --override options will take precedence over properties in this property file. A file path of '-' disables reading any properties file. To use multiple override files, either repeat the overridefile flag for each file, or list the path (absolute or relative) of each override file, separated by commas. For example --overridefile file.properties --overridefile /Users/dummyUser/code/test.properties or --overridefile file.properties,/Users/dummyUser/code/test.properties. The files are processed in the order given. When a property is be defined in multiple files, the last occurrence processed will have its value used.\n      --package strings            packages of which tests will be selected from, packages are selected if the name contains this string, or if --regex is specified then matches the regex\n      --poll int                   Optional. The interval time in seconds between successive polls of the test runs status. Defaults to 30 seconds. If less than 1, then default value is used. (default 30)\n  -p, --portfolio string           portfolio containing the tests to run\n      --progress int               in minutes, how often the cli will report the overall progress of the test runs. A value of 0 or less disables progress reporting. (default 5)\n      --regex                      Test selection is performed by using regex\n      --reportjson string          json file to record the final results in\n      --reportjunit string         junit xml file to record the final results in\n      --reportyaml string          yaml file to record the final results in\n      --requesttype string         the type of request, used to allocate a run name. Defaults to CLI. (default \"CLI\")\n  -s, --stream string              test stream to extract the tests from\n      --tag strings                tags of which tests will be selected from, tags are selected if the name contains this string, or if --regex is specified then matches the regex\n      --tags strings               tagging metadata to be associated with the submitted runs. This can be specified as a comma-separated list of tag strings, or by repeating the --tags parameter, or both.\n      --test strings               test names which will be selected if the name contains this string, or if --regex is specified then matches the regex\n      --throttle int               how many test runs can be submitted in parallel, 0 or less will disable throttling. 1 causes tests to be run sequentially. (default 3)\n      --throttlefile string        a file where the current throttle is stored. Periodically the throttle value is read from the file used. Someone with edit access to the file can change it which dynamically takes effect. Long-running large portfolios can be throttled back to nothing (paused) using this mechanism (if throttle is set to 0). And they can be resumed (un-paused) if the value is set back. This facility can allow the tests to not show a failure when the system under test is taken out of service for maintainence.Optional. If not specified, no throttle file is used.\n      --trace                      Trace to be enabled on the test runs\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_runs_submit/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n      --galasahome string                     Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string                            File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_runs_submit/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl runs    - Manage test runs in the ecosystem</li> <li>galasactl runs submit local  - submit a list of tests to be run on a local java virtual machine (JVM)</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_runs_submit/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_runs_submit_local/","title":"Galasactl runs submit local","text":""},{"location":"docs/reference/cli-syntax/galasactl_runs_submit_local/#galasactl-runs-submit-local","title":"galasactl runs submit local","text":"<p>submit a list of tests to be run on a local java virtual machine (JVM)</p>"},{"location":"docs/reference/cli-syntax/galasactl_runs_submit_local/#synopsis","title":"Synopsis","text":"<p>Submit a list of tests to a local JVM, monitor them and wait for them to complete</p> <pre><code>galasactl runs submit local [flags]\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_runs_submit_local/#options","title":"Options","text":"<pre><code>      --class strings          test class names. The format of each entry is osgi-bundle-name/java-class-name. Java class names are fully qualified. No .class suffix is needed.\n      --debug                  When set (or true) the debugger pauses on startup and tries to connect to a Java debugger. The connection is established using the --debugMode and --debugPort values.\n      --debugMode string       The mode to use when the --debug option causes the testcase to connect to a Java debugger. Valid values are 'listen' or 'attach'. 'listen' means the testcase JVM will pause on startup, waiting for the Java debugger to connect to the debug port (see the --debugPort option). 'attach' means the testcase JVM will pause on startup, trying to attach to a java debugger which is listening on the debug port. The default value is 'listen' but can be overridden by the 'galasactl.jvm.local.launch.debug.mode' property in the bootstrap file, which in turn can be overridden by this explicit parameter on the galasactl command.\n      --debugPort uint32       The port to use when the --debug option causes the testcase to connect to a java debugger. The default value used is 2970 which can be overridden by the 'galasactl.jvm.local.launch.debug.port' property in the bootstrap file, which in turn can be overridden by this explicit parameter on the galasactl command.\n      --galasaVersion string   the version of galasa you want to use to run your tests. This should match the version of the galasa obr you built your test bundles against. (default \"0.42.0\")\n      --gherkin strings        Gherkin feature file URL. Should start with 'file://'. \n  -h, --help                   Displays the options for the 'runs submit local' command.\n      --localMaven string      The url of a local maven repository are where galasa bundles can be loaded from on your local file system. Defaults to your home .m2/repository file. Please note that this should be in a URL form e.g. 'file:///Users/myuserid/.m2/repository', or 'file://C:/Users/myuserid/.m2/repository'\n      --obr strings            The maven coordinates of the obr bundle(s) which refer to your test bundles. The format of this parameter is 'mvn:${TEST_OBR_GROUP_ID}/${TEST_OBR_ARTIFACT_ID}/${TEST_OBR_VERSION}/obr' Multiple instances of this flag can be used to describe multiple obr bundles.\n      --remoteMaven string     the url of the remote maven where galasa bundles can be loaded from. Defaults to maven central. (default \"https://repo.maven.apache.org/maven2\")\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_runs_submit_local/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n      --galasahome string                     Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -g, --group string                          the group name to assign the test runs to, if not provided, a psuedo unique id will be generated\n  -l, --log string                            File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n      --noexitcodeontestfailures              set to true if you don't want an exit code to be returned from galasactl if a test fails\n      --override strings                      overrides to be sent with the tests (overrides in the portfolio will take precedence). Each override is of the form 'name=value'. Multiple instances of this flag can be used. For example --override=prop1=val1 --override=prop2=val2\n      --overridefile strings                  path to a properties file containing override properties. Defaults to overrides.properties in galasa home folder if that file exists. Overrides from --override options will take precedence over properties in this property file. A file path of '-' disables reading any properties file. To use multiple override files, either repeat the overridefile flag for each file, or list the path (absolute or relative) of each override file, separated by commas. For example --overridefile file.properties --overridefile /Users/dummyUser/code/test.properties or --overridefile file.properties,/Users/dummyUser/code/test.properties. The files are processed in the order given. When a property is be defined in multiple files, the last occurrence processed will have its value used.\n      --poll int                              Optional. The interval time in seconds between successive polls of the test runs status. Defaults to 30 seconds. If less than 1, then default value is used. (default 30)\n      --progress int                          in minutes, how often the cli will report the overall progress of the test runs. A value of 0 or less disables progress reporting. (default 5)\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n      --reportjson string                     json file to record the final results in\n      --reportjunit string                    junit xml file to record the final results in\n      --reportyaml string                     yaml file to record the final results in\n      --requesttype string                    the type of request, used to allocate a run name. Defaults to CLI. (default \"CLI\")\n      --tags strings                          tagging metadata to be associated with the submitted runs. This can be specified as a comma-separated list of tag strings, or by repeating the --tags parameter, or both.\n      --throttle int                          how many test runs can be submitted in parallel, 0 or less will disable throttling. 1 causes tests to be run sequentially. (default 3)\n      --throttlefile string                   a file where the current throttle is stored. Periodically the throttle value is read from the file used. Someone with edit access to the file can change it which dynamically takes effect. Long-running large portfolios can be throttled back to nothing (paused) using this mechanism (if throttle is set to 0). And they can be resumed (un-paused) if the value is set back. This facility can allow the tests to not show a failure when the system under test is taken out of service for maintainence.Optional. If not specified, no throttle file is used.\n      --trace                                 Trace to be enabled on the test runs\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_runs_submit_local/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl runs submit  - submit a list of tests to the ecosystem</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_runs_submit_local/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_secrets/","title":"Galasactl secrets","text":""},{"location":"docs/reference/cli-syntax/galasactl_secrets/#galasactl-secrets","title":"galasactl secrets","text":"<p>Manage secrets stored in the Galasa service's credentials store</p>"},{"location":"docs/reference/cli-syntax/galasactl_secrets/#synopsis","title":"Synopsis","text":"<p>The parent command for operations to manipulate secrets in the Galasa service's credentials store</p>"},{"location":"docs/reference/cli-syntax/galasactl_secrets/#options","title":"Options","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n  -h, --help                                  Displays the options for the 'secrets' command.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_secrets/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --galasahome string   Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string          File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_secrets/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl  - CLI for Galasa</li> <li>galasactl secrets delete    - Deletes a secret from the credentials store</li> <li>galasactl secrets get  - Get secrets from the credentials store</li> <li>galasactl secrets set  - Creates or updates a secret in the credentials store</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_secrets/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_secrets_delete/","title":"Galasactl secrets delete","text":""},{"location":"docs/reference/cli-syntax/galasactl_secrets_delete/#galasactl-secrets-delete","title":"galasactl secrets delete","text":"<p>Deletes a secret from the credentials store</p>"},{"location":"docs/reference/cli-syntax/galasactl_secrets_delete/#synopsis","title":"Synopsis","text":"<p>Deletes a secret from the credentials store</p> <pre><code>galasactl secrets delete [flags]\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_secrets_delete/#options","title":"Options","text":"<pre><code>  -h, --help          Displays the options for the 'secrets delete' command.\n      --name string   A mandatory flag that identifies the secret to be created or manipulated.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_secrets_delete/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n      --galasahome string                     Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string                            File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_secrets_delete/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl secrets  - Manage secrets stored in the Galasa service's credentials store</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_secrets_delete/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_secrets_get/","title":"Galasactl secrets get","text":""},{"location":"docs/reference/cli-syntax/galasactl_secrets_get/#galasactl-secrets-get","title":"galasactl secrets get","text":"<p>Get secrets from the credentials store</p>"},{"location":"docs/reference/cli-syntax/galasactl_secrets_get/#synopsis","title":"Synopsis","text":"<p>Get a list of secrets or a specific secret from the credentials store</p> <pre><code>galasactl secrets get [flags]\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_secrets_get/#options","title":"Options","text":"<pre><code>      --format string   the output format of the returned secrets. Supported formats are: 'summary', 'yaml'. (default \"summary\")\n  -h, --help            Displays the options for the 'secrets get' command.\n      --name string     An optional flag that identifies the secret to be retrieved.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_secrets_get/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n      --galasahome string                     Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string                            File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_secrets_get/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl secrets  - Manage secrets stored in the Galasa service's credentials store</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_secrets_get/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_secrets_set/","title":"Galasactl secrets set","text":""},{"location":"docs/reference/cli-syntax/galasactl_secrets_set/#galasactl-secrets-set","title":"galasactl secrets set","text":"<p>Creates or updates a secret in the credentials store</p>"},{"location":"docs/reference/cli-syntax/galasactl_secrets_set/#synopsis","title":"Synopsis","text":"<p>Creates or updates a secret in the credentials store</p> <pre><code>galasactl secrets set [flags]\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_secrets_set/#options","title":"Options","text":"<pre><code>      --base64-password string   a base64-encoded password to set into a secret\n      --base64-token string      a base64-encoded token to set into a secret\n      --base64-username string   a base64-encoded username to set into a secret\n      --description string       the description to associate with the secret being created or updated\n  -h, --help                     Displays the options for the 'secrets set' command.\n      --name string              A mandatory flag that identifies the secret to be created or manipulated.\n      --password string          a password to set into a secret\n      --token string             a token to set into a secret\n      --type string              the desired secret type to convert an existing secret into. Supported types are: [UsernamePassword Username UsernameToken Token].\n      --username string          a username to set into a secret\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_secrets_set/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n      --galasahome string                     Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string                            File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_secrets_set/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl secrets  - Manage secrets stored in the Galasa service's credentials store</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_secrets_set/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_streams/","title":"Galasactl streams","text":""},{"location":"docs/reference/cli-syntax/galasactl_streams/#galasactl-streams","title":"galasactl streams","text":"<p>Manages test streams in a Galasa service</p>"},{"location":"docs/reference/cli-syntax/galasactl_streams/#synopsis","title":"Synopsis","text":"<p>Parent command for managing test streams in a Galasa service</p>"},{"location":"docs/reference/cli-syntax/galasactl_streams/#options","title":"Options","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n  -h, --help                                  Displays the options for the 'streams' command.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_streams/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --galasahome string   Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string          File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_streams/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl  - CLI for Galasa</li> <li>galasactl streams delete    - Deletes a test stream by name</li> <li>galasactl streams get  - Gets a list of test streams</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_streams/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_streams_delete/","title":"Galasactl streams delete","text":""},{"location":"docs/reference/cli-syntax/galasactl_streams_delete/#galasactl-streams-delete","title":"galasactl streams delete","text":"<p>Deletes a test stream by name</p>"},{"location":"docs/reference/cli-syntax/galasactl_streams_delete/#synopsis","title":"Synopsis","text":"<p>Deletes a single test stream with the given name from the Galasa service</p> <pre><code>galasactl streams delete [flags]\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_streams_delete/#options","title":"Options","text":"<pre><code>  -h, --help          Displays the options for the 'streams delete' command.\n      --name string   A mandatory field indicating the name of a test stream.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_streams_delete/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n      --galasahome string                     Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string                            File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_streams_delete/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl streams  - Manages test streams in a Galasa service</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_streams_delete/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_streams_get/","title":"Galasactl streams get","text":""},{"location":"docs/reference/cli-syntax/galasactl_streams_get/#galasactl-streams-get","title":"galasactl streams get","text":"<p>Gets a list of test streams</p>"},{"location":"docs/reference/cli-syntax/galasactl_streams_get/#synopsis","title":"Synopsis","text":"<p>Get a list of test streams from the Galasa service</p> <pre><code>galasactl streams get [flags]\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_streams_get/#options","title":"Options","text":"<pre><code>      --format string   the output format of the returned streams. Supported formats are: 'summary', 'yaml'. (default \"summary\")\n  -h, --help            Displays the options for the 'streams get' command.\n      --name string     An optional field indicating the name of a test stream\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_streams_get/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n      --galasahome string                     Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string                            File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_streams_get/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl streams  - Manages test streams in a Galasa service</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_streams_get/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_users/","title":"Galasactl users","text":""},{"location":"docs/reference/cli-syntax/galasactl_users/#galasactl-users","title":"galasactl users","text":"<p>Manages users in an ecosystem</p>"},{"location":"docs/reference/cli-syntax/galasactl_users/#synopsis","title":"Synopsis","text":"<p>Allows interaction with the user servlet to return information about users.</p>"},{"location":"docs/reference/cli-syntax/galasactl_users/#options","title":"Options","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n  -h, --help                                  Displays the options for the 'users' command.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_users/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>      --galasahome string   Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string          File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_users/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl  - CLI for Galasa</li> <li>galasactl users delete    - Deletes a user by login ID</li> <li>galasactl users get  - Get a list of users</li> <li>galasactl users set  - Set various mutable fields in a selected user record</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_users/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_users_delete/","title":"Galasactl users delete","text":""},{"location":"docs/reference/cli-syntax/galasactl_users_delete/#galasactl-users-delete","title":"galasactl users delete","text":"<p>Deletes a user by login ID</p>"},{"location":"docs/reference/cli-syntax/galasactl_users_delete/#synopsis","title":"Synopsis","text":"<p>Deletes a single user by their login ID from the ecosystem</p> <pre><code>galasactl users delete [flags]\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_users_delete/#options","title":"Options","text":"<pre><code>  -h, --help              Displays the options for the 'users delete' command.\n      --login-id string   A mandatory field indicating the login ID of a user.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_users_delete/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n      --galasahome string                     Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string                            File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_users_delete/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl users  - Manages users in an ecosystem</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_users_delete/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_users_get/","title":"Galasactl users get","text":""},{"location":"docs/reference/cli-syntax/galasactl_users_get/#galasactl-users-get","title":"galasactl users get","text":"<p>Get a list of users</p>"},{"location":"docs/reference/cli-syntax/galasactl_users_get/#synopsis","title":"Synopsis","text":"<p>Get a list of users stored in the Galasa API server</p> <pre><code>galasactl users get [flags]\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_users_get/#options","title":"Options","text":"<pre><code>  -h, --help              Displays the options for the 'users get' command.\n      --login-id string   An optional field indicating the login ID of a user.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_users_get/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n      --galasahome string                     Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string                            File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_users_get/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl users  - Manages users in an ecosystem</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_users_get/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/cli-syntax/galasactl_users_set/","title":"Galasactl users set","text":""},{"location":"docs/reference/cli-syntax/galasactl_users_set/#galasactl-users-set","title":"galasactl users set","text":"<p>Set various mutable fields in a selected user record</p>"},{"location":"docs/reference/cli-syntax/galasactl_users_set/#synopsis","title":"Synopsis","text":"<p>Set various mutable fields in a selected user record</p> <pre><code>galasactl users set [flags]\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_users_set/#options","title":"Options","text":"<pre><code>  -h, --help              Displays the options for the 'users set' command.\n      --login-id string   A mandatory field indicating the login ID of a user.\n      --role string       An optional field indicating the new role of the specified user.\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_users_set/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -b, --bootstrap string                      Bootstrap URL. Should start with 'http://' or 'file://'. If it starts with neither, it is assumed to be a fully-qualified path. If missing, it defaults to use the 'bootstrap.properties' file in your GALASA_HOME. Example: http://example.com/bootstrap, file:///user/myuserid/.galasa/bootstrap.properties , file://C:/Users/myuserid/.galasa/bootstrap.properties\n      --galasahome string                     Path to a folder where Galasa will read and write files and configuration settings. The default is '${HOME}/.galasa'. This overrides the GALASA_HOME environment variable which may be set instead.\n  -l, --log string                            File to which log information will be sent. Any folder referred to must exist. An existing file will be overwritten. Specify \"-\" to log to stderr. Defaults to not logging.\n      --rate-limit-retries int                The maximum number of retries that should be made when requests to the Galasa Service fail due to rate limits being exceeded. Must be a whole number. Defaults to 3 retries (default 3)\n      --rate-limit-retry-backoff-secs float   The amount of time in seconds to wait before retrying a command if it failed due to rate limits being exceeded. Defaults to 1 second. (default 1)\n</code></pre>"},{"location":"docs/reference/cli-syntax/galasactl_users_set/#see-also","title":"SEE ALSO","text":"<ul> <li>galasactl users  - Manages users in an ecosystem</li> </ul>"},{"location":"docs/reference/cli-syntax/galasactl_users_set/#auto-generated-by-spf13cobra-on-12-jun-2025","title":"Auto generated by spf13/cobra on 12-Jun-2025","text":""},{"location":"docs/reference/javadoc/legal/jquery/","title":"Jquery","text":""},{"location":"docs/reference/javadoc/legal/jquery/#jquery-v371","title":"jQuery v3.7.1","text":""},{"location":"docs/reference/javadoc/legal/jquery/#jquery-license","title":"jQuery License","text":"<pre><code>jQuery v 3.7.1\nCopyright OpenJS Foundation and other contributors, https://openjsf.org/\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n</code></pre>"},{"location":"docs/reference/javadoc/legal/jqueryUI/","title":"jqueryUI","text":""},{"location":"docs/reference/javadoc/legal/jqueryUI/#jquery-ui-v1132","title":"jQuery UI v1.13.2","text":""},{"location":"docs/reference/javadoc/legal/jqueryUI/#jquery-ui-license","title":"jQuery UI License","text":"<pre><code>Copyright jQuery Foundation and other contributors, https://jquery.org/\n\nThis software consists of voluntary contributions made by many\nindividuals. For exact contribution history, see the revision history\navailable at https://github.com/jquery/jquery-ui\n\nThe following license applies to all parts of this software except as\ndocumented below:\n\n====\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n====\n\nCopyright and related rights for sample code are waived via CC0. Sample\ncode is defined as all source code contained within the demos directory.\n\nCC0: http://creativecommons.org/publicdomain/zero/1.0/\n\n====\n\nAll files located in the node_modules and external directories are\nexternally maintained libraries used by this software which have their\nown licenses; we recommend you read them, as their terms may differ from\nthe terms above.\n</code></pre>"},{"location":"docs/running-simbank-tests/","title":"Exploring Galasa SimBank","text":"<p>Distributed with Galasa, SimBank is a component that simulates a mainframe application. It sits above another component called SimPlatform. As delivered, SimBank implements a sample banking application against which you can configure and run a set of provided tests in preparation for running your own tests against an actual mainframe application. You can also practice writing some new tests to run against the SimBank banking application.</p> <p>By exercising the Galasa framework against SimBank, you can pre-empt a lot (but not all) of the work and learning necessary to eventually hook your own tests up with a genuine mainframe environment. If the provided SimBank tests do not work, then it is unlikely that you will be able to run your own tests on a mainframe application. In summary, SimBank helps you to understand Galasa's basic principles of operation before you learn how to connect Galasa to your own mainframe application-under-test. Start by installing Galasa Simbank, either using the  Running Galasa SimBank online documentation if you are working with the Galasa CLI repository in GitHub, or the Running Galasa SimBank offline documentation if you are using the Galasa zipped distribution.</p> <p>Galasa SimBank comes with a selection of prepared Galasa tests. You can find out more about these tests in the following sections. Follow the flow of logic in these classes and understand more about the Java that is used to create them, including how to use Galasa annotations and review documented test methods. A good place to start is with the SimBank IVT documentation. You can then move on to look at the other tests that are provided with Galasa. Sample SimBank tests are available in the Galasa simplatform repository in GitHub. </p>"},{"location":"docs/running-simbank-tests/basic-account-credit-test/","title":"BasicAccountCreditTest","text":"<p>This test updates a Galasa SimBank account using web services and examines the changes via some 3270 screens, illustrating how to use web services to interface with the SimBank application, and how to create and use Java methods that you do not wish to be recognized as test methods. The SimBank Basic Account Credit test is available in the Galasa simplatform repository in GitHub. </p> <p>To run this test, follow the same steps as for <code>SimBankIVT.java</code> but using the test class name <code>BasicAccountCreditTest</code> instead of <code>SimBankIVT</code>. </p> <p>The spine of this test resembles that of <code>SimBankIVT.java</code>, with a nearly-identical collection of imports and invoked Managers within the main test class - <code>BasicAccountCreditTest</code> in this case.</p> <p>After registering the password as confidential text, the code uses the facilities of the 3270 terminal in much the same way as the previous example to retrieve an account balance:</p> <pre><code>coreManager.registerConfidentialText(\"SYS1\", \"IBMUSER password\");\n\n//Initial actions to get into banking application\nterminal.waitForKeyboard()\n    .positionCursorToFieldContaining(\"Userid\").tab().type(\"IBMUSER\")\n    .positionCursorToFieldContaining(\"Password\").tab().type(\"SYS1\")\n    .enter().waitForKeyboard()\n\n    //Open banking application\n    .pf1().waitForKeyboard()\n    .clear().waitForKeyboard()\n    .tab().type(\"bank\").enter().waitForKeyboard();\n\n//Obtain the initial balance\nBigDecimal userBalance = getBalance(\"123456789\");\n</code></pre> <p>Note that the <code>userBalance</code> is obtained by calling the private method <code>getBalance</code> - it is not annotated with <code>@Test</code>, and so will (correctly) not be identified to Galasa as a test method. It's also a good habit to declare such methods as private if possible.</p> <pre><code>private BigDecimal getBalance(String accountNum) throws DatastreamException, TimeoutException,\n                        KeyboardLockedException, NetworkException, FieldNotFoundException,\n                        TextNotFoundException, InterruptedException {\n    BigDecimal amount = BigDecimal.ZERO;\n    //Open account menu and enter account number\n    terminal.pf1().waitForKeyboard()\n            .positionCursorToFieldContaining(\"Account Number\").tab()\n            .type(accountNum).enter().waitForKeyboard();\n\n    //Retrieve balance from screen\n    amount = new BigDecimal(terminal.retrieveFieldTextAfterFieldWithString(\"Balance\").trim());\n\n    //Return to bank menu\n    terminal.pf3().waitForKeyboard();\n    return amount;\n}\n</code></pre> <p>Next, the amount to be credited to the designated account is prepared by assigning it to the variable <code>amount</code>, and a HashMap is declared and loaded with the ACCOUNT_NUMBER and AMOUNT parameters.</p> <pre><code>//Set the amount be credited and call web service\nBigDecimal amount = BigDecimal.valueOf(500.50);\nHashMap&lt;String,Object&gt; parameters = new HashMap&lt;String,Object&gt;();\nparameters.put(\"ACCOUNT_NUMBER\", \"123456789\");\nparameters.put(\"AMOUNT\", amount.toString());\n</code></pre> <p>A sample web services request is created by populating the <code>testSkel.skel</code> skeleton SOAP message with the prepared parameters, and the web services request invoked. The actual call is made by <code>client</code>, an instance of our HTTPClient Manager. You can review the skeleton by expanding <code>src/main/resources &gt; resources &gt; skeletons</code> and browsing the <code>testSkel.skel</code> file.</p> <p><pre><code>//Load sample request with the given parameters\nIBundleResources resources = artifacts.getBundleResources(this.getClass());\nInputStream is = resources.retrieveSkeletonFile(\"/resources/skeletons/testSkel.skel\", parameters);\nString textContext = resources.streamAsString(is);\n\n//Invoke the web request\nclient.setURI(new URI(\"http://\" + image.getDefaultHostname() + \":2080\"));\nclient.postTextAsXML(\"updateAccount\", textContext, false);\n</code></pre> Finally, the new balance is retrived, and an assertion checks that the new balance equates to the sum of the old balance plus the amount credited. <pre><code>//Obtain the final balance\nBigDecimal newUserBalance = getBalance(\"123456789\");\n\n//Assert that the correct amount has been credited to the account\nassertThat(newUserBalance).isEqualTo(userBalance.add(amount));\n</code></pre></p>"},{"location":"docs/running-simbank-tests/batch-accounts-open-test/","title":"BatchAccountsOpenTest","text":"<p>This test uses the z/OS Batch Manager (which in the background, invokes z/OSMF) to add a set of accounts to the Galasa SimBank system via a z/OS batch job. The SimBank Batch Accounts Open test is available in the Galasa simplatform repository in GitHub. </p> <p>When you installed Galasa, some of the configuration information set in the <code>overrides.properties</code> file is specific to the z/OSMF and z/OS Batch Managers. Confirm that the file - it's located in your <code>.galasa</code> folder - contains, in its entirety:</p> <pre><code>zos.dse.tag.SIMBANK.imageid=SIMBANK\nzos.dse.tag.SIMBANK.clusterid=SIMBANK\n\nsimbank.dse.instance.name=SIMBANK\nsimbank.instance.SIMBANK.zos.image=SIMBANK\n\nzos.image.SIMBANK.ipv4.hostname=127.0.0.1\nzos.image.SIMBANK.telnet.port=2023\nzos.image.SIMBANK.telnet.tls=false\nzos.image.SIMBANK.credentials=SIMBANK\n\nzosmf.server.SIMBANK.images=SIMBANK\nzosmf.server.SIMBANK.hostname=127.0.0.1\nzosmf.server.SIMBANK.port=2040\nzosmf.server.SIMBANK.https=false\n</code></pre> <p>For brevity, package declarations and imports are omitted in the following walkthrough.</p>"},{"location":"docs/running-simbank-tests/batch-accounts-open-test/#walkthrough-batchaccountsopentest","title":"Walkthrough - BatchAccountsOpenTest","text":"<p>First, some Managers are declared, including a new Manager - <code>ZosBatch</code> and a related annotation and interface <code>ZosBatchJobname</code>.</p> <p><pre><code>@ZosBatch(imageTag = \"SIMBANK\")\npublic IZosBatch zosBatch;\n\n@ZosBatchJobname(imageTag = \"SIMBANK\")\npublic IZosBatchJobname zosBatchJobname;\n</code></pre> Next, the <code>batchOpenAccountsTest()</code> method is specified. It starts off by assembling a <code>List&lt;String&gt;</code> of account Strings - each such String contains an account number, a sort code and an initial credit, separated by commas:</p> <pre><code>// Create a list of accounts to create\nList&lt;String&gt; accountList = new LinkedList&lt;&gt;();\naccountList.add(\"901000001,20-40-60,1000\");\naccountList.add(\"901000002,20-40-60,1000\");\naccountList.add(\"901000003,20-40-60,1000\");\naccountList.add(\"901000004,20-40-60,1000\");\naccountList.add(\"901000005,20-40-60,1000\");\naccountList.add(\"901000006,20-40-60,1000\");\naccountList.add(\"901000007,20-40-60,1000\");\naccountList.add(\"901000008,20-40-60,1000\");\naccountList.add(\"901000009,20-40-60,1000\");\n</code></pre> <p>A <code>HashMap</code> called <code>parameters</code> is instantiated, associating <code>ACCOUNT_OPEN</code> with the key <code>CONTROL</code>, and the concatenated list of accounts (each item terminated by <code>'\\n'</code>) with the key <code>DATAIN</code>.</p> <pre><code>// Create the substitution parameters for the JCL\nHashMap&lt;String, Object&gt; parameters = new HashMap&lt;&gt;();\nparameters.put(\"CONTROL\", \"ACCOUNT_OPEN\");\nparameters.put(\"DATAIN\", String.join(\"\\n\", accountList));\n</code></pre> <p>The <code>HashMap</code> will eventually deposit its contents in the designated substitution variables (<code>++CONTROL++</code> and <code>++DATAIN++</code>) located in some skeletal JCL stored in <code>/src/main/resources/skeletons/SIMBANK.jcl</code>:</p> <pre><code>//SIMBANK  EXEC PGM=SIMBANK\n//SYSOUT   DD SYSOUT=*\n//CONTROL  DD *\n++CONTROL++\n//DATAIN   DD *\n++DATAIN++\n</code></pre> <p>Loading the JCL with the parameters:</p> <pre><code>// Load the JCL with the given substitution parameters\nInputStream inputStream = resources.retrieveSkeletonFile(\"/resources/skeletons/SIMBANK.jcl\", parameters);\nString jcl = resources.streamAsString(inputStream);\n</code></pre> <p>At this stage, the String <code>jcl</code> contains:</p> <pre><code>//SIMBANK  EXEC PGM=SIMBANK\n//SYSOUT   DD SYSOUT=*\n//CONTROL  DD *\nACCOUNT_OPEN\n//DATAIN   DD *\n901000001,20-40-60,1000\n901000002,20-40-60,1000\n901000003,20-40-60,1000\n901000004,20-40-60,1000\n901000005,20-40-60,1000\n901000006,20-40-60,1000\n901000007,20-40-60,1000\n901000008,20-40-60,1000\n901000009,20-40-60,1000\n</code></pre> <p>The JCL is submitted and the program waits for the batch job to complete:</p> <pre><code>// Submit the JCL\nIZosBatchJob batchJob = zosBatch.submitJob(jcl, zosBatchJobname);\n\n// Wait for the batch job to complete\nlogger.info(\"batchJob.toString() = \" + batchJob.toString());\nint rc = batchJob.waitForJob();\n</code></pre> <p>Finally, the return code is examined and if it is not 0, the test is failed:</p> <pre><code>// If highest CC was not 0, fail the test\nif (rc != 0) {\n    // Print the job output to the run log\n    batchJob.retrieveOutput().forEach(jobOutput -&gt; logger.info(\n            \"batchJob.retrieveOutput(): \" + jobOutput.getDdname() + \"\\n\" + jobOutput.getRecords() + \"\\n\"));\n    Fail.fail(\"Batch job failed RETCODE=\" + batchJob.getRetcode() + \" Check batch job output\");\n\n}\nlogger.info(\"Batch job complete RETCODE=\" + batchJob.getRetcode());\n</code></pre> <p>You can run this example just like the others - don't forget to launch SimBank first.</p> <p>By using the concepts introduced in this example, you can write your own z/OS Batch Manager tests.</p> <p>The z/OS Batch Manager stores the job output in the test results main archive store.</p>"},{"location":"docs/running-simbank-tests/batch-accounts-open-test/#reviewing-the-stored-artifacts-in-eclipse","title":"Reviewing the stored artifacts in Eclipse","text":"<p>When <code>BatchAccountsOpenTest</code> has finished running, you can expand the relevant entry in the Galasa Results tab - if it is not initially visible, choose Galasa &gt; Initialise Galasa Framework and then Window &gt; Show View &gt; Other and finally, Galasa Results. </p> <p>For example, your Galasa Results tab might resemble:</p> <p></p> <p>Double-click on a run and you can explore the three tabs in the main pane:</p> <ul> <li> <p>General: presenting some useful overview metrics about the run, and its payload of tests and test classes</p> </li> <li> <p>Run Log: which stores the console messages emitted by Eclipse as the test ran, which end with the following lines signifying test success:</p> </li> </ul> <pre><code>****************************************************************************************************\n*** Passed - Test method dev.galasa.simbanks.tests.BatchAccountsOpenTest#batchOpenAccountsTest,type=Test\n****************************************************************************************************\n28/01/2020 09:31:53.738 INFO dev.galasa.framework.TestClassWrapper.runTestMethods - Ending\n****************************************************************************************************\n*** Passed - Test class dev.galasa.simbanks.tests.BatchAccountsOpenTest\n****************************************************************************************************\n</code></pre> <ul> <li>Stored Artifacts: which contain a variety of detailed test-related outputs - the specifics are determined by the writer of the z/OS Batch Manager in this case.</li> </ul> <p></p> <p>The outputs include the constructed input JCL and several of the usual JES batch output datasets.</p>"},{"location":"docs/running-simbank-tests/batch-accounts-open-test/#batchaccountsopentest-full-source-listing","title":"BatchAccountsOpenTest - full source listing","text":"<pre><code>package dev.galasa.simbanks.tests;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\n\nimport org.apache.commons.logging.Log;\nimport org.assertj.core.api.Fail;\n\nimport dev.galasa.Test;\nimport dev.galasa.artifact.ArtifactManager;\nimport dev.galasa.artifact.IArtifactManager;\nimport dev.galasa.artifact.IBundleResources;\nimport dev.galasa.artifact.TestBundleResourceException;\nimport dev.galasa.core.manager.Logger;\nimport dev.galasa.zos.IZosImage;\nimport dev.galasa.zos.ZosImage;\nimport dev.galasa.zosbatch.IZosBatch;\nimport dev.galasa.zosbatch.IZosBatchJob;\nimport dev.galasa.zosbatch.IZosBatchJobname;\nimport dev.galasa.zosbatch.ZosBatch;\nimport dev.galasa.zosbatch.ZosBatchException;\nimport dev.galasa.zosbatch.ZosBatchJobname;\n\n@Test\npublic class BatchAccountsOpenTest {\n\n    @ZosImage(imageTag = \"SIMBANK\")\n    public IZosImage image;\n\n    @ZosBatch(imageTag = \"SIMBANK\")\n    public IZosBatch zosBatch;\n\n    @ZosBatchJobname(imageTag = \"SIMBANK\")\n    public IZosBatchJobname zosBatchJobname;\n\n    @ArtifactManager\n    public IArtifactManager artifacts;\n\n    @Logger\n    public Log logger;\n\n    /**\n     * Test which uses the SIMBANK batch job to open a number of new accounts. The\n     * test passes if the job completes successfully (RC=0000)\n     * \n     * @throws TestBundleResourceException\n     * @throws IOException\n     * @throws ZosBatchException\n     */\n    @Test\n    public void batchOpenAccountsTest() throws TestBundleResourceException, IOException, ZosBatchException {\n        // Create a list of accounts to create\n        List&lt;String&gt; accountList = new LinkedList&lt;&gt;();\n        accountList.add(\"901000001,20-40-60,1000\");\n        accountList.add(\"901000002,20-40-60,1000\");\n        accountList.add(\"901000003,20-40-60,1000\");\n        accountList.add(\"901000004,20-40-60,1000\");\n        accountList.add(\"901000005,20-40-60,1000\");\n        accountList.add(\"901000006,20-40-60,1000\");\n        accountList.add(\"901000007,20-40-60,1000\");\n        accountList.add(\"901000008,20-40-60,1000\");\n        accountList.add(\"901000009,20-40-60,1000\");\n\n        // Create the substitution parameters for the JCL\n        HashMap&lt;String, Object&gt; parameters = new HashMap&lt;&gt;();\n        parameters.put(\"CONTROL\", \"ACCOUNT_OPEN\");\n        parameters.put(\"DATAIN\", String.join(\"\\n\", accountList));\n\n        // Load the JCL with the given substitution parameters\n        IBundleResources resources = artifacts.getBundleResources(this.getClass());\n        InputStream inputStream = resources.retrieveSkeletonFile(\"/resources/skeletons/SIMBANK.jcl\", parameters);\n        String jcl = resources.streamAsString(inputStream);\n\n        // Submit the JCL\n        IZosBatchJob batchJob = zosBatch.submitJob(jcl, zosBatchJobname);\n\n        // Wait for the batch job to complete\n        logger.info(\"batchJob.toString() = \" + batchJob.toString());\n        int rc = batchJob.waitForJob();\n\n        // If highest CC was not 0, fail the test\n        if (rc != 0) {\n            // Print the job output to the run log\n            batchJob.retrieveOutput().forEach(jobOutput -&gt; logger.info(\n                    \"batchJob.retrieveOutput(): \" + jobOutput.getDdname() + \"\\n\" + jobOutput.getRecords() + \"\\n\"));\n            Fail.fail(\"Batch job failed RETCODE=\" + batchJob.getRetcode() + \" Check batch job output\");\n\n        }\n        logger.info(\"Batch job complete RETCODE=\" + batchJob.getRetcode());\n    }\n}\n</code></pre>"},{"location":"docs/running-simbank-tests/provisioned-account-credit-tests/","title":"ProvisionedAccountCreditTests","text":"<p>To run this test, follow the same steps as for <code>SimBankIVT.java</code> but using the test class name <code>ProvisionedAccountCreditTests</code> instead of <code>SimBankIVT</code>. The SimBank Provisioned Account Credit test is available in the Galasa simplatform repository in GitHub. </p> <p>This test performs the same function as <code>BasicAccountCreditTest.java</code> but has an improved design which includes the use of a provisioned account object, which, once declared as:</p> <pre><code>@Account(existing=false, accountType=AccountType.HighValue)\npublic IAccount account;\n</code></pre> <p>is used to retrieve the account balance:</p> <pre><code>BigDecimal userBalance = account.getBalance();\n</code></pre> <p>Note how the <code>getBalance()</code> method has been moved into the provisioned account object, decluttering the main test class. This declaration:</p> <pre><code>@Logger\npublic Log logger;\n</code></pre> <p>provides access to the log, to which an initial message is written:</p> <pre><code>Logger.info(\"Pre-test balance is \" + userBalance.toString());\n</code></pre> <p>Once again, the amount to be credited is then set and a HashMap prepared with the parameters for the subequent web services call:</p> <pre><code>BigDecimal amount = BigDecimal.valueOf(500.50);\nlogger.info(\"Will credit account with \" + amount.toString());\nHashMap&lt;String,Object&gt; parameters = new HashMap&lt;String,Object&gt;();\nparameters.put(\"ACCOUNT_NUMBER\", account.getAccountNumber());\nparameters.put(\"AMOUNT\", amount.toString());\n</code></pre> <p>This time, the account number is obtained by calling <code>account.getAccountNumber()</code> rather than by hardcoding the value. </p> <p>The sample request is loaded with the prepared parameters, and a note made to the log:</p> <pre><code>//Load sample request with the given parameters\nIBundleResources resources = artifacts.getBundleResources(this.getClass());\nInputStream is = resources.retrieveSkeletonFile(\"/resources/skeletons/testSkel.skel\", parameters);\nString textContent = resources.streamAsString(is);\n\nlogger.info(\"Credit actioned\");\n</code></pre> <p>The XML request is stored in the test results archive:</p> <pre><code>//Store the xml request in the test results archive\nstoreOutput(\"webservice\", \"request.txt\", textContent);\n</code></pre> <p>This uses a private method called <code>storeOutput</code>:</p> <pre><code>private void storeOutput(String folder, String file, String content) throws IOException {\n    //Store the xml request in the test results archive\n    Path requestPath = artifactRoot.resolve(folder).resolve(file);\n    Files.write(requestPath, \n            content.getBytes(), \n            new SetContentType(ResultArchiveStoreContentType.TEXT), \n            StandardOpenOption.CREATE);\n}\n</code></pre> <p>Then the actual web request is invoked, and the response stored in the test results archive:</p> <pre><code>//Invoke the web request\nclient.setURI(new URI(bank.getFullAddress()));\nString response = (String) client.postTextAsXML(bank.getUpdateAddress(), textContent, false);\n\n//Store the response in the test results archive\nstoreOutput(\"webservice\", \"response.txt\", response);\n</code></pre> <p>To complete the test, the final balance is obtained and logged, an assertion checks that the correct amount has been credited and a final note is made to the log:</p> <pre><code>//Obtain the final balance\nBigDecimal newUserBalance = account.getBalance();\nlogger.info(\"Post-test balance is \" + newUserBalance.toString());\n\n//Assert that the correct amount has been credited to the account\nassertThat(newUserBalance).isEqualTo(userBalance.add(amount));\n\nlogger.info(\"Balances matched\");\n</code></pre>"},{"location":"docs/running-simbank-tests/running-simbank-tests-cli-offline/","title":"Running the SimBank tests using the CLI offline","text":"<p>You can explore Galasa further with Galasa Simbank. Galasa Simbank is a simulated bank application that showcases Galasa's functionality within an application. Galasa SimBank comes with a selection of prepared Galasa tests:</p> <ul> <li>A basic Installation Verification Test (IVT) which logs on to SimBank  - <code>SimBankIVT.java</code>.</li> <li>A test that updates an account using web services and examines the changes with 3270 screens - <code>BasicAccountCreditTest.java</code>.</li> <li>A test that uses a provisioned account object to perform the same test as <code>BasicAccountCreditTest.java</code> in an improved test design - <code>ProvisionedAccountCreditTests.java</code>.</li> <li>A test that exercises the z/OS Batch Manager by simulating the submission of a JCL job to add a number of accounts to the SimBank system - <code>BatchAccountsOpenTest.java</code>.</li> </ul> <p>The following sections explain how to run the <code>SimBankIVT</code> test class by using the CLI. Make sure that you have installed the Galasa CLI tool and Java version 11 JDK, and have set the JAVA_HOME environment variable, as described in the CLI prerequisites offline documentation. </p>"},{"location":"docs/running-simbank-tests/running-simbank-tests-cli-offline/#updating-the-overrides-and-credentials-property-files","title":"Updating the overrides and credentials property files","text":"<p>In order to run the Galasa SimBanks tests you need to add some configuration information in the <code>overrides.properties</code> and <code>credentials.properties</code> files that were created when you initialised your Galasa home folder by running the <code>galasactl local init</code> command. Complete the following steps to edit the files:</p> <ol> <li> <p>Edit a file called <code>overrides.properties</code> in your <code>.galasa</code> folder so that it contains the following configuration properties. Configuration properties held in this file are used by Galasa tests at runtime. You can change the value of the properties that are set in this file to enable you to run tests against different configurations without changing the test code. The following example configuration properties enable the provided Galasa SimBank tests to run on your machine:</p> <pre><code>zos.dse.tag.SIMBANK.imageid=SIMBANK\nzos.dse.tag.SIMBANK.clusterid=SIMBANK\n\nsimbank.dse.instance.name=SIMBANK\nsimbank.instance.SIMBANK.zos.image=SIMBANK\n\nzos.image.SIMBANK.ipv4.hostname=127.0.0.1\nzos.image.SIMBANK.telnet.port=2023\nzos.image.SIMBANK.webnet.port=2080\nzos.image.SIMBANK.telnet.tls=false\nzos.image.SIMBANK.credentials=SIMBANK\n\nzosmf.image.SIMBANK.servers=SIMBANK\nzosmf.server.SIMBANK.image=SIMBANK\nzosmf.server.SIMBANK.port=2040\nzosmf.server.SIMBANK.https=false\n</code></pre> </li> <li> <p>Edit a file called <code>credentials.properties</code> in your <code>.galasa</code> folder. Credentials that are held in this file are used by Galasa tests, for example to pass credentials to the application being tested. Storing values in this file avoids the need to hard-code credentials inside a test class, enabling the test to run in different environments without changing any test code. The following example properties enable the provided Galasa SimBank tests to run on your machine:</p> <pre><code>secure.credentials.SIMBANK.username=IBMUSER\nsecure.credentials.SIMBANK.password=SYS1\n</code></pre> </li> </ol>"},{"location":"docs/running-simbank-tests/running-simbank-tests-cli-offline/#running-the-simbank-ivt-test-class-by-using-the-cli","title":"Running the SimBank IVT test class by using the CLI","text":"<p>The SimBank tests are located in the <code>maven</code> directory of the <code>isolated.zip</code> downloadable file. Complete the following steps to run the SimBankIVT test that is provided with Galasa. The following example uses SimBank OBR version <code>0.42.0</code>.</p> <p>Remember to initialise your local environment by running the <code>galasactl local init</code> command and to start the SimPlatform server by running the <code>run-simplatform.sh</code> script, as described in the Running Galasa SimBank using the CLI offline documentation.</p> <p>You are now ready to run a local Galasa test offline with just the contents of the zipped distribution.</p> <ol> <li> <p>Open a terminal and run the SimBankIVT test locally by using the following example command, remembering to update the <code>--localMaven</code> flag value to the location of the <code>maven</code> directory that is provided as part of the isolated.zip  file that you downloaded:     On Mac or Unix:</p> <pre><code>galasactl runs submit local --log - \\\n--obr mvn:dev.galasa/dev.galasa.simbank.obr/0.42.0/obr \\\n--class dev.galasa.simbank.tests/dev.galasa.simbank.tests.SimBankIVT \\\n--localMaven file:////Users/youruserid/Downloads/isolated/maven\n</code></pre> <p>On Windows (Powershell):</p> <pre><code>galasactl runs submit local --log - `\n--obr mvn:dev.galasa/dev.galasa.simbank.obr/0.42.0/obr `\n--class dev.galasa.simbank.tests/dev.galasa.simbank.tests.SimBankIVT `\n--localMaven file:////Users/youruserid/Downloads/isolated/maven\n</code></pre> <p>Note that the <code>--localMaven</code> flag refers to the <code>maven</code> directory inside the isolated.zip as these are all the Maven artifacts that should be needed to run the test, including the <code>dev.galasa.simbank.obr</code> artifact which is passed to the <code>--obr</code> flag and the <code>SimBankIVT</code> test class which is passed to <code>class</code>.</p> </li> <li> <p>The <code>SimBankIVT</code> test class runs, and the terminal displays its progress through to completion, with an Exit code of <code>0</code>.</p> </li> <li> <p>View the results of the test runs in your terminal. You can also view results in the <code>run.log</code> file in the result archive store (RAS). 3270 terminal interactions can be viewed in the <code>artifacts</code> directory in the RAS. Find out more in the Viewing test results locally documentation. </p> </li> </ol> <p>To run other SimBank tests, for example <code>BasicAccountCreditTest</code>, replace the test class name in the <code>--class</code> parameter. Remember to update the <code>--localMaven</code> flag value to the location of the <code>maven</code> directory as well. For example: </p> <p>On Mac or Unix:</p> <pre><code>galasactl runs submit local --log - \\\n--obr mvn:dev.galasa/dev.galasa.simbank.obr/0.42.0/obr \\\n--class dev.galasa.simbank.tests/dev.galasa.simbank.tests.BasicAccountCreditTest \\\n--localMaven file:////Users/youruserid/Downloads/isolated/maven\n</code></pre> <p>On Windows (Powershell):</p> <pre><code>galasactl runs submit local --log - `\n--obr mvn:dev.galasa/dev.galasa.simbank.obr/0.42.0/obr `\n--class dev.galasa.simbank.tests/dev.galasa.simbank.tests.BasicAccountCreditTest `\n--localMaven file:////Users/youruserid/Downloads/isolated/maven\n</code></pre>"},{"location":"docs/running-simbank-tests/running-simbank-tests-cli-offline/#next-steps","title":"Next steps","text":"<p>Explore the SimBankIVT test and the other SimBank tests in the Exploring Galasa SimBank sections. Follow the flow of logic in these classes and understand more about the Java that is used to create them, including how to use Galasa annotations and review documented test methods.</p>"},{"location":"docs/running-simbank-tests/running-simbank-tests-cli/","title":"Running the SimBank tests using the CLI","text":"<p>You can explore Galasa further with Galasa Simbank. Galasa Simbank is a simulated bank application that showcases Galasa's functionality within an application. Galasa SimBank comes with a selection of prepared Galasa tests:</p> <ul> <li>A basic Installation Verification Test (IVT) which logs on to SimBank  - <code>SimBankIVT.java</code>.</li> <li>A test that updates an account using web services and examines the changes with 3270 screens - <code>BasicAccountCreditTest.java</code>.</li> <li>A test that uses a provisioned account object to perform the same test as <code>BasicAccountCreditTest.java</code> in an improved test design - <code>ProvisionedAccountCreditTests.java</code>.</li> <li>A test that exercises the z/OS Batch Manager by simulating the submission of a JCL job to add a number of accounts to the SimBank system - <code>BatchAccountsOpenTest.java</code>.</li> </ul> <p>The following sections explain how to run the <code>SimBankIVT</code> test class by using the CLI. Make sure that you have installed the Galasa CLI tool and Java version 11 JDK, and have set the JAVA_HOME environment variable, as described in the CLI prerequisites online documentation. </p>"},{"location":"docs/running-simbank-tests/running-simbank-tests-cli/#updating-the-overrides-and-credentials-property-files","title":"Updating the overrides and credentials property files","text":"<p>In order to run the Galasa SimBanks tests you need to add some configuration information in the <code>overrides.properties</code> and <code>credentials.properties</code> files that were created when you initialised your Galasa home folder by running the <code>galasactl local init</code> command. Complete the following steps to edit the files:</p> <ol> <li> <p>Edit a file called <code>overrides.properties</code> in your <code>.galasa</code> folder so that it contains the following configuration properties. Configuration properties held in this file are used by Galasa tests at runtime. You can change the value of the properties that are set in this file to enable you to run tests against different configurations without changing the test code. The following example configuration properties enable the provided Galasa SimBank tests to run on your machine:</p> <pre><code>zos.dse.tag.SIMBANK.imageid=SIMBANK\nzos.dse.tag.SIMBANK.clusterid=SIMBANK\n\nsimbank.dse.instance.name=SIMBANK\nsimbank.instance.SIMBANK.zos.image=SIMBANK\n\nzos.image.SIMBANK.ipv4.hostname=127.0.0.1\nzos.image.SIMBANK.telnet.port=2023\nzos.image.SIMBANK.webnet.port=2080\nzos.image.SIMBANK.telnet.tls=false\nzos.image.SIMBANK.credentials=SIMBANK\n\nzosmf.image.SIMBANK.servers=SIMBANK\nzosmf.server.SIMBANK.image=SIMBANK\nzosmf.server.SIMBANK.port=2040\nzosmf.server.SIMBANK.https=false\n</code></pre> </li> <li> <p>Edit a file called <code>credentials.properties</code> in your <code>.galasa</code> folder. Credentials that are held in this file are used by Galasa tests, for example to pass credentials to the application being tested. Storing values in this file avoids the need to hard-code credentials inside a test class, enabling the test to run in different environments without changing any test code. The following example properties enable the provided Galasa SimBank tests to run on your machine:</p> <pre><code>secure.credentials.SIMBANK.username=IBMUSER\nsecure.credentials.SIMBANK.password=SYS1\n</code></pre> </li> </ol>"},{"location":"docs/running-simbank-tests/running-simbank-tests-cli/#running-the-simbank-ivt-test-class-by-using-the-cli","title":"Running the SimBank IVT test class by using the CLI","text":"<p>The SimBank tests are held in the Galasa simplatform repository in GitHub. To start running the tests you need to clone the repository, if you have not already done so. To find out how to clone the cli repository, follow the instruction in the Running Galasa SimBank online documentation.</p> <p>After cloning the repository, complete the following steps to run the SimBankIVT test that is provided with Galasa. The following example uses SimBank OBR version <code>0.42.0</code> and Galasa uber OBR version <code>0.42.0</code>.</p> <p>You can find the version of the <code>dev.galasa.simbank.obr</code> that you are using by looking in the <code>pom.xml</code> file in the <code>dev.galasa.simbank.obr</code> folder. The <code>dev.galasa.uber.obr</code> is the OBR that contains all the bundles that are needed for Galasa to work including Managers, any required dependencies, the framework, etc. The version of the <code>dev.galasa.uber.obr</code> depends on which version of Galasa you have installed.</p> <p>Remember to initialise your local environment by running the <code>galasactl local init</code> command. Note that the the following section describes how to run the <code>./build-locally.sh</code> and  <code>./run-locally.sh --server</code> scripts only in a Mac or Unix environment.</p> <ol> <li> <p>Open a terminal, navigate to your <code>simplatform</code> directory and run the <code>./build-locally.sh</code> script to build the code in both the simbank-tests and the simplaform-application directories.</p> </li> <li> <p>In another terminal run the <code>./run-locally.sh --server</code> script to start the simbank server inside a inside a local JVM. In a few seconds, the terminal responds with a series of initialization messages, which on Windows looks like:</p> <p><pre><code>2019-10-21 14:24:35 INFO dev.galasa.simplatform.main.Simplatform main Starting Simplatform ...\n2019-10-21 14:24:35 INFO dev.galasa.simplatform.db.Database setDerbyHome Setting Derby home to C:\\Users\\&lt;username&gt;\\AppData\\Local\\Temp\\galasaSimplatform1440125512154994774\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.saf.SecurityAuthorizationFacility &lt;init&gt; Creating SAF service\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.application.Bank accountExists Checking if account: 123456789 exists\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.application.Bank accountExists Account doesn't exist\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.application.Bank openAccount Creating account: 123456789\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.application.Bank accountExists Checking if account: 987654321 exists\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.application.Bank accountExists Account doesn't exist\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.application.Bank openAccount Creating account: 987654321\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.saf.SecurityAuthorizationFacility addUser Added user: IBMUSER\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.main.Simplatform main Loading services...\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.listener.Listener &lt;init&gt; Loading service: dev.galasa.simplatform.listener.WebServiceListener listening on port: 2080\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.listener.Listener &lt;init&gt; Loading service: dev.galasa.simplatform.listener.TelnetServiceListener listening on port: 2023\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.main.Simplatform main ... services loaded\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.main.Simplatform main Starting Derby Network server....\n2019-10-21 14:24:37 INFO dev.galasa.simplatform.main.Simplatform main ... Derby Network server started on port 2027\n2019-10-21 14:24:37 INFO dev.galasa.simplatform.main.Simplatform main ... Simplatform started\n</code></pre> If you are a Mac or Linux user, the messages will be almost identical.</p> </li> <li> <p>In the terminal in which you ran the <code>./build-locally.sh</code> script, run the following command to run the SimBankIVT test:     On Mac or Unix:</p> <pre><code>galasactl runs submit local --log - \\\n--obr mvn:dev.galasa/dev.galasa.simbank.obr/0.42.0/obr \\\n--class dev.galasa.simbank.tests/dev.galasa.simbank.tests.SimBankIVT \n</code></pre> <p>On Windows (Powershell):</p> <pre><code>galasactl runs submit local --log - `\n--obr mvn:dev.galasa/dev.galasa.simbank.obr/0.42.0/obr `\n--class dev.galasa.simbank.tests/dev.galasa.simbank.tests.SimBankIVT\n</code></pre> <p>where:</p> <ul> <li><code>--log</code> specifies that debugging information is directed somewhere, and the <code>-</code> means that it is sent to the console (stderr).</li> <li><code>--obr</code>  The <code>--obr</code> parameter specifies the Maven co-ordinates of the OBR jar file, in the format <code>mvn:groupId/artifactId/version/classifier</code>. The first instance specifies the OBR where the  CLI tool can find an OBR which refers to the bundle where the tests are stored. When running locally, all tests must exist in the OBR (or OBRs) that are passed to the tool. The second instance specifies the OBR containing  the bundles that are needed for Galasa to work (for example, Galasa Managers, required dependencies, and the Galasa framework).</li> <li><code>--class</code> specifies which test class to run. The string is in the format of <code>&lt;osgi-bundle-id&gt;/&lt;fully-qualified-java-class&gt;</code>.</li> </ul> </li> <li> <p>The <code>SimBankIVT</code> test class runs, and the terminal displays its progress through to completion, with an Exit code of <code>0</code>.</p> </li> <li> <p>View the results of the test runs in your terminal. You can also view results in the <code>run.log</code> file in the result archive store (RAS). 3270 terminal interactions can be viewed in the <code>artifacts</code> directory in the RAS. Find out more in the Viewing test results locally documentation. </p> </li> </ol> <p>To run other SimBank tests, for example <code>BasicAccountCreditTest</code>, replace the test class name in the <code>--class</code> parameter. For example: </p> <p>On Mac or Unix:</p> <pre><code>galasactl runs submit local --log - \\\n--obr mvn:dev.galasa/dev.galasa.simbank.obr/0.42.0/obr \\\n--class dev.galasa.simbank.tests/dev.galasa.simbank.tests.BasicAccountCreditTest \n</code></pre> <p>On Windows (Powershell):</p> <pre><code>galasactl runs submit local --log - `\n--obr mvn:dev.galasa/dev.galasa.simbank.obr/0.42.0/obr `\n--class dev.galasa.simbank.tests/dev.galasa.simbank.tests.BasicAccountCreditTest\n</code></pre>"},{"location":"docs/running-simbank-tests/running-simbank-tests-cli/#next-steps","title":"Next steps","text":"<p>Explore the SimBankIVT test and the other SimBank tests in the Exploring Galasa SimBank sections. Follow the flow of logic in these classes and understand more about the Java that is used to create them, including how to use Galasa annotations and review documented test methods.</p>"},{"location":"docs/running-simbank-tests/simbank-IVT/","title":"The SimBank Installation Verification Test","text":"<p>This basic test logs on to Galasa SimBank and examines an account. The SimBank IVT test is available in the Galasa simplatform repository in GitHub. </p>"},{"location":"docs/running-simbank-tests/simbank-IVT/#exploring-the-simbankivt-test-class","title":"Exploring the <code>SimBankIVT</code> test class","text":"<p>Even without any prior knowledge of Galasa, if you know a little Java, you will have no trouble understanding the flow of logic in <code>SimBankIVT.java</code> and the <code>SimBankIVT</code> test class.</p> <p>The class is first annotated with <code>@Test</code> - informing the framework that a method or (as in this case) a class is a test.</p> <p>Next at the beginning of the test class proper, several Galasa Managers are declared via annotations, together with their corresponding public interfaces - <code>@ZosImage</code>, <code>@Zos3270Terminal</code> and so on. Using the <code>imageTag=\"SIMBANK\"</code> argument with <code>@ZosImage</code> allows you to associate an instance of a Manager with a set of configuration properties. In this example, the associated configuration properties are the ones that are set in the <code>overrides.properties</code> file, as described in the Exploring the SimBank tests online and Exploring the SimBank tests offline documentation.</p> <pre><code>@Test\npublic class SimBankIVT{\n\n    @ZosImage(imageTag=\"SIMBANK\")\n    public IZosImage image;\n\n    @Zos3270Terminal(imageTag=\"SIMBANK\")\n    public ITerminal terminal;\n\n    @ArtifactManager\n    public IArtifactManager artifacts;\n\n    @HttpClient\n    public IHttpClient client;\n\n    @CoreManager\n    public ICoreManager coreManager;\n</code></pre> <p>Galasa will instantiate these objects - they are indeed, the Managers mentioned earlier.</p> <p>Note that as a general principle, any objects, classes or methods that you wish to interact with the Galasa test framework should be declared as <code>public</code>.</p> <p>Next, a test method <code>testNotNull</code> is defined - when executed, this tests and demonstrates that Galasa has started the required Managers.</p> <pre><code>@Test\npublic void testNotNull() {\n    //Check all objects loaded\n    assertThat(terminal).isNotNull();\n    assertThat(artifacts).isNotNull();\n    assertThat(client).isNotNull();\n}\n</code></pre> <p>Each line includes an assertion that states that an instance of a Manager should not be <code>null</code>. If one or more of these assertions is not true, then the test will fail, alerting you to the fact that one or more Managers has not been initialized correctly.</p> <p>Finally, the main test method itself - <code>checkBankIsAvailable()</code> - is defined, and calls <code>coreManager.registerConfidentialText</code> to register the application password to the confidential text filtering service. This service replaces occurrences of registered phrases from log output with a numbered shield - e.g. <code>*1**</code>. In a generated log, a completed password field might look like:</p> <pre><code>Userid ===&gt; IBMUSER  Password ===&gt; *1**\n</code></pre> <p>Then, a sequence of method calls chained off <code>terminal.waitForKeyboard()</code> enables Galasa to sign into SimBank using its session manager. It demonstrates using the following methods:</p> <ul> <li><code>positionCursorToFieldContaining(&lt;string&gt;)</code> - which as its name implies, positions the cursor to a field containing a specific label</li> <li><code>tab()</code> - which presses the TAB key in the application under test</li> <li><code>type(&lt;string&gt;)</code> - where a sequence of characters are typed into an input field</li> <li><code>enter()</code> - where the ENTER key is pressed</li> </ul> <pre><code>@Test\npublic void checkBankIsAvailable() throws Exception {\n        //Logon through the session manager\n        terminal.waitForKeyboard()\n            .positionCursorToFieldContaining(\"Userid\").tab().type(\"IBMUSER\")\n            .positionCursorToFieldContaining(\"Password\").tab().type(\"SYS1\")\n            .enter().waitForKeyboard();\n}\n</code></pre> <p>These methods are available via the imported <code>Zos3270Terminal</code> Manager, which was written by a specialist and made available by the Galasa framework to anyone who needs to write a test that uses such an abstraction. It supports a fluent style, allowing its methods to be chained in a natural and easily-understandable fashion.</p> <p>Two <code>assertThat()</code> assertions then confirm that the test has arrived on its intended screen, verified by the presence of a single occurrence of each of the strings SIMPLATFORM MAIN MENU and BANKTEST.</p> <pre><code>//Assert that the session manager has a bank session available\nassertThat(terminal.retrieveScreen()).containsOnlyOnce(\"SIMPLATFORM MAIN MENU\");\nassertThat(terminal.retrieveScreen()).containsOnlyOnce(\"BANKTEST\");\n</code></pre> <p>The test proceeds to open the banking application, pressing the PF1 key and clearing the screen, before tabbing to an input field and entering the name of the BANK transaction:</p> <pre><code>//Open banking application\nterminal.pf1().waitForKeyboard()\n    .clear().waitForKeyboard()\n    .tab().type(\"bank\").enter().waitForKeyboard();\n</code></pre> <p>Finally, three assertions confirm that the test has arrived at its destination screen.</p> <pre><code>//Assert that the bank menu is showing\nassertThat(terminal.retrieveScreen()).containsOnlyOnce(\"Options     Description        PFKey \");\nassertThat(terminal.retrieveScreen()).containsOnlyOnce(\"BROWSE      Browse Accounts    PF1\");\nassertThat(terminal.retrieveScreen()).containsOnlyOnce(\"TRANSF      Transfer Money     PF4\");\n</code></pre> <p>If any assertion failed, then the whole test would be marked as a failed test.</p>"},{"location":"docs/running-simbank-tests/simbank-cli-offline/","title":"Exploring Galasa SimBank offline","text":"<p>SimBank applications and a set of sample SimBank tests are located in the <code>maven</code> directory of the <code>isolated.zip</code> downloadable file. </p> <p>To start exploring the Galasa Simbank application and to run the sample SimBank tests by using the Galasa CLI, you need to complete the following steps:</p> <ol> <li>Start the Simplatform server by running the <code>run-simplatform.sh</code> script provided in the <code>isolated.zip</code>. <ol> <li>Navigate to the directory of the zipped distribution that you downloaded, for example, <code>~/Downloads/isolated</code>. A <code>run-simplatform.sh</code> script is available within the directory. This script starts the Simplatform server which is required to run the SimBank tests.</li> <li>Set execute permission on the script by running the <code>chmod +x run-simplatform.sh</code> command in the directory containing the <code>run-simplatform.sh</code> script.</li> <li>Run the script in server mode by using the following example command, remembering to set the <code>--location</code> flag to the location of the galasa-simplatform artefact in the <code>isolated.zip</code> file that you downloaded. For example, <code>~/Downloads/isolated/maven/dev/galasa</code>. <pre><code>./run-simplatform.sh --server --location ~/Downloads/isolated/maven/dev/galasa\n</code></pre> In a few seconds, the terminal window displays a series of initialization messages, which on Windows looks like: <pre><code>2019-10-21 14:24:35 INFO dev.galasa.simplatform.main.Simplatform main Starting Simplatform ...\n2019-10-21 14:24:35 INFO dev.galasa.simplatform.db.Database setDerbyHome Setting Derby home to C:\\Users\\&lt;username&gt;\\AppData\\Local\\Temp\\galasaSimplatform1440125512154994774\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.saf.SecurityAuthorizationFacility &lt;init&gt; Creating SAF service\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.application.Bank accountExists Checking if account: 123456789 exists\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.application.Bank accountExists Account doesn't exist\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.application.Bank openAccount Creating account: 123456789\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.application.Bank accountExists Checking if account: 987654321 exists\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.application.Bank accountExists Account doesn't exist\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.application.Bank openAccount Creating account: 987654321\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.saf.SecurityAuthorizationFacility addUser Added user: IBMUSER\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.main.Simplatform main Loading services...\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.listener.Listener &lt;init&gt; Loading service: dev.galasa.simplatform.listener.WebServiceListener listening on port: 2080\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.listener.Listener &lt;init&gt; Loading service: dev.galasa.simplatform.listener.TelnetServiceListener listening on port: 2023\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.main.Simplatform main ... services loaded\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.main.Simplatform main Starting Derby Network server....\n2019-10-21 14:24:37 INFO dev.galasa.simplatform.main.Simplatform main ... Derby Network server started on port 2027\n2019-10-21 14:24:37 INFO dev.galasa.simplatform.main.Simplatform main ... Simplatform started\n</code></pre> If you are a Mac or Linux user, the messages will be almost identical. The SimBank process has been launched, and is listening on port 2023 for Telnet connections, on port 2080 for web services connections and on port 2027 for Derby SQL connections. Neither web services or Derby connections are explored further in this section.</li> </ol> </li> </ol>"},{"location":"docs/running-simbank-tests/simbank-cli-offline/#manually-exploring-the-simbank-application","title":"Manually exploring the SimBank application","text":"<p>When you launch SimBank, its banking application listens on port 2023 for incoming client Telnet connections, offering an opportunity to first connect to it manually to review and understand the (simulated) transactions it supports, before subjecting it to Galasa's provided tests.</p>"},{"location":"docs/running-simbank-tests/simbank-cli-offline/#logging-in-to-the-simulated-application","title":"Logging in to the simulated application","text":"<ol> <li>With the Galasa SimBank component still running, configure your 3270 terminal emulator to access port 2023 of localhost (or IP address 127.0.0.1 if the localhost alias has not been set up) via the Telnet protocol. No SSL configuration is required.</li> <li> <p>Connect to the listening Telnet service with your 3270 emulator and review the logon screen:</p> <p></p> </li> <li> <p>Ensure that the cursor is in the <code>Userid</code> field - if it is not, use the TAB key to position it:</p> <p> </p> </li> <li> <p>Enter the userid <code>IBMUSER</code></p> <p> </p> </li> <li> <p>Press TAB to move the cursor into the <code>Password</code> field, type the password <code>SYS1</code> and press your 3270 terminal emulator's ENTER key to logon and transfer to the SimBank main menu:</p> <p> </p> <p>Depending on your 3270 terminal emulator, its ENTER key may not be mapped to the physical ENTER key on your computer. For example, on PCOMM, by default, the ENTER key is mapped to the host machine's right CTRL key. If you are unsure about this, review your terminal emulator's documentation.</p> </li> <li> <p>Press PF1:</p> <p> </p> </li> <li> <p>Press your 3270 terminal emulator's CLEAR SCREEN key.</p> </li> <li> <p>Enter the transaction name <code>BANK</code> and press your 3270 terminal emulator's ENTER key once more to get to the SimBank main menu:</p> <p> </p> </li> </ol> <p>As you have been progressing through this process, selected events are logged to your terminal:</p> <pre><code>2019-08-16 09:26:39 INFO dev.galasa.simplatform.t3270.screens.AbstractScreen buildScreen Building Screen: SessionManagerLogon\n2019-08-16 10:26:08 INFO dev.galasa.simplatform.saf.SecurityAuthorizationFacility authenticate User: IBMUSER authenticated\n2019-08-16 10:26:08 INFO dev.galasa.simplatform.t3270.screens.AbstractScreen buildScreen Building Screen: SessionManagerMenu\n2019-08-16 10:30:10 INFO dev.galasa.simplatform.t3270.screens.AbstractScreen buildScreen Building Screen: CICSGoodMorning\n2019-08-16 10:36:19 INFO dev.galasa.simplatform.t3270.screens.AbstractScreen buildScreen Building Screen: CICSClearScreen\n2019-08-16 10:38:54 INFO dev.galasa.simplatform.t3270.screens.AbstractScreen buildScreen Building Screen: BankMainMenu\n</code></pre> <p>This is an example of log output that can be useful when running tests.</p>"},{"location":"docs/running-simbank-tests/simbank-cli-offline/#browsing-account-information","title":"Browsing account information","text":"<ol> <li>From the SimBank main menu, press PF1, taking you to the account menu screen.</li> <li> <p>Press TAB until the cursor is in the <code>Account Number</code> field, enter <code>123456789</code> and press ENTER.      The account details are populated and it is apparent that account number 123456789 is 56.72 in credit.</p> <p></p> </li> <li> <p>Press PF3 to return to the account menu screen.</p> </li> </ol>"},{"location":"docs/running-simbank-tests/simbank-cli-offline/#transferring-funds-between-accounts","title":"Transferring funds between accounts","text":"<ol> <li>From the SimBank main menu, press PF4, taking you to the SimBank transfer menu.</li> <li>Press TAB until the cursor is in the <code>Transfer from Account Number</code> field and enter <code>123456789</code>.</li> <li>Press TAB until the cursor is in the <code>Transfer to Account Number</code> field and enter <code>987654321</code>.</li> <li> <p>Press TAB until the cursor is in the <code>Transfer Amount</code> field and enter <code>1</code></p> <p></p> </li> <li> <p>Press ENTER - a <code>Transfer Successful</code> message appears. A log message is also written to the terminal:</p> <pre><code>2019-08-16 13:50:53 INFO dev.galasa.simplatform.application.Bank transferMoney Transfering  1.0 from account: 123456789 to account: 987654321\n</code></pre> </li> </ol> <p>Press PF3 and once again browse the 123456789 account as described previously to verify that its total credit has decreased by the transferred 1.00, and that the 987654321 account has increased by the same amount.</p> <p>Note that SimBank also offers a web services interface on port 2080, and although it is not exercised in this topic, it is used by two of the provided tests - <code>BasicAccountCreditTest.java</code> and <code>ProvisionedAccountCreditTests.java</code>.</p> <p>Having explored SimBank manually, it's a good time to run some or all of a small collection of automated tests that are provided with SimBank itself - to start, choose Running the supplied SimBank tests offline.</p>"},{"location":"docs/running-simbank-tests/simbank-cli/","title":"Launching Galasa SimBank online","text":"<p>SimBank applications and a set of sample SimBank tests are located in the Galasa simplatform repository in GitHub.  To start exploring the Galasa Simbank application and to run the sample SimBank tests by using the Galasa CLI, you need to complete the following steps:</p> <ol> <li>Clone the Galasa <code>simplatform</code> repository on your machine by running the following command in a terminal in the directory on your local machine in which you want to clone the repository files:     <pre><code>git clone https://github.com/galasa-dev/simplatform.git\n</code></pre></li> <li>Run the <code>./build-locally.sh</code> script to build the code.</li> <li> <p>Run the <code>./run-locally.sh --server</code> script to start the simbank server inside a local JVM.     In a few seconds, the terminal window displays a series of initialization messages, which on Windows looks like:     <pre><code>2019-10-21 14:24:35 INFO dev.galasa.simplatform.main.Simplatform main Starting Simplatform ...\n2019-10-21 14:24:35 INFO dev.galasa.simplatform.db.Database setDerbyHome Setting Derby home to C:\\Users\\&lt;username&gt;\\AppData\\Local\\Temp\\galasaSimplatform1440125512154994774\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.saf.SecurityAuthorizationFacility &lt;init&gt; Creating SAF service\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.application.Bank accountExists Checking if account: 123456789 exists\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.application.Bank accountExists Account doesn't exist\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.application.Bank openAccount Creating account: 123456789\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.application.Bank accountExists Checking if account: 987654321 exists\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.application.Bank accountExists Account doesn't exist\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.application.Bank openAccount Creating account: 987654321\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.saf.SecurityAuthorizationFacility addUser Added user: IBMUSER\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.main.Simplatform main Loading services...\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.listener.Listener &lt;init&gt; Loading service: dev.galasa.simplatform.listener.WebServiceListener listening on port: 2080\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.listener.Listener &lt;init&gt; Loading service: dev.galasa.simplatform.listener.TelnetServiceListener listening on port: 2023\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.main.Simplatform main ... services loaded\n2019-10-21 14:24:36 INFO dev.galasa.simplatform.main.Simplatform main Starting Derby Network server....\n2019-10-21 14:24:37 INFO dev.galasa.simplatform.main.Simplatform main ... Derby Network server started on port 2027\n2019-10-21 14:24:37 INFO dev.galasa.simplatform.main.Simplatform main ... Simplatform started\n</code></pre></p> <p>If you are a Mac or Linux user, the messages will be almost identical.</p> </li> <li> <p>The SimBank process has been launched, and is listening on port 2023 for Telnet connections, on port 2080 for web services connections and on port 2027 for Derby SQL connections. Neither web services or Derby connections are explored further in this section.</p> </li> </ol>"},{"location":"docs/running-simbank-tests/simbank-cli/#manually-exploring-the-simbank-application","title":"Manually exploring the SimBank application","text":"<p>When you launch SimBank, its banking application listens on port 2023 for incoming client Telnet connections, offering an opportunity to first connect to it manually to review and understand the (simulated) transactions it supports, before subjecting it to Galasa's provided tests.</p>"},{"location":"docs/running-simbank-tests/simbank-cli/#logging-in-to-the-simulated-application","title":"Logging in to the simulated application","text":"<ol> <li>With the Galasa SimBank component still running, configure your 3270 terminal emulator to access port 2023 of localhost (or IP address 127.0.0.1 if the localhost alias has not been set up) via the Telnet protocol. No SSL configuration is required.</li> <li> <p>Connect to the listening Telnet service with your 3270 emulator and review the logon screen:</p> <p></p> </li> <li> <p>Ensure that the cursor is in the <code>Userid</code> field - if it is not, use the TAB key to position it:</p> <p> </p> </li> <li> <p>Enter the userid <code>IBMUSER</code></p> <p> </p> </li> <li> <p>Press TAB to move the cursor into the <code>Password</code> field, type the password <code>SYS1</code> and press your 3270 terminal emulator's ENTER key to logon and transfer to the SimBank main menu:</p> <p> </p> <p>Depending on your 3270 terminal emulator, its ENTER key may not be mapped to the physical ENTER key on your computer. For example, on PCOMM, by default, the ENTER key is mapped to the host machine's right CTRL key. If you are unsure about this, review your terminal emulator's documentation.</p> </li> <li> <p>Press PF1:</p> <p> </p> </li> <li> <p>Press your 3270 terminal emulator's CLEAR SCREEN key.</p> </li> <li> <p>Enter the transaction name <code>BANK</code> and press your 3270 terminal emulator's ENTER key once more to get to the SimBank main menu:</p> <p> </p> </li> </ol> <p>As you have been progressing through this process, selected events are logged to your terminal:</p> <pre><code>2019-08-16 09:26:39 INFO dev.galasa.simplatform.t3270.screens.AbstractScreen buildScreen Building Screen: SessionManagerLogon\n2019-08-16 10:26:08 INFO dev.galasa.simplatform.saf.SecurityAuthorizationFacility authenticate User: IBMUSER authenticated\n2019-08-16 10:26:08 INFO dev.galasa.simplatform.t3270.screens.AbstractScreen buildScreen Building Screen: SessionManagerMenu\n2019-08-16 10:30:10 INFO dev.galasa.simplatform.t3270.screens.AbstractScreen buildScreen Building Screen: CICSGoodMorning\n2019-08-16 10:36:19 INFO dev.galasa.simplatform.t3270.screens.AbstractScreen buildScreen Building Screen: CICSClearScreen\n2019-08-16 10:38:54 INFO dev.galasa.simplatform.t3270.screens.AbstractScreen buildScreen Building Screen: BankMainMenu\n</code></pre> <p>This is an example of log output that can be useful when running tests.</p>"},{"location":"docs/running-simbank-tests/simbank-cli/#browsing-account-information","title":"Browsing account information","text":"<ol> <li>From the SimBank main menu, press PF1, taking you to the account menu screen.</li> <li> <p>Press TAB until the cursor is in the <code>Account Number</code> field, enter <code>123456789</code> and press ENTER.      The account details are populated and it is apparent that account number 123456789 is 56.72 in credit.</p> <p></p> </li> <li> <p>Press PF3 to return to the account menu screen.</p> </li> </ol>"},{"location":"docs/running-simbank-tests/simbank-cli/#transferring-funds-between-accounts","title":"Transferring funds between accounts","text":"<ol> <li>From the SimBank main menu, press PF4, taking you to the SimBank transfer menu.</li> <li>Press TAB until the cursor is in the <code>Transfer from Account Number</code> field and enter <code>123456789</code>.</li> <li>Press TAB until the cursor is in the <code>Transfer to Account Number</code> field and enter <code>987654321</code>.</li> <li> <p>Press TAB until the cursor is in the <code>Transfer Amount</code> field and enter <code>1</code></p> <p></p> </li> <li> <p>Press ENTER - a <code>Transfer Successful</code> message appears. A log message is also written to the terminal:</p> <pre><code>2019-08-16 13:50:53 INFO dev.galasa.simplatform.application.Bank transferMoney Transfering  1.0 from account: 123456789 to account: 987654321\n</code></pre> </li> </ol> <p>Press PF3 and once again browse the 123456789 account as described previously to verify that its total credit has decreased by the transferred 1.00, and that the 987654321 account has increased by the same amount.</p> <p>Note that SimBank also offers a web services interface on port 2080, and although it is not exercised in this topic, it is used by two of the provided tests - <code>BasicAccountCreditTest.java</code> and <code>ProvisionedAccountCreditTests.java</code>.</p> <p>Having explored SimBank manually, it's a good time to run some or all of a small collection of automated tests that are provided with SimBank itself - to start, choose Running the supplied SimBank tests online.</p>"},{"location":"docs/running-simbank-tests/web-app-integration-test/","title":"WebAppIntegrationTest","text":"<p>The <code>WebAppIntegrationTest</code> is somewhat different to the previously described Galasa SimBank tests. It shows how you can use Galasa to test a hybrid cloud application that uses a mix of platforms and technologies. A mix of technologies makes end-to-end integration testing complicated. Use the <code>WebAppIntegrationTest</code> to help understand how Galasa simplifies integration testing in such an environment. The SimBank Web App Integration test is available in the Galasa simplatform repository in GitHub.</p>"},{"location":"docs/running-simbank-tests/web-app-integration-test/#about-the-webappintegrationtest","title":"About the WebAppIntegrationTest","text":"<p>This test performs a similar function to the <code>ProvisionedAccountCreditTest.java</code> but includes the use of the Selenium Manager. The Selenium Manager enables the test to run Selenium WebDrivers which drive the SimBank Web Application that is provided with Galasa SimBank. </p> <p>The <code>WebAppIntegrationTest</code> performs the following functions:</p> <ul> <li>Generates a random account number </li> <li>Uses a 3270 application to ensure that this account number does not exist in SimBank</li> <li>If the account does not exist, invokes a batch job to create the account</li> <li>Uses Selenium to drive the SimBank Web Application to credit the account with some funds</li> <li>Runs the 3270 application again to validate that the expected funds were added to the account</li> </ul>"},{"location":"docs/running-simbank-tests/web-app-integration-test/#running-the-webappintegrationtest","title":"Running the WebAppIntegrationTest","text":"<p>As the <code>WebAppIntegrationTest</code> is slightly different to the other tests, there's a bit more set up to do than for the other supplied SimBank tests. </p> <p>The test is still run locally but is designed to help you to understand how to set the properties that enable the test to run in a Galasa Ecosystem. When running the <code>WebAppIntegrationTest</code> locally, use the localhost setting <code>127.0.0.1</code> to ensure that only the local machine is able to connect. You could then run the test in automation by simply updating your CPS properties to the relevant resource definition. For example, to use a remote server as a Docker Engine, simply change the default engine from <code>LOCAL</code> to <code>REMOTE</code> and specify the appropriate connection details. No change is required to the test code, only to the CPS properties file.</p> <p>The test uses the Selenium Manager, which in turn is dependent on the Docker Manager. Use the following sections to help you to understand how to configure your environment to work with the Selenium Manager and Docker Manager. </p>"},{"location":"docs/running-simbank-tests/web-app-integration-test/#using-the-selenium-manager","title":"Using the Selenium Manager","text":"<p>To use the Selenium Manager you must have a web browser, for example,  Firefox or Chrome installed as well as a browser driver, for example, GeckoDriver or ChromeDriver. In this example, Firefox and GeckoDriver are used. </p> <p>You can download GeckoDriver from GitHub. </p> <p>You must define the default and local driver properties in the CPS, as shown in the following example:</p> <pre><code>selenium.default.driver=FIREFOX\nselenium.local.driver.FIREFOX.path=&lt;path/to/geckodriver&gt;\n</code></pre>"},{"location":"docs/running-simbank-tests/web-app-integration-test/#using-the-docker-manager","title":"Using the Docker Manager","text":"<p>The Selenium Manager has a dependency on the Docker Manager in order to run. Some set up is required for the Docker Manager in the CPS properties file. To configure the Docker Manager, set the following CPS properties:  </p> <pre><code>docker.dse.engine.PRIMARY=LOCAL\ndocker.default.engines=LOCAL\ndocker.engine.LOCAL.hostname=127.0.0.1\ndocker.engine.LOCAL.port=2375\ndocker.engine.LOCAL.max.slots=10\n</code></pre> <p>These properties allow local test runs to access the local Docker Engine when the TCP port of the local Docker Engine is enabled.</p> <p>Galasa interacts with Docker by using the Docker Engine API. In a typical infrastructure, you would expose the socket to TCP traffic. As we are running the test locally in this example, a temporary bridging mechanism is used to allow access to the socket via a container. This set up makes it easy to control the opening and closing of the socket to accept traffic. </p> <p>After updating the CPS properties for the Docker Manager, run the following terminal commands to open a TCP socket for accessing the Docker Engine API:</p> <pre><code>docker pull alpine/socat\ndocker run -d -p 127.0.0.1:2375:2375 -v /var/run/docker.sock:/var/run/docker.sock alpine/socat tcp-listen:2375,fork,reuseaddr unix-connect:/var/run/docker.sock\n</code></pre> <p>Although this configuration might see a little strange when running locally, the idea is to make the example consistent with the configuration that would be undertaken if contacting a remote Docker server in a Galasa Ecosystem.</p>"},{"location":"docs/running-simbank-tests/web-app-integration-test/#building-a-docker-image","title":"Building a Docker image","text":"<p>Complete the following steps to build a Docker image called <code>simbank-webapp</code> to use in the test. We plan to automate these manual steps in a future release. </p> <ol> <li>If you have not done so already, clone the Galasa <code>simplatform</code> repository on your machine by running the following command in the directory on your local machine in which you want to clone the repository files:      <pre><code>git clone https://github.com/galasa-dev/simplatform.git\n</code></pre></li> <li>Build the image and test that the container is working correctly by running the following commands. For the commands to work, the terminal must be running in the same directory as the one that contains the Dockerfile. The Dockerfile is located in the galasa-simplatform-webapp directory in the Galasa <code>simplatform</code> repository.     <pre><code>mvn install\ndocker image build -t simbank-webapp .\ndocker run -p 8080:8080 -d simbank-webapp\n</code></pre></li> <li>Access the Galasa SimBank web application from <code>http://localhost:8080/galasa-simplatform-webapp/simbank</code></li> </ol>"},{"location":"docs/running-simbank-tests/web-app-integration-test/#troubleshooting","title":"Troubleshooting","text":"<p>If the container is not working correctly, for example, compilation and runtime errors are returned, check the version of tomcat in the Dockerfile. You might need to edit the tomcat version to a version that is compatible with Java 11, for example, <code>FROM tomcat:8.5.82-jre11-temurin</code>.</p>"},{"location":"docs/running-simbank-tests/web-app-integration-test/#walkthrough-webappintegrationtest","title":"Walkthrough - WebAppIntegrationTest","text":"<p>To run the test, follow the same steps as for <code>SimBankIVT.java</code> but using the test class name <code>WebAppIntegrationTest</code> instead of <code>SimBankIVT</code>. </p> <p>For brevity, package declarations and imports are omitted in the following walkthrough.</p> <p>First, some objects are declared and then the <code>provisionAccount()</code> method is specified: </p> <pre><code>String accountNumber = provisionAccount(openingBalance);\nlogger.info(\"Account number selected: \" + accountNumber);\n</code></pre> <p>The <code>provisionAccount()</code> method generates a random account number to use in the test, using a 3270 SimBank terminal to ensure that the generated account does not exist:</p> <pre><code>public String provisionAccount(BigDecimal openingBalance) throws Exception {\n        // Generate a random account number\n        String accountNumber =  generateRandomAccountNumber();\n        boolean searching = true;\n\n        // A looped search to ensure the account number is unique.\n        while (searching) {\n            if (doesAccountExist(accountNumber)) {\n                accountNumber =  generateRandomAccountNumber();\n            } else {\n                searching = false;\n            }\n        }\n</code></pre> <p>The account is opened and credited by using a z/OS Batch Job. When the amount to be credited is set, a HashMap is prepared with the parameters for the subsequent web services call:</p> <pre><code>HashMap&lt;String, Object&gt; parameters = new HashMap&lt;&gt;();\nparameters.put(\"CONTROL\", \"ACCOUNT_OPEN\");\nparameters.put(\"DATAIN\", accountNumber+\",20-24-09,\"+openingBalance);\n</code></pre> <p>The following code enables Selenium to drive the SimBank Web Application to credit the account with some funds:</p> <pre><code>public IWebPage completeWebFormAndSubmit(String accountNumber, String creditAmount)\n        throws SimBankManagerException, WebDriverException {\n    String webpage = webApp.getHostName() + \"/galasa-simplatform-webapp/simbank\";\n    // Selenium Options to run the driver headlessly\n    IFirefoxOptions options = webDriver.getFirefoxOptions();\n\n\n    // Open the Simbank Web Application in a Firefox browser\n    IWebPage page = webDriver.allocateWebPage(webpage, options);\n    page.takeScreenShot();\n    assertThat(page.getTitle()).containsOnlyOnce(\"Simbank\");\n\n    // Fill in the Form and submit\n    page.sendKeysToElementById(\"accnr\", accountNumber);\n    page.sendKeysToElementById(\"amount\", creditAmount);\n    page.takeScreenShot();\n    page.clickElementById(\"submit\");\n</code></pre> <p>Checks are made to ensure that the web application response is as expected and that the data is updated throughout the application, including the backend database:</p> <pre><code>assertThat(page.waitForElementById(\"good\").getText()).contains(\"You have successfully completed the transaction\");\npage.quit();\nlogger.info(\"Response from servlet OK. Now validating the data has been updated in the database\");\nBigDecimal balance = retrieveAccountBalance(accountNumber).setScale(2);\nassertThat(balance).isEqualTo(openingBalance.add(creditAmount));\nlogger.info(\"Test method complete\");\n</code></pre> <p>At the end of the test, the Selenium Manager automatically closes the WebDriver which removes the web page.</p>"},{"location":"docs/running-simbank-tests/writing-a-simbank-test/","title":"Writing your own SimBank test","text":"<p>Now you have run through the tests provided as part of Galasa SimBank, you can have a go at writing your own test. This requires you to use a 3270 terminal emulator to connect with SimBank and perform a menu-driven transfer between two accounts. Why not attempt to follow the instructions without looking at the code? You can use the provided test examples as a reference and for inspiration. </p> <p>To write and run simple Galasa tests, you need a modest knowledge of Java. Even if your application under test is written in a completely different language, you need to understand enough Java to be able to create all of your required tests. The Manager installation verification tests (IVTs) that are stored in GitHub provide useful reference material and can be used to aid understanding of how to  structure a test.</p> <p>Don't forget that whenever you create a test, or modify an existing one, you need to run a clean install in Maven to ensure that the correct version of the test is submitted to the test runner.</p>"},{"location":"docs/running-simbank-tests/writing-a-simbank-test/#create-a-new-galasa-test-class","title":"Create a new Galasa test class","text":"<ol> <li>Launch SimBank using the instructions in the CLI online or CLI offline documentation. </li> <li>Create a new test class. If you are using the CLI, manually create the test class file, for example in VS Code. Complete the next dialog as follows and then click Finish. Note that in the example a new package is created that is called <code>dev.galasa.simbanks.tests</code>. </li> <li>Annotate the new class with the <code>@Test</code> annotation.</li> </ol> <p>Stage 1 - code so far</p> <pre><code>package dev.galasa.simbanks.tests;\n\nimport dev.galasa.Test;\n\n@Test\npublic class BasicTransferTest {\n\n}\n</code></pre>"},{"location":"docs/running-simbank-tests/writing-a-simbank-test/#provision-the-necessary-resources-and-write-a-not-null-test","title":"Provision the necessary resources and write a not null test.","text":"<ol> <li>Just inside your new test class, declare the required Managers and add a not null test. You will need declarations for <code>@ZosImage</code>, <code>@Zos3270Terminal</code>, <code>@ArtifactManager</code>, <code>@HttpClient</code>, <code>@CoreManager</code>, and <code>@Logger</code>. Make sure that <code>@ZosImage</code> and <code>@Zos3270Terminal</code> are assigned the imageTag <code>simbank</code>.</li> <li>Add a <code>testNotNull()</code> method that asserts that your <code>@Zos3270Terminal</code>, <code>@ArtifactManager</code> and <code>@HttpClient</code> have instantiated correctly.</li> </ol> <p>Stage 2 - code so far</p> <pre><code>package dev.galasa.simbanks.tests;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport org.apache.commons.logging.Log;\n\nimport dev.galasa.Test;\nimport dev.galasa.artifact.ArtifactManager;\nimport dev.galasa.artifact.IArtifactManager;\nimport dev.galasa.core.manager.CoreManager;\nimport dev.galasa.core.manager.ICoreManager;\nimport dev.galasa.core.manager.Logger;\nimport dev.galasa.http.HttpClient;\nimport dev.galasa.http.IHttpClient;\nimport dev.galasa.zos.IZosImage;\nimport dev.galasa.zos.ZosImage;\nimport dev.galasa.zos3270.ITerminal;\nimport dev.galasa.zos3270.Zos3270Terminal;\n\n@Test\npublic class BasicTransferTest {\n    @ZosImage(imageTag=\"SIMBANK\")\n    public IZosImage image;\n\n    @Zos3270Terminal(imageTag=\"SIMBANK\")\n    public ITerminal terminal;\n\n    @ArtifactManager\n    public IArtifactManager artifacts;\n\n    @HttpClient\n    public IHttpClient client;\n\n    @CoreManager\n    public ICoreManager coreManager;\n\n    @Logger\n    public Log logger;\n\n\n    @Test\n    public void testNotNull() {\n        //Check all objects loaded\n        assertThat(terminal).isNotNull();\n        assertThat(artifacts).isNotNull();\n        assertThat(client).isNotNull();\n    }\n}\n</code></pre> <p>You can run the Not Null test by creating a new run configuration as in the other examples (don't forget to ensure that SimBank is running first). </p>"},{"location":"docs/running-simbank-tests/writing-a-simbank-test/#create-the-main-test-method-and-open-the-main-bank-menu","title":"Create the main test method and open the main bank menu","text":"<ol> <li>Inside your test class, create a public method called <code>transferCredit()</code>. Annotate it with <code>@Test</code>.</li> <li>Log on to SimBank using the <code>terminal</code> object, which is an instance of <code>ITerminal</code>. Use the credentials IBMUSER and SYS1.</li> <li>Use <code>assertThat()</code> to confirm that the session manager has a bank session available.</li> <li>Open the banking application.</li> <li>Use <code>assertThat()</code> to confirm that the bank menu is showing.</li> </ol> <p>Refer to the provided tests to see how to use the various <code>terminal</code> methods such as <code>waitForKeyboard</code>, <code>positionCursorToFieldContaining</code>, <code>enter</code>, <code>tab</code>, <code>clear</code>, <code>pf1</code> and <code>type</code>.</p> <p>Stage 3 - the main <code>transferCredit()</code> method (in progress)</p> <pre><code>@Test\npublic void transferCredit() throws TimeoutException, KeyboardLockedException, NetworkException, FieldNotFoundException, TextNotFoundException, InterruptedException {\n    //Logon through the session manager\n    terminal.waitForKeyboard()\n    .positionCursorToFieldContaining(\"Userid\").tab().type(\"IBMUSER\")\n    .positionCursorToFieldContaining(\"Password\").tab().type(\"SYS1\")\n    .enter().waitForKeyboard();\n\n    //Assert that the session manager has a bank session available\n    assertThat(terminal.retrieveScreen()).containsOnlyOnce(\"SIMPLATFORM MAIN MENU\");\n    assertThat(terminal.retrieveScreen()).containsOnlyOnce(\"BANKTEST\");\n\n    //Open banking application\n    terminal.pf1().waitForKeyboard()\n    .clear().waitForKeyboard()\n    .tab().type(\"bank\").enter().waitForKeyboard();\n\n    //Assert that the bank menu is showing\n    assertThat(terminal.retrieveScreen()).containsOnlyOnce(\"Options     Description        PFKey \");\n    assertThat(terminal.retrieveScreen()).containsOnlyOnce(\"BROWSE      Browse Accounts    PF1\");\n    assertThat(terminal.retrieveScreen()).containsOnlyOnce(\"TRANSF      Transfer Money     PF4\");\n    }\n</code></pre>"},{"location":"docs/running-simbank-tests/writing-a-simbank-test/#retrieve-the-initial-account-balances-and-declare-an-amount-to-transfer","title":"Retrieve the initial account balances and declare an amount to transfer","text":"<ol> <li>Create a private <code>getBalance(&lt;string&gt;)</code> method by copying it from the <code>BasicAccountCreditTest.java</code> example.</li> <li>Retrieve the initial balances of accounts <code>123456789</code> and <code>987654321</code> and write them to the log. Use the <code>getBalance(&lt;string&gt;)</code> method you just created.</li> <li>Declare a <code>final BigDecimal transferAmount</code> variable to store an amount to transfer by instantiating a new <code>BigDecimal</code> object. </li> </ol> <p>Stage 4 - the full <code>BasicTransferTest</code> code so far</p> <pre><code>@Test\npublic class BasicTransferTest {\n    @ZosImage(imageTag=\"SIMBANK\")\n    public IZosImage image;\n\n    @Zos3270Terminal(imageTag=\"SIMBANK\")\n    public ITerminal terminal;\n\n    @ArtifactManager\n    public IArtifactManager artifacts;\n\n    @HttpClient\n    public IHttpClient client;\n\n    @CoreManager\n    public ICoreManager coreManager;\n\n    @Logger\n    public Log logger;\n\n\n    @Test\n    public void testNotNull() {\n        //Check all objects loaded\n        assertThat(terminal).isNotNull();\n        assertThat(artifacts).isNotNull();\n        assertThat(client).isNotNull();\n    }\n\n\n    @Test\n    public void transferCredit() throws TimeoutException, KeyboardLockedException, NetworkException, FieldNotFoundException, TextNotFoundException, InterruptedException {\n        //Logon through the session manager\n        terminal.waitForKeyboard()\n        .positionCursorToFieldContaining(\"Userid\").tab().type(\"IBMUSER\")\n        .positionCursorToFieldContaining(\"Password\").tab().type(\"SYS1\")\n        .enter().waitForKeyboard();\n\n        //Assert that the session manager has a bank session available\n        assertThat(terminal.retrieveScreen()).containsOnlyOnce(\"SIMPLATFORM MAIN MENU\");\n        assertThat(terminal.retrieveScreen()).containsOnlyOnce(\"BANKTEST\");\n\n        //Open banking application\n        terminal.pf1().waitForKeyboard()\n        .clear().waitForKeyboard()\n        .tab().type(\"bank\").enter().waitForKeyboard();\n\n        //Assert that the bank menu is showing\n        assertThat(terminal.retrieveScreen()).containsOnlyOnce(\"Options     Description        PFKey \");\n        assertThat(terminal.retrieveScreen()).containsOnlyOnce(\"BROWSE      Browse Accounts    PF1\");\n        assertThat(terminal.retrieveScreen()).containsOnlyOnce(\"TRANSF      Transfer Money     PF4\");\n\n        //Retrieve initial account balances\n        BigDecimal account123456789InitialBalance = getBalance(\"123456789\");\n        logger.info(\"Pre-test balance for account 123456789 is \" + account123456789InitialBalance.toString());\n        BigDecimal account987654321InitialBalance = getBalance(\"987654321\");\n        logger.info(\"Pre-test balance for account 987654321 is \" + account987654321InitialBalance.toString());\n\n        //Declare the amount to be transferred\n        final BigDecimal transferAmount = new BigDecimal(10.0);\n    }\n\n    private BigDecimal getBalance(String accountNum) throws DatastreamException, TimeoutException, KeyboardLockedException, NetworkException, FieldNotFoundException, TextNotFoundException, InterruptedException {\n        BigDecimal amount = BigDecimal.ZERO;\n        //Open account menu and enter account number\n        terminal.pf1().waitForKeyboard()\n                .positionCursorToFieldContaining(\"Account Number\").tab()\n                .type(accountNum).enter().waitForKeyboard();\n\n        //Retrieve balance from screen\n        amount = new BigDecimal(terminal.retrieveFieldTextAfterFieldWithString(\"Balance\").trim());\n\n        //Return to bank menu\n        terminal.pf3().waitForKeyboard();\n        return amount;\n    }\n\n}\n</code></pre>"},{"location":"docs/running-simbank-tests/writing-a-simbank-test/#automate-galasa-to-make-the-transfer-and-check-that-everything-is-correct","title":"Automate Galasa to make the transfer and check that everything is correct.","text":"<ol> <li>Choose the TRANSFER MONEY option (PF4) and check that we are on the right screen - it contains the string SIMBANK TRANSFER MENU.</li> <li>Enter the transfer amount details using the various methods of your <code>terminal</code> instance. Note that you you have to convert the <code>transferAmount</code> to a <code>String</code> before you can use <code>terminal.type</code> to enter it into the screen's fields.</li> <li>Check that a <code>Transfer Successful</code> message appears.</li> <li>Go back to the main bank menu (PF3).</li> <li>Retrieve the final balances and use assertions to check that the account balances have been debited and credited correctly.</li> </ol> <p>The completed test code</p> <pre><code>package dev.galasa.simbanks.tests;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.math.BigDecimal;\n\nimport org.apache.commons.logging.Log;\n\nimport dev.galasa.Test;\nimport dev.galasa.artifact.ArtifactManager;\nimport dev.galasa.artifact.IArtifactManager;\nimport dev.galasa.core.manager.CoreManager;\nimport dev.galasa.core.manager.ICoreManager;\nimport dev.galasa.core.manager.Logger;\nimport dev.galasa.http.HttpClient;\nimport dev.galasa.http.IHttpClient;\nimport dev.galasa.zos.IZosImage;\nimport dev.galasa.zos.ZosImage;\nimport dev.galasa.zos3270.FieldNotFoundException;\nimport dev.galasa.zos3270.ITerminal;\nimport dev.galasa.zos3270.KeyboardLockedException;\nimport dev.galasa.zos3270.TerminalInterruptedException;\nimport dev.galasa.zos3270.TextNotFoundException;\nimport dev.galasa.zos3270.TimeoutException;\nimport dev.galasa.zos3270.Zos3270Terminal;\nimport dev.galasa.zos3270.spi.DatastreamException;\nimport dev.galasa.zos3270.spi.NetworkException;\n\n@Test\npublic class BasicTransferTest {\n    @ZosImage(imageTag=\"SIMBANK\")\n    public IZosImage image;\n\n    @Zos3270Terminal(imageTag=\"SIMBANK\")\n    public ITerminal terminal;\n\n    @ArtifactManager\n    public IArtifactManager artifacts;\n\n    @HttpClient\n    public IHttpClient client;\n\n    @CoreManager\n    public ICoreManager coreManager;\n\n    @Logger\n    public Log logger;\n\n\n    @Test\n    public void testNotNull() {\n        //Check all objects loaded\n        assertThat(terminal).isNotNull();\n        assertThat(artifacts).isNotNull();\n        assertThat(client).isNotNull();\n    }\n\n    @Test\n    public void transferCredit() throws TimeoutException, KeyboardLockedException, NetworkException, FieldNotFoundException, TextNotFoundException, InterruptedException {\n        //Logon through the session manager\n        terminal.waitForKeyboard()\n        .positionCursorToFieldContaining(\"Userid\").tab().type(\"IBMUSER\")\n        .positionCursorToFieldContaining(\"Password\").tab().type(\"SYS1\")\n        .enter().waitForKeyboard();\n\n        //Assert that the session manager has a bank session available\n        assertThat(terminal.retrieveScreen()).containsOnlyOnce(\"SIMPLATFORM MAIN MENU\");\n        assertThat(terminal.retrieveScreen()).containsOnlyOnce(\"BANKTEST\");\n\n        //Open banking application\n        terminal.pf1().waitForKeyboard()\n        .clear().waitForKeyboard()\n        .tab().type(\"bank\").enter().waitForKeyboard();\n\n        //Assert that the bank menu is showing\n        assertThat(terminal.retrieveScreen()).containsOnlyOnce(\"Options     Description        PFKey \");\n        assertThat(terminal.retrieveScreen()).containsOnlyOnce(\"BROWSE      Browse Accounts    PF1\");\n        assertThat(terminal.retrieveScreen()).containsOnlyOnce(\"TRANSF      Transfer Money     PF4\");\n\n        //Retrieve initial account balances\n        BigDecimal account123456789InitialBalance = getBalance(\"123456789\");\n        logger.info(\"Pre-test balance for account 123456789 is \" + account123456789InitialBalance.toString());\n        BigDecimal account987654321InitialBalance = getBalance(\"987654321\");\n        logger.info(\"Pre-test balance for account 987654321 is \" + account987654321InitialBalance.toString());\n\n        //Declare the amount to be transferred\n        final BigDecimal transferAmount = new BigDecimal(10.0);\n\n        //Choose the Transfer Money option\n        terminal.pf4().waitForKeyboard();\n\n        //Assert that we are on the right screen\n        assertThat(terminal.retrieveScreen()).containsOnlyOnce(\"SIMBANK TRANSFER MENU\");\n\n        //Enter the transfer amount details\n        //Open account menu and enter account numbers and transfer amount\n        terminal.positionCursorToFieldContaining(\"Transfer from Account Number\").tab()\n                .type(\"123456789\").enter().waitForKeyboard();\n        terminal.positionCursorToFieldContaining(\"Transfer to Account Number\").tab()\n                .type(\"987654321\").enter().waitForKeyboard();\n        terminal.positionCursorToFieldContaining(\"Transfer Amount\").tab()\n                .type(transferAmount.toString()).enter().waitForKeyboard();\n\n        //Assert that the transfer was successful\n        assertThat(terminal.retrieveScreen()).containsOnlyOnce(\"Transfer Successful\");\n\n        //Back to main menu - important we do this to prepare for getBalance().\n        terminal.pf3().waitForKeyboard();\n\n        //Retrieve final account balances\n        BigDecimal account123456789FinalBalance = getBalance(\"123456789\");\n        logger.info(\"Final balance for account 123456789 is \" + account123456789FinalBalance.toString());\n        BigDecimal account987654321FinalBalance = getBalance(\"987654321\");\n        logger.info(\"Final balance for account 987654321 is \" + account987654321FinalBalance.toString());\n\n        //Assert that the final balances differ by exactly the transferred amount\n        assertThat(account123456789FinalBalance).isEqualTo(account123456789InitialBalance.subtract(transferAmount));\n        assertThat(account987654321FinalBalance).isEqualTo(account987654321InitialBalance.add(transferAmount));\n    }\n\n    private BigDecimal getBalance(String accountNum) throws DatastreamException, TimeoutException, KeyboardLockedException, NetworkException, FieldNotFoundException, TextNotFoundException, InterruptedException {\n        BigDecimal amount = BigDecimal.ZERO;\n        //Open account menu and enter account number\n        terminal.pf1().waitForKeyboard()\n                .positionCursorToFieldContaining(\"Account Number\").tab()\n                .type(accountNum).enter().waitForKeyboard();\n\n        //Retrieve balance from screen\n        amount = new BigDecimal(terminal.retrieveFieldTextAfterFieldWithString(\"Balance\").trim());\n\n        //Return to bank menu\n        terminal.pf3().waitForKeyboard();\n        return amount;\n    }\n\n}\n</code></pre> <p>If you haven't yet done so, you can run the final test by first ensuring that SimBank is already running and then creating and running a new run configuration as you did with the other examples. You can also view the expected and actual values.</p> <p>Now create your own test to run against SimBank, or copy and modify one of the tests provided, to get more experience in writing Galasa tests. You could also try rewriting this test to use a provisioning Manager (e.g. IAccount) just as the <code>ProvisionedAccoutCreditTests.java</code> example improved the design of <code>BasicAccountCreditTests.java</code>.</p>"},{"location":"docs/upgrading/","title":"Upgrading","text":""},{"location":"docs/upgrading/#upgrading-the-galasa-version-online","title":"Upgrading the Galasa version (online)","text":"<p>You can upgrade your version of Galasa by completing the following steps:</p> <ol> <li>Download the appropriate version of the Galasa CLI for your machine architecture from the Galasa CLI repository in GitHub.</li> <li>Re-name the your existing <code>galasactl</code> binary so that you can re-name the Galasa binary that you just downloaded to <code>galasactl</code> to replace it. </li> <li>Set execute permission on the binary by running the <code>chmod +x galasactl</code> command in the directory containing <code>galasactl</code>.If you are using a Mac, you can set permission to open the Galasa CLI tool by running the <code>xattr -dr com.apple.quarantine galasactl</code> command in the directory containing <code>galasactl</code>. </li> </ol> <p>If you have already added the Galasa CLI path to your shell's initialization file, as described in the Installing the Galasa CLI online topic, you should now be able to run the upgraded version of the Galasa CLI tool from any directory in your file system.</p>"},{"location":"docs/upgrading/#upgrading-the-galasa-zipped-distribution-version-offline","title":"Upgrading the Galasa zipped distribution version (offline)","text":"<p>Download and extract the Galasa zip file to a directory of your choice and complete the steps documented in the Installing the Galasa CLI offline topic.</p>"},{"location":"docs/upgrading/#upgrading-tests-to-compile-using-gradle-version-8","title":"Upgrading tests to compile using Gradle version 8","text":"<p>Galasa releases 0.35.0 and earlier support the use of Gradle versions 6.8.x, 6.9.x, and 7.x.x to create Galasa projects and build Galasa test code. From release 0.36.0 and later, Galasa additionally supports the use of Gradle version 8.x.x. </p> <p>To use Gradle version 8.0 or later to create Galasa projects and build and compile Galasa test code, complete the following steps:</p> <ol> <li> <p>Edit the <code>build.gradle</code> file in the OBR directory of your parent project, setting the plug-in values at the top of the file to version <code>0.36.0</code>, as shown in the following example:</p> <pre><code>plugins {\n...\nid 'dev.galasa.obr' version '0.36.0'\nid 'dev.galasa.testcatalog' version '0.36.0'\n...\n}\n</code></pre> </li> <li> <p>Add the following task definition to the <code>build.gradle</code> file in the OBR directory of the parent project to ensure that Gradle uses the correct build order.</p> <pre><code>tasks.withType(PublishToMavenLocal) { task -&gt;\n    task.dependsOn genobr\n    task.dependsOn mergetestcat\n}\n</code></pre> </li> <li> <p>In each test project <code>build.gradle</code> file, set the <code>dev.galasa.tests</code> plug-in to version <code>0.36.0</code> to ensure that the build uses the correct plug-in.</p> <pre><code>plugins {\n...\nid 'dev.galasa.tests' version '0.36.0'\n...\n}\n</code></pre> </li> </ol>"},{"location":"docs/upgrading/#moving-from-eclipse-to-the-galasa-cli","title":"Moving from Eclipse to the Galasa CLI","text":"<p>Version 0.31.0 is the last version of the Eclipse plug-in for Galasa that is produced and maintained by the Galasa Team. You can work with later versions of Galasa by using the Galasa command line interface (CLI). The galasactl tool can do everything that the Eclipse tooling can do, and can be run from the command-line of any IDE, for example, the Eclipse terminal view. </p> <p>There is also a video about the Galasa command line tool that is available to watch on YouTube. Watch the video to learn about the software requirements you need to get started with galasactl and find out how to download and install it on your local machine. There is also a demo that takes you through the process of creating, building and running Galasa tests, and viewing the output of those test runs. </p> <p>To upgrade to a Galasa version that uses the CLI when your previous Galasa version was using Eclipse, complete the following steps:</p> <ol> <li> <p>Check that you have the software that you need installed by viewing the CLI prerequisites topic.</p> </li> <li> <p>Complete the steps outlined in the Installing the Galasa CLI online topic to download and install the correct Galasa CLI binary file for your machine architecture.</p> </li> <li> <p>Check that you have an OBR project for your test code. If not, you can create a project that uses the names that you want by using the <code>galasactl project create</code> command, and copying your test code into the correct places. For more information about the <code>galasactl project create</code> command, see the Creating a Galasa project topic.</p> </li> </ol> <p>If you encounter any difficulties, reach out for help in our Galasa Slack workspace in the <code>#galasa-users</code> channel.</p>"},{"location":"docs/upgrading/#upgrading-tests-created-against-an-earlier-version-of-galasa","title":"Upgrading tests created against an earlier version of Galasa","text":"<p>If you have a pre-built version of tests that were created against an earlier version of Galasa in your local repository, you need to rebuild those test projects and any associated Managers after ugprading, so that the pom.xml files of those tests and Managers specify the new version of Galasa.</p> <p>A simple way to do this is to complete the following steps: </p> <ol> <li> <p>Search your Galasa files for the version number against which the tests were created, for example 0.27.0. A filtered list of files containing 0.27.0 is returned.</p> </li> <li> <p>Check each pom.xml file and replace that version number with the new version number, for example, 0.28.0. </p> <p>NOTE: Do not update version numbers for non-Galasa dependencies or plug-ins. Only replace the version number for Galasa dependencies, where the groupId is set to dev.galasa, as per the following examples:</p> <pre><code>&lt;parent&gt;\n&lt;groupId&gt;dev.galasa&lt;/groupId&gt;\n&lt;artifactId&gt;galasa-parent&lt;/artifactId&gt;\n&lt;version&gt;0.28.0&lt;/version&gt;\n&lt;/parent&gt;\n</code></pre> <pre><code>&lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;dev.galasa&lt;/groupId&gt;\n            &lt;artifactId&gt;dev.galasa&lt;/artifactId&gt;\n            &lt;version&gt;0.28.0&lt;/version&gt;\n            &lt;scope&gt;provided&lt;/scope&gt;\n        &lt;/dependency&gt;\n</code></pre> </li> <li> <p>Check that the OBR version in the Galasa preferences references the new version of Galasa.     If you are using VS code, complete the following steps:          a. Go to  File &gt; Preferences &gt; Settings and expand the Extensions section.          b. Select Galasa and check that the Version field is using the default value of <code>main</code>, to automatically select the latest version. </p> </li> </ol>"},{"location":"docs/upgrading/#troubleshooting","title":"Troubleshooting","text":"<p>If you have problems after completing the steps for upgrading, try running a clean install. </p> <p>To run a clean Maven install, run the <code>mvn clean install</code> command from the command line. </p> <p>To run a clean Gradle install, run the <code>gradle clean build</code> command from the command line.</p> <p>If you are still having issues, you can force a full rebuild by deleting your .m2 repository and creating a new build against your test projects and Managers by running a clean install.</p> <p>You can also post a question in our Galasa Slack workspace.</p>"},{"location":"docs/writing-own-tests/","title":"Writing your own independent Galasa tests","text":"<p>Writing your own tests (that is, tests within an independent project of your own creation) involves two kinds of activity:</p> <ul> <li> <p>Using the Galasa CLI to create an appropriate project structure.</p> </li> <li> <p>Leveraging a collection of organisational principles that will help guide you towards a clean implementation that can eventually be moved into CI/CD and full automation.</p> </li> </ul> <p>These two strands involve exploiting the features of a well-known and trusted Open Source application called Maven for project setup and dependency management.</p> <p>Our approach provides enough detail to get you going, but for a full understanding you either need some prior knowledge or to undertake a little self-study. There are plenty of resources on the Web, and you will find that your appreciation of Maven will grow as you interact day-to-day with Galasa itself.</p>"},{"location":"docs/writing-own-tests/binding-tests/","title":"Testing across environments","text":"<p>Ideally, you want to avoid hard coding within your test. If you hard code target hostnames, port numbers and so on, you can't run the same test against different environments without changing the test code. </p> <p>Galasa Managers use attributes and their associated properties to bind a test to an environment at runtime. Using attributes to enable late binding of the test material to the system under test allows the same test to run against multiple environments without changing the test itself. </p>"},{"location":"docs/writing-own-tests/binding-tests/#using-credentials-properties","title":"Using credentials properties","text":"<p>It is likely that a test will need to pass credentials to the application being tested. For example, as HTTP credentials or as username and password values entered onto a 3270 screen. </p> <p>Rather than hard code the credentials inside a test class, you can store the values in the credentials file when the test is run locally and in the ecosystem when the test is run remotely. The ability to get credentials from a credentials store means that you do not need to hard code these values inside a test, enabling the test to be run in different environments without changing a single line of code.  </p> <p>You can extract credentials by using the Core Manager <code>getCredentials</code> method. The Core Manager uses the <code>getCredentials</code> method to retrieve a user id and password from the credentials store to use in your test. See the Core Manager documentation for more information and code snippet examples.</p> <p>If you want to mask the password, for example to prevent it from being displayed in recorded screens, you can use the Core Manager <code>registerConfidentialText</code> method. There is an example of this method in the Running the SimBank Installation Verification Test documentation.</p>"},{"location":"docs/writing-own-tests/binding-tests/#an-example-using-simbank","title":"An example using SimBank","text":"<p>In Galasa, when an annotation refers to a resource, for example a z/OS image, you can use the imageTag attribute to avoid hard coding the endpoint of that z/OS image in your test code. The properties that are associated with the attribute are stored in the CPS file. </p> <p>Let\u2019s look at an example in the SimBank <code>BatchAccountsOpenTest.java</code> test code where the imageTag attribute is used to avoid hard coding an endpoint for a z/OS image.</p> <p>The test declares that a z/OS image is required for the test to run and that this image is called SIMBANK by using the following test code:</p> <pre><code>@ZosImage(imageTag=\"SIMBANK\")\n    public IZosImage image;\n</code></pre> <p>When the z/OS Manager reads the code, it creates a z/OS image by using the imageTag attribute to ascertain which set of properties from the <code>cps.properties</code> or <code>overrides.properties</code> file that it needs to load to create that image.</p> <p>In this example, the following properties are associated with the SIMBANK z/OS image in the <code>overrides.properties</code> file, as described in the Running the SimBank tests using the CLI documentation:</p> <pre><code>zos.image.SIMBANK.ipv4.hostname=127.0.0.1\nzos.image.SIMBANK.telnet.port=2023\nzos.image.SIMBANK.telnet.tls=false\nzos.image.SIMBANK.credentials=SIMBANK\n</code></pre>"},{"location":"docs/writing-own-tests/binding-tests/#building-on-the-simbank-example","title":"Building on the SimBank example","text":"<p>When you create your own test that runs against a z/OS image, you probably want to call that image something other than SIMBANK. For example, you might want to use an image called zosImage1.</p> <p>You can do this by editing the CPS file to contain the properties that you want zosImage1 to have and by declaring zosImage1 in your test code, as per the following steps:</p> <ol> <li> <p>Edit the CPS properties file (either locally or in your ecosystem) to define the properties of the image: </p> <pre><code>zos.image.zosImage1.ipv4.hostname=127.0.0.1\nzos.image.zosImage1.telnet.port=23\nzos.image.zosImage1.telnet.tls=false\n</code></pre> </li> <li> <p>In the test code, declare a z/OS image called zosImage1:</p> <pre><code>@ZosImage(imageTag=\"zosImage1\")\npublic IZosImage image;\n</code></pre> <p>The z/OS Manager reads the test code and creates the image object by using the properties associated with zosImage1 in the CPS file. </p> </li> </ol>"},{"location":"docs/writing-own-tests/binding-tests/#clustering","title":"Clustering","text":"<p>What if you want to run your test against an image in a cluster? By editing the CPS properties file, you can define clusters containing images against which your test can run . Once defined, Galasa can dynamically select an image from that cluster at run time.</p> <p>For example, you might want to define a cluster called CLUSTER2 which contains two z/OS images called IMAGEA and IMAGEB. You can do this by udpating the CPS file to define CLUSTER2 and the images that you want it to contain, along with the properties of those images, as per the following example:</p> <pre><code># CLUSTER2\nzos.cluster.CLUSTER2.images=IMAGEA,IMAGEB\n\nzos.image.IMAGEA.ipv4.hostname=winmvs2a.example.com\nzos.image.IMAGEA.telnet.port=23\nzos.image.IMAGEA.telnet.tls=false\nzos.image.IMAGEA.credentials=WINMVS2A\nzos.image.IMAGEA.max.slots=1\nzos.image.IMAGEA.clusterid=CLUSTER2\nzos.tag.IMAGEA.clusterid=CLUSTER2\n\nzos.image.IMAGEB.ipv4.hostname=winmvs2b.example.com\nzos.image.IMAGEB.telnet.port=23\nzos.image.IMAGEB.telnet.tls=false\nzos.image.IMAGEB.credentials=WINMVS2A\nzos.image.IMAGEB.max.slots=1\nzos.image.IMAGEB.clusterid=CLUSTER2\nzos.tag.IMAGEB.clusterid=CLUSTER2\n</code></pre> <p>The images are linked back to the CLUSTER2 cluster by using  the following code: </p> <pre><code>zos.image.IMAGEA.clusterid=CLUSTER2\nzos.image.IMAGEB.clusterid=CLUSTER2\n</code></pre> <p>In the test code, set the imageTag to CLUSTER2, as per the following example:</p> <pre><code>@ZosImage(imageTag=\"CLUSTER2\")\n   public IZosImage image;\n</code></pre> <p>When the test runs, Galasa dynamically selects either IMAGEA or IMAGEB from CLUSTER2 at run time. </p> <p>For example, in the CPS file IMAGEA has a maximum number of slots set to <code>1</code>. If that slot is in use, Galasa binds the test to IMAGEB at run time, if IMAGEB is available. Images can be added to CLUSTER2 by updating the CPS file, without the need to recompile the test. </p> <p>In this way, Galasa manages the inbound workload of tests and splits them across LPARS. Each LPAR has a certain number of slots that are allocated to it. When the slots are used, no more tests can be allocated to that LPAR. If the LPAR is part of a cluster, then Galasa switches to another LPAR. Only when a test is told where it can run is it bound to that environment.</p>"},{"location":"docs/writing-own-tests/binding-tests/#troubleshooting","title":"Troubleshooting","text":"<p>If you see an error message in the run log indicating that a property is not found, check that the property is spelled correctly in your test and if so, check that the property is defined in the CPS properties file. </p> <p>If you are running test cases locally that target an LPAR that is offline, you might get an \"Insufficient capacity for images...\" error or similar. To resolve this problem, delete any failed test runs, clear the content of the DSS file in <code>~/.galasa/</code> and run the tests again.</p>"},{"location":"docs/writing-own-tests/key-principles/","title":"Key principles for writing tests","text":"<p>These suggestions are written in the anticipation that your tests are ultimately to run in an automation environment targeting multiple application instances at the same time. Despite the fact that when you first start working with Galasa, you may be running tests locally, sequentially, and against just a single target environment, it is recommended that you follow these guidelines to develop good habits for testing in the large.</p>"},{"location":"docs/writing-own-tests/key-principles/#expect-a-test-to-be-run-multiple-times-in-parallel","title":"Expect a test to be run multiple times in parallel","text":"<ul> <li>In a CI/CD pipeline, it is very likely that an automated test will be running against different target environments at the same time.</li> <li>When using remote resources, ensure their use will not clash with another test instance.</li> <li>Use the Galasa framework to understand which test instance you are testing against.</li> <li>Do not hard code any locations, ports or names in your tests - these might change.</li> <li>Do not assume a specific number of test environments - this might scale dynamically.</li> </ul>"},{"location":"docs/writing-own-tests/key-principles/#do-not-hard-code-resource-names","title":"Do not hard code resource names","text":"<ul> <li>If you have not developed an application Manager to describe your target environment, then use test properties to pass resource names to the test.</li> <li>If you hard code resource names, application ids, target hostnames and so on, it means that the test is not portable. You will be unable to run the same test against a development target environment one day and a QA environment the next.</li> <li>By not hard coding resource names, you reduce the technical debt being built up within your test code.</li> </ul>"},{"location":"docs/writing-own-tests/key-principles/#many-short-sharp-tests-are-far-better-than-a-few-long-tests","title":"Many short, sharp tests are far better than a few long tests","text":"<ul> <li>Lots of short, sharp tests means you can run more tests in parallel. Galasa's ecosystem has been designed for scale, and can cope with thousands of tests running in parallel.</li> <li>In a CI/CD pipeline, the more parallelism you can introduce, the more testing can happen in the shortest time, meaning your developers can receive feedback faster.</li> <li>A single test class that takes an hour to run six test methods can be run in ten minutes if those six methods could be split apart and run in parallel.</li> </ul>"},{"location":"docs/writing-own-tests/key-principles/#use-the-facilities-provided-by-managers-instead-of-writing-your-own-code","title":"Use the facilities provided by Managers instead of writing your own code","text":"<ul> <li>If there is a Manager that does what you need, then use it instead of writing your own code in the test. Managers' code uses best practice and has been battle-proven. If a better solution for a Manager arrives, your tests will automatically benefit.</li> <li>As you write your own tests, you will discover common code between them that could be abstracted into an Application Manager, so expect some churn and volatility as your test's functionality settles down.</li> <li>Using Managers helps to reduce the technical debt building up in your test code.</li> </ul>"},{"location":"docs/writing-own-tests/key-principles/#understand-the-difference-between-testing-and-exercising-code","title":"Understand the difference between testing and exercising code","text":"<ul> <li>When you test a specific function, you will generally examine all parts of it - that is, all aspects of the UI and API, and confirm that any logging or audit messages are printed correctly. However, once satisfied that it is working, you might want to exercise that function while testing another function. When simply exercising a function, you can choose to not examine all parts of it as if you were testing it, and just accept that it works or not. This speeds up your tests.</li> </ul>"},{"location":"docs/writing-own-tests/key-principles/#use-before-and-after-to-clean-up-state","title":"Use <code>@Before</code> and <code>@After</code> to clean up state","text":"<ul> <li>A method annotated with <code>@Before</code> runs before each test method. This can be very useful for resetting resources such as HTTP clients or screens before each test invocation. Similarly, a method annotated with <code>@After</code> only runs after each test method, and again can be used for resetting resources after a test method completes.</li> </ul>"},{"location":"docs/writing-own-tests/key-principles/#understand-your-meta-information","title":"Understand your meta-information","text":"<ul> <li>Meta-information held within annotations in your test class can be built into a test catalog and used when selecting tests to run or reporting on tests that have run.</li> <li>How will you divide up your tests? Will this be based on functional area, type of test performed and so on? Codify this into each test through annotations as soon as you can to inject structure into your tests.</li> </ul>"},{"location":"docs/writing-own-tests/key-principles/#scope-tests-well","title":"Scope tests well","text":"<ul> <li>Although you might be creating integration tests with Galasa that require interactions with many components, it is important that each test is scoped to test just a single application function.</li> <li>Test classes that test multiple functions don't scale well, and are more difficult to maintain and debug as they will contain a lot of information.</li> </ul>"},{"location":"docs/writing-own-tests/key-principles/#make-tests-easy-to-debug","title":"Make tests easy to debug","text":"<ul> <li>Use the logger via the <code>@Logger</code> annotation to pepper the run log with test state, possibly logging variables pertinent to the running test. This will help align the run log and the test class when analysing a problem. There is an example of this annotation in the SimBank ProvisionedAccountCreditTest example.</li> <li>When your test encounters an error, use the logger to be explicit about the type of error encountered. Messages such as <code>Did not see the expected result</code> are far less useful than <code>Expected to see message-A but actually saw message-B</code>.</li> <li>Use the Stored Artifact facility to save test material that will help you to diagnose test failures when tests are running in an unsupervised manner. It is annoying when the rerun of a test works flawlessly, but you know perfectly well that there is still a bug in there somewhere.</li> <li>The Stored Artifact facility can flag particularly interesting information. Use it in failure scenarios to raise engineers' attention to the key failure-causing output. There is an example of this annotation in the SimBank ProvisionedAccountCreditTest example.</li> </ul>"},{"location":"docs/writing-own-tests/key-principles/#your-test-code-is-a-valuable-asset","title":"Your test code is a valuable asset","text":"<ul> <li>Your automation test code is just as important to your business as your application code, as it is a key indicator of application quality.</li> <li>If your test code is poor, the whole view of the quality of your application is jeopardised.</li> <li>All test code should be source control managed.</li> <li>Consider using a static code analyser or performing buddy checks to ensure your test code is of a high quality.</li> </ul>"},{"location":"docs/writing-own-tests/running-test-modes/","title":"Running a Galasa test","text":""},{"location":"docs/writing-own-tests/running-test-modes/#overview","title":"Overview","text":"<p>There are three modes in which you can run a Galasa test:</p> <ul> <li>locally, with everything running on the local machine</li> <li>locally but using a shared configuration that is hosted by the Galasa Ecosystem</li> <li>remotely, by submitting the test to run in the Galasa Ecosystem</li> </ul> <p>If you are running a test locally but using a shared configuration that is hosted by the Galasa Ecosystem, or running a test remotely by submitting the test to run in the Galasa Ecosystem, you are interacting with the Galasa Ecosystem. </p> <p>Before you can interact with the Galasa Ecosystem, you must authenticate with it by using a personal access token. Tokens are stored in the <code>GALASA_TOKEN</code> in the <code>galasactl.properties</code> in your Galasa home folder. You can request a personal access token by using the Galasa Web UI. For more information about setting up authentication with an Ecosystem, see the Configuring authentication documentation.</p> <p>The mode in which you choose to run a test depends on what you are trying to achieve. Use the following information to understand which mode is most appropriate for a given scenario. </p>"},{"location":"docs/writing-own-tests/running-test-modes/#running-a-test-locally","title":"Running a test locally","text":"<p>When you run a test locally, without using shared configuration, everything runs on your local machine. The Galasa bootstrap file is blank and makes no reference to an Ecosystem. The Galasa framework is launched within the JVM on the local machine and the local file system holds all the configuration that is used by the test. The test runs in the local JVM and all test results and artifacts are stored on the local disk. </p> <p></p> <p>You can run a test in this mode by using the runs submit local Galasa CLI command.</p>"},{"location":"docs/writing-own-tests/running-test-modes/#running-a-test-in-the-galasa-ecosystem","title":"Running a test in the Galasa Ecosystem","text":"<p>To submit your test to an Ecosystem for remote execution, the Galasa bootstrap is set to the URL of the Galasa Ecosystem in which you want to run your test. The configuration of the test is also held within that Ecosystem, and Galasa starts up in a container in which the test code will run. The test results and artifacts are stored in a database within the specified Ecosystem, and users on client machines can view the test results. </p> <p></p> <p>After configuring authentication, you can run a test in this mode by setting up your bootstrap file to refer to the Ecosystem that you want to use and running the runs submit Galasa CLI command.</p>"},{"location":"docs/writing-own-tests/running-test-modes/#running-a-test-locally-but-using-shared-configuration","title":"Running a test locally but using shared configuration","text":"<p>When you run a test locally, but using shared configuration, you need to run the <code>galasactl auth login</code> command to access the remote system using the Galasa bootstrap. You can then unset the bootstrap so that your local <code>bootstrap.properties</code> file is used, or alternatively you can refer explicitly to the local bootstrap file. For more information about the <code>galasactl auth login</code> command, see the Configuring authentication documentation.</p> <p>The Galasa framework is launched within the JVM on the local machine, but the framework consults the remote Ecosystem to read configuration data, but not the credentials properties as these are drawn from a local file. This is the key difference between running a test in this \"hybrid\" mode versus running a test locally without using shared configuration. In hybrid mode, the test still runs in the local JVM and all test results and artifacts are stored on the local disk. </p> <p></p> <p>To run tests in hybrid mode, add the following properties into your local <code>bootstrap.properties</code> file:</p> <pre><code>framework.config.store=galasacps://my.ecosystem.url/api\nframework.extra.bundles=dev.galasa.cps.rest\n</code></pre> <p>where:</p> <ul> <li> <p><code>https://my.ecosystem.url</code> refers to the Web UI used to allocate tokens and</p> </li> <li> <p><code>framework.extra.bundles</code> tells the Galasa framework to load the <code>dev.galasa.cps.rest</code> extension. This extension tells the Galasa framework how to handle URLs that start with <code>galasacps</code> as the scheme part of the URL.</p> </li> </ul> <p>After setting the <code>GALASA_TOKEN</code> to be a valid token for the Ecosystem from which the CPS property values will be drawn, log into the Ecosystem by running the <code>galasactl auth login</code> command. You can then run a test in hybrid mode by setting your bootstrap to refer to the Ecosystem in which the shared configuration is stored, and using the galasactl runs submit local Galasa CLI command. </p>"},{"location":"docs/writing-own-tests/running-test-modes/#when-to-run-a-test-in-the-galasa-ecosystem","title":"When to run a test in the Galasa Ecosystem","text":"<p>Running a test remotely is useful in the following scenarios:</p>"},{"location":"docs/writing-own-tests/running-test-modes/#tests-need-to-run-in-bulk-in-parallel-often-submitted-by-different-automation-jobs-or-people-in-an-environment-where-resources-are-limited-and-need-to-be-managed-between-tests-for-example-ports-slots-of-processing-capability-files-and-sessions","title":"Tests need to run in bulk, in parallel, often submitted by different automation jobs or people, in an environment where resources are limited and need to be managed between tests. For example, ports, slots of processing capability, files, and sessions","text":"<p>If you are able to dynamically provision a system, then running tests from a local JVM can work well, as the system under test might have few resource contraints and can be used exclusively by the tests before being de-provisioned. However, if you want to run many test in parallet, you cannot do so reliably from a single system using the local JVM method on one user account. Any contention to name test runs uniquely, or other stateful changes in the test framework might cause the tests to clash, over-write each other, fail, or produce unexpected results. Running multiple tests in series can avoid some of these issues but running large numbers of tests in this way can take a long time. </p> <p>To reliably run many tests in parallel, deploy your tests to the Galasa Ecosystem, letting the Ecosystem manage the test runs, and the Galasa Manager components manage any shared or constrained resources. </p>"},{"location":"docs/writing-own-tests/running-test-modes/#test-results-and-reports-need-gathering-from-a-single-point-for-example-when-test-results-need-reporting-or-exporting-to-another-report-generating-system-or-when-bug-investigation-can-proceed-by-independent-inspection-test-results-and-artifacts","title":"Test results and reports need gathering from a single point. For example, when test results need reporting or exporting to another report-generating system, or when bug investigation can proceed by independent inspection test results and artifacts","text":"<p>A problem faced in large-scale use of the local JVM method of test invocation is how to gather test results from disparate machines or environments, so that the test results can be combined and form test reports for system health monitoring. This is something that running tests within a Galasa Ecosystem handles well, as the results of each test are stored centrally. Test results can be shared with others, enabling independent inspection and debugging of run artifacts. </p>"},{"location":"docs/writing-own-tests/running-test-modes/#when-the-clean-up-of-resources-in-the-system-under-test-is-an-important-requirement","title":"When the clean-up of resources in the system under test is an important requirement","text":"<p>When you run tests in a Galasa Ecosystem, resources are cleaned up by the Managers that are called during abnormal test exit conditions. When a locally run test stops prematurely, the Manager code that handles the clean-up of allocated resources might not run, so resources are not cleaned up. Over time, this can result in performance degradation of the system under test. </p>"},{"location":"docs/writing-own-tests/running-test-modes/#when-to-run-a-test-locally","title":"When to run a test locally","text":"<p>Running a test locally is useful when you are doing the following types of task:</p> <ul> <li> <p>Developing tests, and running those tests against a non-production environment.</p> </li> <li> <p>Running ad-hoc tests against a development or non-production target system.</p> </li> <li> <p>When there is time to find and share test run logs and artifacts with bug investigators, whenever a test fails and finds a bug.</p> </li> </ul>"},{"location":"docs/writing-own-tests/test-result-provider/","title":"Controlling code execution after test failure","text":"<p>As a tester, you may want the ability to access the result so far of a Galasa test at different points during the test lifecycle, to control the execution of code based on that result.</p> <p>The <code>ITestResultProvider</code> can be used to get the test result so far after the first method invocation in a test. It can give you access to if the test is in Passed or Failed state. You can use the state of the test (Passed or Failed) to control how non-test code is run.</p> <p>The annotation <code>@TestResultProvider</code> injects a <code>ITestResultProvider</code> object into your test class. The Core Manager updates the provider with the test result so far after each <code>@BeforeClass</code>, <code>@Before</code>, <code>@Test</code>, <code>@After</code> and <code>@AfterClass</code> method.</p> <p>To use this capability, simply include the lines of code below in your test:</p> <pre><code>@TestResultProvider\npublic ITestResultProvider testResultProvider;\n</code></pre> <p>In the example below, the <code>@AfterClass</code> method retrieves the result from the <code>ITestResultProvider</code> and checks if it is Failed. If the result is Failed, the method <code>myCustomCleanupMethod</code> is called. Running the <code>myCustomCleanupMethod</code> generates additional information to help diagnose the cause of the failure and cleans up resources.</p> <pre><code>@AfterClass\npublic void afterClassMethod() throws FrameworkException {\n    if (testResultProvider.getResult().isFailed()) {\n        myCustomCleanupMethod();\n    }\n}\n\nprivate void myCustomCleanupMethod() {\n    try {\n      // Custom diagnostic collection and cleanup logic that only happens on failures.\n    } catch(Exception ex) {\n       logger.error(\"Failing while cleaning up in myCustomCleanupMethod()\");\n       // Ignore the problem.\n    }\n}\n</code></pre>"},{"location":"docs/writing-own-tests/writing-test-classes/","title":"Writing test classes","text":"<p>Having created your project structure and built the parent and sub-projects, you are ready to start writing your own test classes.</p>"},{"location":"docs/writing-own-tests/writing-test-classes/#the-anatomy-of-a-galasa-test-class","title":"The anatomy of a Galasa test class","text":"<p>Some classes have <code>internal</code> as part of their package name. Such classes are not intended to be used in test code, and if you try doing so then at run-time you are likely to experience <code>Class not found</code> errors. This might be especially pertinent if an IDE, for example Eclipse, shows such classes in auto-complete drop-downs.</p> <p>All Galasa tests must have a <code>@Test</code> annotation (<code>dev.galasa.Test</code>) defined and in place for it to be recognised by Galasa. Doing this allows the Galasa Maven plugin to differentiate between test and utility classes within a project. Only classes that use <code>@Test</code> are included in the test catalog.</p> <p>Once loaded by the Galasa test runner, there are a few further annotations that dictate how a test is executed. These are <code>@BeforeClass</code>, <code>@Before</code>, <code>@Test</code>, <code>@After</code> and <code>@AfterClass</code>. These are visually similar to how they appear in JUnit, but are handled differently in Galasa.</p>"},{"location":"docs/writing-own-tests/writing-test-classes/#galasa-test-method-annotations","title":"Galasa test method annotations","text":"<code>@Test</code> <p>This annotation identifies a method as one that contains test code. Such methods are executed by Galasa by the order in which they appear in the test class - from top to bottom. If a test method fails, the following test methods are bypassed to encourage short, sharp parallel testing. This behaviour can be overridden using the <code>@ContinueOnTestFailure</code> annotation on the <code>class</code> statement.</p> <p>When a test method succeeds it is marked as PASSED, and if there is an exception it is marked FAILED. Managers can override this marking - for example, if a test throws a specific exception, a Manager could set the result to DISASTER.</p> <code>@BeforeClass</code> and <code>@AfterClass</code> <p>Methods marked <code>@Beforeclass</code> and <code>@AfterClass</code> are executed once before and once after all tests in the class respectively. They are executed in the order they appear in the sources.</p> <p>Such methods are used to perform setup and tear-down for the test class, for example, setting up an HTTP server that all of the <code>@Test</code> methods will use.</p> <p>Unlike JUnit, these are not static methods as they need access to some class fields/manager annotated fields which are described later.</p> <p>Failures that occur in <code>@BeforeClass</code> and <code>@AfterClass</code> usually cause tests to fail with <code>ENVIRONMENT_FAILURE</code>, which indicates that the test itself didn't fail, but the set up did for some reason. For this reason, <code>@BeforeClass</code> and <code>@AfterClass</code> should not contain any test code.</p> <code>@Before</code> and <code>@After</code> <p>Methods marked <code>@Before</code> and <code>@After</code> are executed before and after every <code>@Test</code> method respectively, in the order in which they appear in the source.</p> <p>These methods are typically used to reset resources before a test or perhaps check logs for post-test error messages.</p> <p>Failures that occur in <code>@Before</code> and <code>@After</code> result in the test method being marked as FAILED, as it is likely that such methods contain test checking code.</p> Manager annotated fields <p>Before any of the <code>@</code> methods in a test class are executed, the Galasa test runner requests any active Managers to populate their test fields with appropriate values. These fields are highly-dependent on the Managers, and you will need to review the Manager reference documentation to appreciate what is available.</p> <p>As an example, the test field</p> <pre><code>@RunName\npublic String runName;\n</code></pre> <p>is provided by the Core Manager. This populates the <code>runName</code> field with a String representing the run's name, which can be used to create a unique resource name that won't clash with other runs.</p> <p>The framework ensures that all correctly coded fields are filled before executing any test code, so test code doesn't need to bother itself with validating the fields themselves. If a field cannot be populated by a Manager, the test is marked either as <code>ENVIRONMENT_FAILURE</code>, or as <code>RESOURCE_EXHAUSTION</code> in which case an automated rerun is queued.</p> <p>A few Managers provide direct access to themselves, for example the Core Manager:</p> <pre><code>@CoreManager\npublic ICoreManager coreManager;\n</code></pre> <p>The Core Manager provides a method to obtain credentials via an ID - but the test may not know the ID before it runs, so it would be difficult to do this via an annotated field.</p>"},{"location":"docs/writing-own-tests/writing-test-classes/#example-tests","title":"Example tests","text":"<p>Review the SimBank sample tests to see how these principles are applied in practice. With one or two exceptions, these sample tests will be kept up to date with the latest specifications.</p>"},{"location":"docs/writing-own-tests/writing-test-classes/#pitfalls-and-tips-when-writing-test-code","title":"Pitfalls and tips when writing test code","text":""},{"location":"docs/writing-own-tests/writing-test-classes/#do-not-use-systemout-or-systemerr","title":"Do not use <code>System.out</code> or <code>System.err</code>","text":"<p>Although using <code>System.out.println</code> may be satisfactory when running tests locally, these messages will be lost if running in automation. Use a logger instead. The Core Manager provides an annotated field to make this straightforward:</p> <pre><code>@Logger\npublic Log Logger;\n</code></pre> <p>and then:</p> <pre><code>logger.info(\"This is a message\");\n</code></pre> <p>Any message written using this method is saved in the run log.</p>"},{"location":"docs/writing-own-tests/writing-test-classes/#keep-all-test-resources-within-the-test-project","title":"Keep all test resources within the test project","text":"<p>When diagnosing or maintaining a test project, it is helpful if all the resources it consumes are within the same project - examples include JCL, or Db2 DDL. While it is possible to keep resources with the target environment, it makes portability an issue. If your test runs against, say, a remote server MVS1, and MVS1 contains some resources such as JCL, it is fine if you remain on MVS1 only. If you later decide to run the test on MVS2, you will need to copy all the resources across before you can run your test. A better solution is to keep the resources within the current test project and deploy them as part of the test run.</p> <p>You can access resources in a test project using the Artifact Manager:</p> <pre><code>@BundleResources\npublic IBundleResources bundleResources;\n\nInputStream resource = bundleResources.retrieveFile(\"job.jcl\");\n</code></pre>"},{"location":"docs/writing-own-tests/writing-test-classes/#discovering-manager-resources","title":"Discovering Manager resources","text":"<p>The best way to learn what fields, annotations and methods that a Manager provides is to use the Manager reference pages on this site. Auto-completion and Javadoc are also great resources when you know what you are looking for. The Manager reference pages contain code snippets and describe what fields and annotations apply to each Manager. The source code for the Managers can be found in the Github Managers repository - where you can also usually find an Installation Verification Test (VT) project for each Manager.</p> <p>All Managers should comply with a naming standard, although it is not currently enforced. The Java bundle name tends to be <code>dev.galasa.managerid.manager</code> where <code>managerid</code> is the name of the Manager - for example <code>dev.galasa.core.manager</code>. Inside the bundle is the TPI (Tester Programming Interface) package, which tends to be named <code>dev.galasa.managerid</code> and includes all the annotations and interfaces a tester can employ to use the Manager. A test should never use any resource in a package with <code>internal</code> or <code>spi</code> in its name. By using these same naming conventions, you can use autocompletion and/or javadoc to locate Manager functionality across the project.</p>"},{"location":"docs/writing-own-tests/writing-test-classes/#jvm-lifecycles","title":"JVM lifecycles","text":"<p>Galasa tests run in Java and use a JVM to execute. JVMs only exist for the life of the test - this is to avoid problems with memory leaks and resource locking between test runs. Because of this, a test can start threads, lock resources and so on without worrying too much about cleaning up.</p>"},{"location":"hub/","title":"Galasa Blogs","text":"<p>Stay up-to-date with all things Galasa with blogs, podcasts and videos from fellow Galasians.</p> <p>Galasa blogs that are hosted by the Open Mainframe Project are available on the Galasa page of the website.</p>"},{"location":"hub/2021/01/25/using-galasa-to-streamline-cics-testing/","title":"Using Galasa to streamline CICS testing","text":"<p>Before software goes into production, it needs to be tested, and \"It looks good to me\" just isn't good enough. To ensure maximum coverage is attained, testing tools and frameworks are the way to go, and in this episode of A Terminal Talk podcast, we hear from Will Yates and Michael Baylis about how the Galasa Project helps them ensure solutions pass all the right tests.</p> <p> Listen to the podcast</p> <p>Speakers: Will Yates &amp; Michael Baylis Source: A Terminal Talk podcast</p>"},{"location":"hub/2021/03/29/integration-testing-for-hybrid-cloud-applications-using-galasa/","title":"Integration testing for Hybrid Cloud Applications using Galasa","text":"<p>This paper explains how this testing can be achieved only in an effective and efficient way by autenable such automation. We specifically focus on Galasa. Galasa is an open-source deep integration test framework for hybrid cloud applications that allows teams to automate tests to run as part of a DevOps pipeline.</p> <p> Read the story</p> <p>Author: Michael Baylis and Others Source: An IBM Redpaper publication</p>"},{"location":"hub/2021/04/09/mainframe-a-la-mode-galasa---integration-testing-for-ibm-z-and-beyond/","title":"Mainframe a La Mode: Galasa - Integration testing for IBM Z and beyond","text":"<p>Galasa's open source automation framework enables mainframe developers to automate their apps for both IBM and hybrid cloud.</p> <p> Watch the video</p> <p>Author: Matthew Cousens, &amp; Will Yates Source: IBM Developer</p>"},{"location":"hub/2021/09/21/goodbye-manual-zos-scenarioshello-galasa/","title":"Goodbye Manual z/OS Scenarios\u2026Hello Galasa!","text":"<p>Find out how the IBM Z and z/OS Platform Evaluation and Test (zPET) team are using Galasa to help them automate their manual scenarios and discover their future plans for Galasa.</p> <p> Read the blog</p> <p>Author: Gene Nitka Source: IBM Developer</p>"},{"location":"hub/2022/03/24/whats-new-in-ibm-distribution-for-galasa-102/","title":"What's new in IBM Distribution for Galasa 1.0.2","text":"<p>Will Yates goes into some of the new features that made it into IBM Distribution for Galasa 1.0.2 and how these complement IBM Virtual Test Platform.</p> <p> Read the blog</p> <p>Author: Will Yates Source: IBM Developer</p>"},{"location":"hub/2023/09/11/galasa-bringing-automated-test-commodity-to-open-source/","title":"Galasa bringing automated test commodity to open source","text":"<p>No enterprise application exists as an island anymore. Find out how Galasa has modernized the test processes that validate the quality of applications with end-to end integration testing that integrates with other open-source tooling.</p> <p> Read the blog</p> <p>Author: Will Yates Source: Open Mainframe Project</p>"},{"location":"hub/2023/09/11/open-mainframe-project-welcomes-galasa-into-its-ecosystem/","title":"Open Mainframe Project Welcomes Galasa into its Ecosystem","text":"<p>The Open Mainframe Project, an open-source initiative that enables collaboration across the mainframe community to develop shared tool sets and resources, today welcomed Galasa, a project that offers developers the ability to test applications at scale regardless of platform, into its ecosystem.</p> <p> Read the Press release</p> <p>Author: Maemalynn Meanor Source: Open Mainframe Project</p>"},{"location":"hub/2023/10/25/the-galasa-configuration-property-store/","title":"The Galasa Configuration Property Store","text":"<p>Integration testing can be complicated. Tests often require configuration parameters to bind to a specific test environment. Galasa Managers require configuration so that systems under test can be contacted. This information needs to stored in a single, central repository that is shareable to the Galasa framework, Ecosystem, Managers and tests. Find out how Galasa solves these challenges by its use of the Configuration Property Store (CPS). Watch the video to understand the features of the Galasa CPS, and see a demonstration on manipulating the values in a CPS by using the Galasa command line (Galasa CLI). Use the information to help you to simplify your test configuration, set Ecosystem-wide configuration properties, and set parameters and credentials on the Ecosystem for tests to read and use at runtime.</p> <p> Watch the video</p> <p>Author: Mike Cobbett, Savaas Kyriacou Source: YouTube</p>"},{"location":"hub/2023/11/17/the-galasa-command-line-tool/","title":"The Galasa command line tool","text":"<p>Learn about the software requirements you need to get started with the Galasa command line tool (galasactl)and find out how to download and install it on your local machine. Watch a demo that takes you through the process of creating, building and running Galasa tests, and viewing the output of those test runs.</p> <p> Watch the video</p> <p>Author: Mike Cobbett Source: YouTube</p>"},{"location":"hub/2023/12/18/galasa-my-first-6-months-as-a-tsc-chair/","title":"Galasa: My First 6 Months as a TSC Chair","text":"<p>Read the blog post by Louisa Seers to find out about her experiences and thoughts during her first six months as Galasa IBM Product Manager and Chair of the Galasa Technical Steering Committee (TSC), and the Galasa journey to adoption by the Open Mainframe Project (OMP).</p> <p> Read the blog</p> <p>Author: Louisa Seers Source: Open Mainframe Project</p>"},{"location":"hub/2024/02/12/galasa-what-is-application-integration-testing/","title":"Galasa: What is Application Integration Testing?","text":"<p>Application integration allows software to be created as a unique and bespoke set of applications that knit together to form critical business processes. Application integration testing ensures that individual components interact with each other in a desirable way, and automation of this stage of testing is critical because there typically are so many configurations, routes, and scenarios to consider. Galasa could be your first step to understanding how to build test cases that cover multiple applications and can even be extended to cover proprietary applications with the use of Managers. Read the blog post by Louisa Seers to find out more.</p> <p> Read the blog</p> <p>Author: Louisa Seers Source: Open Mainframe Project</p>"},{"location":"releases/","title":"Galasa Releases","text":""},{"location":"releases/license/","title":"License","text":"<p>Galasa is licensed under Eclipse Public License 2.0 </p>"},{"location":"releases/2024/08/13/v0.36.0/","title":"0.36.0 - Release Highlights","text":"<ul> <li> <p>You can now create Galasa projects and build and compile Galasa test code using Gradle version 8. For more information, see the <code>Upgrading tests to compile using Gradle version 8</code> section in the Upgrading documentation to understand the changes you need to make.</p> </li> <li> <p>Log into the Galasa Ecosystem and revoke a personal access token by using the <code>galasactl auth tokens delete</code> command.</p> </li> <li> <p>Set terminal size within Gherkin tests (previously only available in Java tests) and use Scenario Outlines.</p> </li> <li> <p>Various updates to the Galasa Web UI </p> </li> <li> <p>Various defect fixes</p> </li> <li> <p>Various documentation updates</p> </li> </ul>"},{"location":"releases/2024/09/18/v0.37.0/","title":"0.37.0 - Release Highlights","text":"<ul> <li> <p>Galasa now supports Java 17.</p> </li> <li> <p>You can delete a test run by using the <code>galasactl runs delete</code> command. Deleting a test run removes all information about the test run along with any associated artifacts from an ecosystem's RAS.</p> </li> </ul>"},{"location":"releases/2024/12/06/v0.38.0/","title":"0.38.0 - Release Highlights","text":"<ul> <li> <p>CLI updates:</p> <ul> <li> <p>You can get, set and delete secrets from the credentials store using the <code>galasactl secrets</code> command. Secrets support base64 encoding to handle special characters.</p> </li> <li> <p>Managing Ecosystem encryption keys describes how to use <code>galasactl secrets get</code> and <code>galasactl resources apply</code> to replace the encryption key being used to encrypt credentials in the Galasa Ecosystem's credentials store.</p> </li> <li> <p>Users can now be deleted with the <code>galasactl users delete</code> command.</p> </li> </ul> </li> <li> <p>Web UI updates:</p> <ul> <li> <p>A new settings page has been added to the web UI to manage access tokens.</p> </li> <li> <p>Recent login activity is now available on the profile page.</p> </li> </ul> </li> <li> <p>This release also includes bug fixes, security updates, and other dependency updates.</p> </li> </ul>"},{"location":"releases/2025/01/16/v0.39.0/","title":"0.39.0 - Release Highlights","text":"<ul> <li> <p>Forks and fork builds are now supported making it easier to contribute to Galasa!</p> </li> <li> <p>All Galasa components now use a common version number.</p> </li> <li> <p>CPS property names can now include the '@' character.</p> </li> <li> <p>The <code>galasactl runs get</code> command supports a new <code>--group</code> option to query test runs by the group ID they were launched with.</p> </li> <li> <p>Gherkin now respects the <code>framework.continue.on.test.failure</code> flag so it doesn't need to exit a feature when the first scenario fails.</p> </li> <li> <p>This release also includes instability fixes, and dependency updates.</p> </li> </ul>"},{"location":"releases/2025/03/12/v0.40.0/","title":"0.40.0 - Release Highlights","text":"<ul> <li> <p>Nameculture:</p> <ul> <li>The term \"Galasa Ecosystem\" is being replaced with \"Galasa Service\" because it more clearly describes Galasa components that are deployed onto a Kubernetes cluster, providing testing as a service.</li> </ul> </li> <li> <p>Galasa Service Changes:</p> <ul> <li> <p>A submission ID is generated for each test run submitted. A new field has been added to the test structures passed over the REST interface. Client programs can use the submission ID to query test runs from the Results Archive Store (RAS).</p> </li> <li> <p>Each user now has a <code>role</code>, which dictates what that user can do. See the documentation on Role Based Access Control (RBAC) for more details.</p> </li> <li> <p>The Helm chart can configure specific users to be <code>owners</code> of the system, such that these users are immutable administrators of the system. Configuring owners is used to set up a system with some initial administrators, and to recover a system that no longer has any functioning administrators.</p> </li> <li> <p>Completed test pods now count when calculating the maximum number of pods that Galasa creates. Use the Helm chart parameter <code>max_engines</code> to configure the maximum number of pods.</p> </li> <li> <p>When tests complete, the pod for the test disappears quicker than in previous releases, to free up resources on the cluster. Instead of up to 5 minutes, completed pods are cleaned up within 2-4 seconds.</p> </li> <li> <p>It is now possible to configure the Galasa service to use an etcd server that is external to the Galasa namespace, for Dynamic Status Store traffic. This option is not recommended but may be useful for allowing testcase developers to use the same resource pools as the rest of the Galasa service.</p> </li> </ul> </li> <li> <p>Framework and Manager changes:</p> <ul> <li>The addition of an IMS manager for contacting, controlling, and asserting against an IMS system.</li> </ul> </li> <li> <p>The Web User interface changes:</p> <ul> <li> <p>Everyone logged-in to the Galasa service can see the list of users on the system, and their roles.</p> </li> <li> <p>Administrators on the Galasa service can delete the tokens of other users, change their role, or delete their entire user record.</p> </li> </ul> </li> <li> <p>Command-line tool (<code>galasactl</code>) changes:</p> <ul> <li>Users launching tests can use multiple override files with the <code>--overridefile</code> option. These files are combined into a single collection of properties, with warning messages generated in the logs if any property keys clash.</li> </ul> </li> <li> <p>Development process, infrastructure, and contributing:</p> <ul> <li> <p>Improvements to the build process and instructions you use to fork the code, and build your own Galasa binaries in your own GitHub organisation.</p> </li> <li> <p>Added experimental instructions describing how to install the Galasa Service into Minikube. Minikube can be used when developing contributions to Galasa, but is not suitable as a useable run time platform.</p> </li> </ul> </li> <li> <p>Various other component version upgrades and bug fixes.</p> </li> </ul>"},{"location":"releases/2025/05/06/v0.41.0/","title":"0.41.0 - Release Highlights","text":""},{"location":"releases/2025/05/06/v0.41.0/#changes-affecting-the-galasa-service","title":"Changes affecting the Galasa Service","text":"<ul> <li> <p>Streams Service:</p> <ul> <li>Streams can now be created, updated and deleted using a new set of REST API endpoints.</li> <li>Command-line tool list or delete report streams, or create and apply changes to stream resources using the galasactl apply -f command.</li> </ul> </li> <li> <p>Resource Management:</p> <ul> <li>Custom managers can have their cleanup code executed in a new \"Resource Cleanup Monitor\" construct, allowing for more cleanup of remote resources after test failures.</li> <li>Cleanup monitors load resource management code from a given test stream.</li> <li>New REST API commands allow manipulation and query of stream definitions.</li> <li>Improved command-line can enable or disable monitors dynamically.</li> </ul> </li> <li> <p>Tagging of test run results:</p> <ul> <li>Test runs can be submitted with extra tags, which are combined with the annotation tags inside the test source code such that the test results are also tagged with the combined set of tags.</li> <li>Extra tagging in test run details can help categorise failures and can contribute to better charting of results over time.</li> </ul> </li> <li> <p>Kubernetes CPU and Memory resources:</p> <ul> <li>For each pod, including pods that runs tests, can optionally specify resources constraints. Telling Kubernetes how much CPU and memory each pod needs helps Kubernetes spread workload among nodes in the cluster. The default install now specifies such limits.</li> </ul> </li> <li> <p>Miscellaneous:</p> <ul> <li>Tests which are re-queued or cancelled get marked as finished, rather than appearing to be active forever.</li> <li>Querying runs with the --active flag no longer returns cancelled runs. Cancelled runs are marked as finished now.</li> <li>Web user interface footer shows the version of the Galasa service, and a health indicator.</li> <li>Test runner handles exceptions from rogue manager code better, so test cleanup can be performed.</li> </ul> </li> </ul>"},{"location":"releases/2025/05/06/v0.41.0/#changes-affecting-local-tests","title":"Changes affecting local tests","text":"<ul> <li> <p>Managers vetoing method execution changes:</p> <ul> <li>Managers implementing <code>anyReasonTestMethodShouldBeIgnored</code> are no longer asked whether the test method should be ignored before running the <code>@Before</code> and <code>@After</code> methods. If the test method is ignored, then the <code>@Before</code> and <code>@After</code> methods are also ignored.</li> </ul> </li> <li> <p>Tests can find out if the test has failed yet:</p> <ul> <li>Test code can ask for a TestStatus provider to be injected into their object. This can be used to find out if the test has failed yet or not, and can be useful when doing complex cleanup of resources allocated during the test.</li> </ul> </li> <li> <p>3270 Manager can now process SSCP-LU-DATA:</p> <ul> <li>Unformatted data screens are processed and the contents made available to test applications.</li> </ul> </li> <li> <p><code>@ContinueOnTestFailure</code> annotations:</p> <ul> <li>These annotations are now respected by the Galasa framework.</li> </ul> </li> </ul>"},{"location":"releases/2025/05/06/v0.41.0/#other-changes","title":"Other changes","text":"<ul> <li> <p>Make contributing code easier:</p> <ul> <li>Code for the galasactl command-line tool has moved git repositories, to the galasa repository.   This simplifies the build process and makes changes on a fork easier to build and verify.</li> </ul> </li> </ul>"},{"location":"releases/2025/06/10/v0.42.0/","title":"0.42.0 - Release Highlights","text":""},{"location":"releases/2025/06/10/v0.42.0/#changes-affecting-the-galasa-service","title":"Changes affecting the Galasa Service","text":"<ul> <li> <p>Cancel a run group using the Group ID. See the new command syntax</p> </li> <li> <p>For developers of Galasa: Easier development of the Web user interface</p> <ul> <li>A Personal Access Token can now be used to run a local instance of the web user interface, targetting an existing Galasa Service. </li> </ul> </li> <li> <p>Added a configuration setting <code>kubeLaunchIntervalMillisecs</code> in the Galasa Helm chart to control the time between launching of successive test runs, to space out launches more evenly so that Kubernetes is not as stressed.</p> </li> <li> <p>Various defects, fixes, version uplifts</p> </li> </ul>"},{"location":"releases/2025/06/10/v0.42.0/#changes-affecting-tests-running-locally-or-on-the-galasa-service","title":"Changes affecting tests running locally or on the Galasa Service","text":"<ul> <li>IMS-TM Manager - Improvements to how the manager handles active conversations (See issue #2250)</li> </ul>"},{"location":"releases/2025/06/10/v0.42.0/#other-changes","title":"Other changes","text":"<ul> <li> <p>Make contributing code easier:</p> <ul> <li>Code for the Galasa documentation has moved git repositories, to the <code>galasa</code> repository.   This simplifies the build process for the Galasa documentation and makes changes on a git fork easier to build and verify.   It also facilitates closer integration between the javadoc, REST interface, CLI syntax and the rest of the material.</li> </ul> </li> <li> <p>New look for the Galasa web site:</p> <ul> <li>The look and feel of the Galasa website and documentation has been improved.   The site now includes page-indexes on the right to navigate each page of the documentation.   The site also supports light and dark mode for easy-reading.   Command-line tool syntax is now more integrated with the documentation, and is searchable.</li> </ul> </li> </ul>"},{"location":"support/","title":"Support","text":"<p>If you find any problems whilst you\u2019re using Galasa, get in touch and get the help you need:</p> <ul> <li> <p>Search our project management repository on GitHub; perhaps someone has already had a similar issue and solved it.</p> </li> <li> <p>If you have an error message or java stack trace exception, feel free to raise an issue in the project management repository and the Galasa community will get back to you as soon as possible.</p> </li> <li> <p>Post a question in the Open Mainframe Project Slack workspace. Register to join first if you're not yet a member. We have the following available Slack channels:</p> <ul> <li><code>#galasa-dev</code> - for developers of Galasa code or Galasa extensions </li> <li><code>#galasa-users</code> - for users comments, and for making announcements </li> <li><code>#galasa-tsc</code> - for technical steering committee discussions on longer term over-arching issues relating to Galasa    </li> </ul> </li> </ul> <p>If your issue requires a code change, the community will do their best to respond and fix the problem as soon as they can. Depending on the severity of the issue, the fix might be scheduled for a future release of Galasa. Alternatively, the fix might be back ported to the current release. Naturally this is always a community decision and your input is just as important.</p> <p>If you want to have a go at fixing the defect yourself, let us know and we will help you to try and fix the issue.</p> <p>We are open to suggestions about more formal support, come and talk to us - we would love to hear from you.</p>"},{"location":"hub/archive/2024/","title":"2024","text":""},{"location":"hub/archive/2023/","title":"2023","text":""},{"location":"hub/archive/2022/","title":"2022","text":""},{"location":"hub/archive/2021/","title":"2021","text":""},{"location":"hub/category/blog/","title":"Blog","text":""},{"location":"hub/category/video/","title":"Video","text":""},{"location":"hub/category/press-release/","title":"Press release","text":""},{"location":"hub/category/redpaper/","title":"Redpaper","text":""},{"location":"hub/category/podcast/","title":"Podcast","text":""},{"location":"hub/page/2/","title":"Galasa Blogs","text":""},{"location":"releases/archive/2025/","title":"2025","text":""},{"location":"releases/archive/2024/","title":"2024","text":""}]}